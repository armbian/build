{
    "Main_options": {
      "BUILD_ONLY": {
        "Author": "xx",
        "src_reference": "xx",
        "desc": "Defines what artifacts should be built",
        "example / [note] test case": "./compile.sh BUILD_ONLY=u-boot,kernel,armbian-config",
        "status": "active",
        "doc_link": ""
      },
      "KERNEL_ONLY": {
        "desc": "Compiles only kernel, U-Boot, and other packages for installation on existing Armbian system",
        "example": "./compile.sh KERNEL_ONLY=yes",
        "status": "deprecated",
        "doc_link": ""
      },
      "KERNEL_CONFIGURE": {
        "desc": "Controls kernel configuration",
        "example": "./compile.sh KERNEL_CONFIGURE=prebuilt",
        "status": "active",
        "doc_link": ""
      },
      "CLEAN_LEVEL": {
        "desc": "Defines what should be cleaned",
        "example": "./compile.sh CLEAN_LEVEL=make,debs",
        "status": "active",
        "doc_link": ""
      },
      "REPOSITORY_INSTALL": {
        "desc": "List of core packages which will be installed from repository",
        "example": "./compile.sh REPOSITORY_INSTALL=u-boot,kernel",
        "status": "active",
        "doc_link": ""
      },
      "KERNEL_KEEP_CONFIG": {
        "desc": "Controls whether to use kernel config file from previous compilation",
        "example": "./compile.sh KERNEL_KEEP_CONFIG=yes",
        "status": "active",
        "doc_link": ""
      },
      "BUILD_MINIMAL": {
        "desc": "Controls whether to build bare CLI image suitable for application deployment",
        "example": "./compile.sh BUILD_MINIMAL=yes",
        "status": "active",
        "doc_link": ""
      },
      "BUILD_DESKTOP": {
        "desc": "Controls whether to build image with minimal desktop environment",
        "example": "./compile.sh BUILD_DESKTOP=yes",
        "status": "active",
        "doc_link": ""
      },
      "EXTERNAL": {
        "desc": "Controls whether to compile and install extra applications and firmware",
        "example": "./compile.sh EXTERNAL=yes",
        "status": "active",
        "doc_link": ""
      },
      "BSPFREEZE": {
        "desc": "Controls whether to freeze armbian packages when building images",
        "example": "./compile.sh BSPFREEZE=yes",
        "status": "active",
        "doc_link": ""
      },
      "INSTALL_HEADERS": {
        "desc": "Controls whether to install kernel headers",
        "example": "./compile.sh INSTALL_HEADERS=yes",
        "status": "active",
        "doc_link": ""
      },
      "EXTERNAL_NEW": {
        "desc": "Controls whether to install extra applications from repository or compile them in chroot",
        "example": "./compile.sh EXTERNAL_NEW=compile",
        "status": "active",
        "doc_link": ""
      },
      "CREATE_PATCHES": {
        "desc": "Controls whether to prompt for making changes to source code for U-Boot and kernel",
        "example": "./compile.sh CREATE_PATCHES=yes",
        "status": "active",
        "doc_link": ""
      },
      "BUILD_ALL": {
        "desc": "Controls whether to cycle through all available board and kernel configurations",
        "example": "./compile.sh BUILD_ALL=yes",
        "status": "active",
        "doc_link": ""
      },
      "LIB_TAG": {
        "desc": "Sets the branch to compile from",
        "example": "./compile.sh LIB_TAG=master",
        "status": "active",
        "doc_link": ""
      },
      "CARD_DEVICE": {
        "desc": "Sets the device of the SD card",
        "example": "./compile.sh CARD_DEVICE=/dev/sdX",
        "status": "active",
        "doc_link": ""
      },
      "EXT": {
        "desc": "Executes extension during the build",
        "example": "./compile.sh EXT=rkdevflash",
        "status": "active",
        "doc_link": ""
      },
      "CRYPTROOT_ENABLE": {
        "desc": "Enables LUKS encrypted rootfs",
        "example": "./compile.sh CRYPTROOT_ENABLE=yes",
        "status": "active",
        "doc_link": ""
      }
    },
    "Hidden_options": {
      "EXPERT": {
        "desc": "Show development features and boards regardless of status in interactive mode",
        "example": "./compile.sh EXPERT=yes",
        "status": "active",
        "doc_link": ""
      },
      "USERPATCHES_PATH": {
        "desc": "Sets alternate path for location of userpatches folder",
        "example": "./compile.sh USERPATCHES_PATH=userpatches/",
        "status": "active",
        "doc_link": ""
      },
      "USE_CCACHE": {
        "desc": "Controls whether to use a C compiler cache",
        "example": "./compile.sh USE_CCACHE=yes",
        "status": "active",
        "doc_link": ""
      },
      "PRIVATE_CCACHE": {
        "desc": "Controls whether to use $DEST/ccache as ccache home directory",
        "example": "./compile.sh PRIVATE_CCACHE=yes",
        "status": "active",
        "doc_link": ""
      },
      "SKIP_EXTERNAL_TOOLCHAINS": {
        "desc": "Controls whether to download and use Linaro toolchains",
        "example": "./compile.sh SKIP_EXTERNAL_TOOLCHAINS=yes",
        "status": "active",
        "doc_link": ""
      },
      "PROGRESS_DISPLAY": {
        "desc": "Specifies the way to display output of verbose processes",
        "example": "./compile.sh PROGRESS_DISPLAY=plain",
        "status": "active",
        "doc_link": ""
      },
      "PROGRESS_LOG_TO_FILE": {
        "desc": "Controls whether to duplicate output to log files",
        "example": "./compile.sh PROGRESS_LOG_TO_FILE=yes",
        "status": "active",
        "doc_link": ""
      },
      "NO_APT_CACHER": {
        "desc": "Disables usage of APT cache",
        "example": "./compile.sh NO_APT_CACHER=yes",
        "status": "active",
        "doc_link": ""
      },
      "DISABLE_IPV6": {
        "desc": "Controls whether to disable IPv6",
        "example": "./compile.sh DISABLE_IPV6=true",
        "status": "active",
        "doc_link": ""
      },
      "NO_HOST_RELEASE_CHECK": {
        "desc": "Overrides the check for a supported host system",
        "example": "./compile.sh NO_HOST_RELEASE_CHECK=yes",
        "status": "active",
        "doc_link": ""
      },
      "USE_MAINLINE_GOOGLE_MIRROR": {
        "desc": "Controls whether to use googlesource.com mirror for downloading mainline kernel sources",
        "example": "./compile.sh USE_MAINLINE_GOOGLE_MIRROR=yes",
        "status": "active",
        "doc_link": ""
      },
      "USE_GITHUB_UBOOT_MIRROR": {
        "desc": "Controls whether to use unofficial Github mirror for downloading mainline U-Boot sources",
        "example": "./compile.sh USE_GITHUB_UBOOT_MIRROR=yes",
        "status": "active",
        "doc_link": ""
      },
      "SYNC_CLOCK": {
        "desc": "Controls whether to sync system clock on builder before starting image creation process",
        "example": "./compile.sh SYNC_CLOCK=yes",
        "status": "active",
        "doc_link": ""
      },
      "OFFLINE_WORK": {
        "desc": "Controls whether to skip downloading and updating sources",
        "example": "./compile.sh OFFLINE_WORK=yes",
        "status": "active",
        "doc_link": ""
      },
      "FORCE_USE_RAMDISK": {
        "desc": "Overrides autodetect for using tmpfs in new debootstrap and image creation process",
        "example": "./compile.sh FORCE_USE_RAMDISK=yes",
        "status": "active",
        "doc_link": ""
      },
      "FIXED_IMAGE_SIZE": {
        "desc": "Creates image file of specified size (in megabytes)",
        "example": "./compile.sh FIXED_IMAGE_SIZE=1024",
        "status": "active",
        "doc_link": ""
      },
      "BOOTSIZE": {
        "desc": "Sets size (in megabytes) for separate /boot filesystem",
        "example": "./compile.sh BOOTSIZE=128",
        "status": "active",
        "doc_link": ""
      },
      "COMPRESS_OUTPUTIMAGE": {
        "desc": "Specifies how to create compressed archive with image file and GPG signature for redistribution",
        "example": "./compile.sh COMPRESS_OUTPUTIMAGE=sha,gpg",
        "status": "active",
        "doc_link": ""
      },
      "IMAGE_XZ_COMPRESSION_RATIO": {
        "desc": "Specifies images compression levels when using xz compressor",
        "example": "./compile.sh IMAGE_XZ_COMPRESSION_RATIO=5",
        "status": "active",
        "doc_link": ""
      },
      "SEVENZIP": {
        "desc": "Creates .7z archive with extreme compression ratio instead of .zip",
        "example": "./compile.sh SEVENZIP=yes",
        "status": "active",
        "doc_link": ""
      },
      "BUILD_KSRC": {
        "desc": "Creates kernel source packages while building",
        "example": "./compile.sh BUILD_KSRC=yes",
        "status": "active",
        "doc_link": ""
      },
      "INSTALL_KSRC": {
        "desc": "Pre-installs kernel sources on the image",
        "example": "./compile.sh INSTALL_KSRC=yes",
        "status": "active",
        "doc_link": ""
      },
      "ROOTFS_TYPE": {
        "desc": "Creates image with different root filesystems instead of default ext4",
        "example": "./compile.sh ROOTFS_TYPE=btrfs",
        "status": "active",
        "doc_link": ""
      },
      "BTRFS_COMPRESSION": {
        "desc": "Selects btrfs filesystem compression method and compression level",
        "example": "./compile.sh BTRFS_COMPRESSION=zlib",
        "status": "active",
        "doc_link": ""
      },
      "FORCE_BOOTSCRIPT_UPDATE": {
        "desc": "Forces bootscript to get updated during bsp package upgrade",
        "example": "./compile.sh FORCE_BOOTSCRIPT_UPDATE=yes",
        "status": "active",
        "doc_link": ""
      },
      "NAMESERVER": {
        "desc": "Specifies the DNS resolver used inside the build chroot",
        "example": "./compile.sh NAMESERVER=8.8.8.8",
        "status": "active",
        "doc_link": ""
      },
      "DOWNLOAD_MIRROR": {
        "desc": "Selects download mirror for toolchain and debian/ubuntu packages",
        "example": "./compile.sh DOWNLOAD_MIRROR=china",
        "status": "active",
        "doc_link": ""
      },
      "ARMBIAN_MIRROR": {
        "desc": "Overrides automated mirror selection",
        "example": "./compile.sh ARMBIAN_MIRROR=auto",
        "status": "active",
        "doc_link": ""
      },
      "MAINLINE_MIRROR": {
        "desc": "Selects mainline mirror of linux-stable.git",
        "example": "./compile.sh MAINLINE_MIRROR=tuna",
        "status": "active",
        "doc_link": ""
      },
      "UBOOT_MIRROR": {
        "desc": "Selects mainline mirror of u-boot.git",
        "example": "./compile.sh UBOOT_MIRROR=github",
        "status": "active",
        "doc_link": ""
      },
      "GITHUB_MIRROR": {
        "desc": "Selects download mirror for GitHub hosted repository",
        "example": "./compile.sh GITHUB_MIRROR=fastgit",
        "status": "active",
        "doc_link": ""
      },
      "REGIONAL_MIRROR": {
        "desc": "Selects mirrors based on regional setting",
        "example": "./compile.sh REGIONAL_MIRROR=china",
        "status": "active",
        "doc_link": ""
      },
      "USE_TORRENT": {
        "desc": "Uses torrent to download toolchains and rootfs",
        "example": "./compile.sh USE_TORRENT=yes",
        "status": "active",
        "doc_link": ""
      },
      "ROOT_FS_CREATE_ONLY": {
        "desc": "Forces local cache creation",
        "example": "./compile.sh ROOT_FS_CREATE_ONLY=yes",
        "status": "active",
        "doc_link": ""
      },
      "EXTRAWIFI": {
        "desc": "Includes several drivers for WiFi adapters",
        "example": "./compile.sh EXTRAWIFI=yes",
        "status": "active",
        "doc_link": ""
      },
      "WIREGUARD": {
        "desc": "Includes Wireguard for kernels before it got upstreamed to mainline",
        "example": "./compile.sh WIREGUARD=yes",
        "status": "active",
        "doc_link": ""
      },
      "AUFS": {
        "desc": "Include support for AUFS",
        "example": "./compile.sh AUFS=yes",
        "status": "active",
        "doc_link": ""
      },
      "SKIP_BOOTSPLASH": {
        "desc": "Uses kernel bootsplash",
        "example": "./compile.sh SKIP_BOOTSPLASH=yes",
        "status": "active",
        "doc_link": ""
      },
      "CONSOLE_AUTOLOGIN": {
        "desc": "Automatically login as root for local consoles",
        "example": "./compile.sh CONSOLE_AUTOLOGIN=yes",
        "status": "active",
        "doc_link": ""
      },
      "EXT": {
        "desc": "Executes extension during the build",
        "example": "./compile.sh EXT=fake-vcgencmd",
        "status": "active",
        "doc_link": ""
      },
      "INCLUDE_HOME_DIR": {
        "desc": "Includes directories created inside /home in final image",
        "example": "./compile.sh INCLUDE_HOME_DIR=yes",
        "status": "active",
        "doc_link": ""
      }
    }
  }
  

#!/bin/bash -e

declare -g -a bootconfig=()

function detect_kernel_type() {
	declare kernel_path="$1"
	declare type=""
	declare compress_type=""

	type="$(file --brief "${kernel_path}" | cut -d',' -f1)"

	if [[ "${type}" == "gzip compressed data" ]]; then
		type="$(file --brief --uncompress "${kernel_path}" | cut -d',' -f1)"
		compress_type=".gz"
	fi

	type="${type% (*-endian)}"
	case "${type}" in
		Linux\ kernel\ *\ boot\ executable\ *)
			echo "${type#Linux kernel * boot executable }${compress_type}"
			;;
		"u-boot legacy uImage")
			echo "uImage${compress_type}"
			;;
	esac
}

function load() {
	bootconfig=()
	if [ -f "/boot/bootconfig" ]; then
		while read -r item; do
			[[ "${item}" == "# ARMBIAN_BOOTCONFIG;"* ]] || continue
			version="${item#\# ARMBIAN_BOOTCONFIG;}"
			bootconfig+=( "${version}" )
		done <"/boot/bootconfig"
	fi
}

function save() {
	{
		cat <<- HEADER
			# DO NOT EDIT THIS FILE
			# Auto-generated by /usr/bin/armbian-bootconfig
		HEADER

		echo -e "\n# Configuration used by armbian-bootconfig"
		for version in "${bootconfig[@]}"; do
			echo "# ARMBIAN_BOOTCONFIG;${version}"
		done

		echo -e "\n# Configuration for bootscript"
		echo "ARMBIAN_BOOTMENU_NUMBER=${#bootconfig[@]}"
		declare -i i=0
		for i in "${!bootconfig[@]}"; do
			declare version="${bootconfig[${i}]}"

			declare title="Armbian with Linux ${version}"
			declare -A env=(
				[VERSION]="${version}"
				[KERNEL_TYPE]="$(detect_kernel_type "/boot/vmlinuz-${version}")"
				[KERNEL_NAME]="vmlinuz-${version}"
				[INITRD_TYPE]="uInitrd"
				[INITRD_NAME]="uInitrd-${version}"
				[DTB_NAME]="dtb-${version}"
			)

			echo ""
			echo "ARMBIAN_BOOTMENU_TITLE[${i}]=${title}"
			echo -n "ARMBIAN_BOOTMENU_COMMAND[${i}]="
			for name in "${!env[@]}"; do
				echo -n "setenv '${name}' '${env[${name}]}'; "
			done
			echo ""
		done
	} >/boot/bootconfig
}

function containIn() {
	declare str="$1"
	shift 1
	for v in "$@"; do
		[[ "${v}" != "${str}" ]] || return 0
	done
	return 1
}

function usage() {
	declare name
	name="$(basename "$0")"
	cat <<- USAGE >&2
		${name} - Tool to manage armbian bootconfig

		Usage:
		  ${name} install VERSION   - Install kernel bootconfig for VERSION
		  ${name} remove VERSION    - Remove kernel bootconfig for VERSION
		  ${name} scan              - Search all bootable kernel and insert them to the end of bootconfig
		  ${name} list              - List all bootconfig
		  ${name} default [VERSION] - Choose default kernel
	USAGE
}

function install() {
	declare insert_end=false
	declare version=""
	for arg in "$@"; do
		case "${arg}" in
			--insert-end)
				insert_end=true
				;;
			-*)
				echo "Unsupported option: $arg" >&2
				return 22
				;;
			*)
				version="$arg"
				break
				;;
		esac
	done

	[[ -n "${version}" ]] || return 22

	if containIn "${version}" "${bootconfig[@]}"; then
		echo "Kernel version ${version} has installed" >&2
		return 17
	fi

	if [ ! -f "/boot/vmlinuz-${version}" ]; then
		echo "Kernel /boot/vmlinuz-${version} not found" >&2
		return 2
	fi

	if ${insert_end}; then
		echo "Installing new kernel version ${version} to the end of bootconfig"
		bootconfig=( "${bootconfig[@]}" "${version}" )
	else
		echo "Installing new kernel version ${version} to the head of bootconfig"
		bootconfig=( "${version}" "${bootconfig[@]}" )
	fi

	return 0
}

function remove() {
	declare version="$1"
	[[ -n "${version}" ]] || return 22

	declare -i index=-1
	for i in "${!bootconfig[@]}"; do
		if [[ "${bootconfig[${i}]}" == "${version}" ]]; then
			index="${i}"
			break
		fi
	done

	if [[ "${index}" -lt 0 ]]; then
		echo "Kernel version ${version} not found" >&2
		return 2
	fi

	echo "Removing kernel version ${version}"
	unset "bootconfig[${index}]"
	# Resort index
	bootconfig=( "${bootconfig[@]}" )

	return 0
}

function scan() {
	while read -r kernel_path; do
		declare version="${kernel_path#/boot/vmlinuz-}"
		if ! containIn "${version}" "${bootconfig[@]}"; then
			install --insert-end "${version}"
		fi
	done < <(ls --sort=time /boot/vmlinuz-*)
}

function list() {
	for version in "${bootconfig[@]}"; do
		echo "${version}"
	done

	return 0
}

function default_menu() {
	declare version=""
	while true; do
		echo -e "All installed kernel:"
		for i in "${!bootconfig[@]}"; do
			echo -e "\t${i}) ${bootconfig[${i}]}"
		done

		declare resp
		read -r -p "Choose the default boot kernel: " resp
		if [[ "${resp}" =~ ^[0-9]+$ ]] && [[ -n "${bootconfig[${resp}]}" ]]; then
			version="${bootconfig[${resp}]}"
			break
		elif containIn "${resp}" "${bootconfig[@]}"; then
			version="${resp}"
			break
		fi
	done

	default "${version}"
}

function default() {
	declare version="$1"

	if [[ -z "${version}" ]]; then
		default_menu
		return $?
	fi

	declare -i index=-1
	for i in "${!bootconfig[@]}"; do
		if [[ "${bootconfig[${i}]}" == "${version}" ]]; then
			index="${i}"
			break
		fi
	done

	if [[ "${index}" -lt 0 ]]; then
		echo "Kernel version ${version} not found" >&2
		return 2
	fi

	echo "Set default boot kernel version ${version}"
	unset "bootconfig[${index}]"
	bootconfig=( "${version}" "${bootconfig[@]}" )

	return 0
}

function main() {
	declare ret=0

	case "$1" in
		install|remove|scan|default)
			load
			"$@" || ret=$?
			if [[ ${ret} == 0 ]]; then
				save || ret=$?
			fi
			;;
		list)
			load
			"$@" || ret=$?
			;;
		*)
			ret=22
			;;
	esac

	[[ ${ret} != 22 ]] || usage
	exit $ret
}

main "$@"

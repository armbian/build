From 2b73935784b88ef50fc4be16254a4962b5f70383 Mon Sep 17 00:00:00 2001
From: The-going <48602507+The-going@users.noreply.github.com>
Date: Tue, 10 Mar 2020 16:44:18 +0300
Subject: [PATCH] general packaging 4.19.y

---
 arch/arm64/Makefile      |   2 +-
 scripts/package/builddeb | 121 ++++++++++++++++++++++++++++++++++++++++++++---
 scripts/package/mkdebian |  12 ++++-
 3 files changed, 126 insertions(+), 9 deletions(-)

diff --git a/arch/arm64/Makefile b/arch/arm64/Makefile
index 9a5e28141211..851e646169ba 100644
--- a/arch/arm64/Makefile
+++ b/arch/arm64/Makefile
@@ -113,7 +113,7 @@ core-$(CONFIG_EFI_STUB) += $(objtree)/drivers/firmware/efi/libstub/lib.a
 
 # Default target when executing plain make
 boot		:= arch/arm64/boot
-KBUILD_IMAGE	:= $(boot)/Image.gz
+KBUILD_IMAGE	:= $(boot)/Image
 KBUILD_DTBS	:= dtbs
 
 all:	Image.gz $(KBUILD_DTBS)
diff --git a/scripts/package/builddeb b/scripts/package/builddeb
index 0b31f4f1f92c..f6b96d8507f4 100755
--- a/scripts/package/builddeb
+++ b/scripts/package/builddeb
@@ -29,6 +29,44 @@ create_package() {
 	# in case we are in a restrictive umask environment like 0077
 	chmod -R a+rX "$pdir"
 
+	# Create preinstall and post install script to remove dtb
+	if [[ "$1" == *dtb* ]]; then
+
+	cat >> $pdir/DEBIAN/preinst <<EOT
+rm -rf /boot/dtb-$version; rm -rf /boot/dtb
+exit 0
+EOT
+
+	cat >> $pdir/DEBIAN/postinst <<EOT
+cd /boot
+ln -sfT dtb-$version dtb 2> /dev/null || mv dtb-$version dtb
+exit 0
+EOT
+
+	chmod 775 $pdir/DEBIAN/preinst ; chmod 775 $pdir/DEBIAN/postinst
+	fi
+
+	# Create postinst prerm scripts for headers
+	if [[ "$1" == *headers* ]]; then
+
+cat >> $pdir/DEBIAN/postinst << EOT
+cd /usr/src/linux-headers-$version
+echo "Compiling headers - please wait ..."
+find -type f -exec touch {} +
+make -s scripts >/dev/null
+make -s M=scripts/mod/ >/dev/null
+exit 0
+EOT
+
+cat >> $pdir/DEBIAN/prerm << EOT
+cd /usr/src/linux-headers-$version
+rm -rf scripts .config.old
+exit 0
+EOT
+
+	chmod 775 $pdir/DEBIAN/postinst ; chmod 775 $pdir/DEBIAN/prerm
+	fi
+
 	# Create the package
 	dpkg-gencontrol -p$pname -P"$pdir"
 	dpkg --build "$pdir" ..
@@ -39,9 +77,11 @@ tmpdir="$objtree/debian/tmp"
 kernel_headers_dir="$objtree/debian/hdrtmp"
 libc_headers_dir="$objtree/debian/headertmp"
 dbg_dir="$objtree/debian/dbgtmp"
-packagename=linux-image-$version
-kernel_headers_packagename=linux-headers-$version
-libc_headers_packagename=linux-libc-dev
+dtb_dir="$objtree/debian/dtbtmp"
+packagename=linux-image-"$BRANCH$LOCALVERSION"
+kernel_headers_packagename=linux-headers-"$BRANCH$LOCALVERSION"
+dtb_packagename=linux-dtb-"$BRANCH$LOCALVERSION"
+libc_headers_packagename=linux-libc-dev-"$BRANCH$LOCALVERSION"
 dbg_packagename=$packagename-dbg
 
 if [ "$ARCH" = "um" ] ; then
@@ -52,6 +92,15 @@ fi
 # XXX: have each arch Makefile export a variable of the canonical image install
 # path instead
 case $ARCH in
+aarch64|arm64)
+	image_name=Image
+	installed_image_path="boot/vmlinuz-$version"
+
+	;;
+arm*)
+	image_name=zImage
+	installed_image_path="boot/vmlinuz-$version"
+	;;
 um)
 	installed_image_path="usr/bin/linux-$version"
 	;;
@@ -65,7 +114,9 @@ esac
 BUILD_DEBUG="$(grep -s '^CONFIG_DEBUG_INFO=y' $KCONFIG_CONFIG || true)"
 
 # Setup the directory structure
-rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" $objtree/debian/files
+rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" "$dtb_dir" $objtree/debian/files
+mkdir -m 755 -p "$dtb_dir/DEBIAN"
+mkdir -p "$dtb_dir/boot/dtb-$version" "$dtb_dir/usr/share/doc/$dtb_packagename"
 mkdir -m 755 -p "$tmpdir/DEBIAN"
 mkdir -p "$tmpdir/lib" "$tmpdir/boot"
 mkdir -p "$kernel_headers_dir/lib/modules/$version/"
@@ -118,6 +169,11 @@ if grep -q '^CONFIG_MODULES=y' $KCONFIG_CONFIG ; then
 	fi
 fi
 
+if grep -q '^CONFIG_OF=y' $KCONFIG_CONFIG ; then
+	#mkdir -p "$tmpdir/boot/dtb"
+	INSTALL_DTBS_PATH="$dtb_dir/boot/dtb-$version" $MAKE KBUILD_SRC= dtbs_install
+fi
+
 if [ "$ARCH" != "um" ]; then
 	$MAKE headers_check KBUILD_SRC=
 	$MAKE headers_install KBUILD_SRC= INSTALL_HDR_PATH="$libc_headers_dir/usr"
@@ -137,7 +193,7 @@ fi
 for script in postinst postrm preinst prerm ; do
 	mkdir -p "$tmpdir$debhookdir/$script.d"
 	cat <<EOF > "$tmpdir/DEBIAN/$script"
-#!/bin/sh
+#!/bin/bash
 
 set -e
 
@@ -153,9 +209,58 @@ EOF
 	chmod 755 "$tmpdir/DEBIAN/$script"
 done
 
+##
+## Create sym link to kernel image
+##
+sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/postinst
+cat >> $tmpdir/DEBIAN/postinst <<EOT
+if [ "\$(grep nand /proc/partitions)" != "" ] && [ "\$(grep mmc /proc/partitions)" = "" ]; then
+	mkimage -A arm -O linux -T kernel -C none -a "0x40008000" -e "0x40008000" -n "Linux kernel" -d /$installed_image_path /boot/uImage  > /dev/null 2>&1
+	cp /boot/uImage /tmp/uImage
+	sync
+	mountpoint -q /boot || mount /boot
+	cp /tmp/uImage /boot/uImage
+	rm -f /$installed_image_path
+else
+	ln -sf $(basename $installed_image_path) /boot/$image_name 2> /dev/null || mv /$installed_image_path /boot/$image_name
+fi
+touch /boot/.next
+exit 0
+EOT
+
+##
+## FAT install workaround
+##
+sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/preinst
+cat >> $tmpdir/DEBIAN/preinst <<EOT
+# exit if we are running chroot
+if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then exit 0; fi
+
+check_and_unmount (){
+	boot_device=\$(mountpoint -d /boot)
+
+	for file in /dev/* ; do
+		CURRENT_DEVICE=\$(printf "%d:%d" \$(stat --printf="0x%t 0x%T" \$file))
+		if [[ "\$CURRENT_DEVICE" = "\$boot_device" ]]; then
+			boot_partition=\$file
+			break
+		fi
+	done
+
+	bootfstype=\$(blkid -s TYPE -o value \$boot_partition)
+	if [ "\$bootfstype" = "vfat" ]; then
+		# we have to keep it mounted! umount /boot
+		rm -f /boot/System.map* /boot/config* /boot/vmlinuz* /boot/$image_name /boot/uImage
+	fi
+}
+mountpoint -q /boot && check_and_unmount
+EOT
+echo "exit 0" >> $tmpdir/DEBIAN/preinst
+
 # Build kernel header package
 (cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
+(cd $srctree; find security/*/include -type f) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f) >> "$objtree/debian/hdrsrcfiles"
 if grep -q '^CONFIG_STACK_VALIDATION=y' $KCONFIG_CONFIG ; then
@@ -167,15 +272,19 @@ if grep -q '^CONFIG_GCC_PLUGINS=y' $KCONFIG_CONFIG ; then
 fi
 destdir=$kernel_headers_dir/usr/src/linux-headers-$version
 mkdir -p "$destdir"
+(cd $destdir; patch -p1 < /tmp/headers-debian-byteshift.patch)
 (cd $srctree; tar -c -f - -T -) < "$objtree/debian/hdrsrcfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; tar -c -f - -T -) < "$objtree/debian/hdrobjfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
 ln -sf "/usr/src/linux-headers-$version" "$kernel_headers_dir/lib/modules/$version/build"
 rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"
 
+(cd $destdir; make M=scripts clean)
+
 if [ "$ARCH" != "um" ]; then
 	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
-	create_package "$libc_headers_packagename" "$libc_headers_dir"
+	# create_package "$libc_headers_packagename" "$libc_headers_dir"
+	create_package "$dtb_packagename" "$dtb_dir"
 fi
 
 create_package "$packagename" "$tmpdir"
diff --git a/scripts/package/mkdebian b/scripts/package/mkdebian
index edcad61fe3cd..8a49f432921f 100755
--- a/scripts/package/mkdebian
+++ b/scripts/package/mkdebian
@@ -94,10 +94,12 @@ else
 	packageversion=$version-$revision
 fi
 sourcename=$KDEB_SOURCENAME
-packagename=linux-image-$version
-kernel_headers_packagename=linux-headers-$version
+packagename=linux-image-"$BRANCH$LOCALVERSION"
+kernel_headers_packagename=linux-headers-"$BRANCH$LOCALVERSION"
+dtb_packagename=linux-dtb-"$BRANCH$LOCALVERSION"
 dbg_packagename=$packagename-dbg
 debarch=
+image_name=
 set_debarch
 
 if [ "$ARCH" = "um" ] ; then
@@ -181,6 +183,7 @@ Description: Linux kernel, version $version
 
 Package: $kernel_headers_packagename
 Architecture: $debarch
+Depends: make, gcc, libc6-dev, flex, bison, libssl-dev
 Description: Linux kernel headers for $version on $debarch
  This package provides kernel header files for $version on $debarch
  .
@@ -200,6 +203,11 @@ Architecture: $debarch
 Description: Linux kernel debugging symbols for $version
  This package will come in handy if you need to debug the kernel. It provides
  all the necessary debug symbols for the kernel and its modules.
+
+Package: $dtb_packagename
+Architecture: $debarch
+Description: Linux DTB, version $version
+ This package contains device blobs from the Linux kernel, version $version
 EOF
 
 cat <<EOF > debian/rules
-- 
2.16.4


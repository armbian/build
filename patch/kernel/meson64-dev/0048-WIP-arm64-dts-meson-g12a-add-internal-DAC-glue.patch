From 99161be37c5e8eeca93b0d2d6f0f600e3eed15fd Mon Sep 17 00:00:00 2001
From: Jerome Brunet <jbrunet@baylibre.com>
Date: Wed, 14 Aug 2019 17:28:36 +0200
Subject: [PATCH 048/101] WIP: arm64: dts: meson: g12a: add internal DAC glue

Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
---
 arch/arm64/boot/dts/amlogic/meson-g12.dtsi |  9 +++++
 sound/soc/meson/g12a-toacodec.c            | 42 ++++++++++++++--------
 2 files changed, 36 insertions(+), 15 deletions(-)

diff --git a/arch/arm64/boot/dts/amlogic/meson-g12.dtsi b/arch/arm64/boot/dts/amlogic/meson-g12.dtsi
index 55d39020ec72..0d14409f509c 100644
--- a/arch/arm64/boot/dts/amlogic/meson-g12.dtsi
+++ b/arch/arm64/boot/dts/amlogic/meson-g12.dtsi
@@ -343,6 +343,15 @@
 			status = "disabled";
 		};
 
+		toacodec: audio-controller@740 {
+			compatible = "amlogic,g12a-toacodec";
+			reg = <0x0 0x740 0x0 0x4>;
+			#sound-dai-cells = <1>;
+			sound-name-prefix = "TOACODEC";
+			resets = <&clkc_audio AUD_RESET_TOACODEC>;
+			status = "disabled";
+		};
+
 		tohdmitx: audio-controller@744 {
 			compatible = "amlogic,g12a-tohdmitx";
 			reg = <0x0 0x744 0x0 0x4>;
diff --git a/sound/soc/meson/g12a-toacodec.c b/sound/soc/meson/g12a-toacodec.c
index 0ee074f6fc87..4e29528a8cb4 100644
--- a/sound/soc/meson/g12a-toacodec.c
+++ b/sound/soc/meson/g12a-toacodec.c
@@ -21,7 +21,8 @@
 
 #define TOACODEC_CTRL0			0x0
 #define  CTRL0_ENABLE_SHIFT		31
-#define  CTRL0_DAT_SEL			GENMASK(15, 14)
+#define  CTRL0_DAT_SEL_SHIFT		14
+#define  CTRL0_DAT_SEL			(0x3 << CTRL0_DAT_SEL_SHIFT)
 #define  CTRL0_LANE_SEL			12
 #define  CTRL0_LRCLK_SEL		GENMASK(9, 8)
 #define  CTRL0_BLK_CAP_INV		BIT(7)
@@ -35,18 +36,28 @@ static const char * const g12a_toacodec_mux_texts[] = {
 	"I2S A", "I2S B", "I2S C",
 };
 
-static int g12a_toacodec_get_mux(struct snd_soc_component *component)
+static int g12a_toacodec_mux_put_enum(struct snd_kcontrol *kcontrol,
+				      struct snd_ctl_elem_value *ucontrol)
 {
-	unsigned int val;
+	struct snd_soc_component *component =
+		snd_soc_dapm_kcontrol_component(kcontrol);
+	struct snd_soc_dapm_context *dapm =
+		snd_soc_dapm_kcontrol_dapm(kcontrol);
+	struct soc_enum *e = (struct soc_enum *)kcontrol->private_value;
+	unsigned int mux, changed;
 
-	snd_soc_component_read(component, TOACODEC_CTRL0, &val);
-	return FIELD_GET(CTRL0_DAT_SEL, val);
-}
+	mux = snd_soc_enum_item_to_val(e, ucontrol->value.enumerated.item[0]);
+	changed = snd_soc_component_test_bits(component, e->reg,
+					      CTRL0_DAT_SEL,
+					      FIELD_PREP(CTRL0_DAT_SEL, mux));
 
-static int g12a_toacodec_put_mux(struct snd_soc_component *component,
-				 unsigned int mux)
-{
-	snd_soc_component_update_bits(component, TOACODEC_CTRL0,
+	if (!changed)
+		return 0;
+
+	/* Force disconnect of the mux while updating */
+	snd_soc_dapm_mux_update_power(dapm, kcontrol, 0, NULL, NULL);
+
+	snd_soc_component_update_bits(component, e->reg,
 				      CTRL0_DAT_SEL |
 				      CTRL0_LRCLK_SEL |
 				      CTRL0_BCLK_SEL,
@@ -65,17 +76,18 @@ static int g12a_toacodec_put_mux(struct snd_soc_component *component,
 	 * source. For that, we will need regmap backed clock mux which
 	 * is a work in progress
 	 */
-	snd_soc_component_update_bits(component, TOACODEC_CTRL0,
+	snd_soc_component_update_bits(component, e->reg,
 				      CTRL0_MCLK_SEL,
 				      FIELD_PREP(CTRL0_MCLK_SEL, mux));
 
+	snd_soc_dapm_mux_update_power(dapm, kcontrol, mux, e, NULL);
+
 	return 0;
 }
 
-static MESON_CODEC_GLUE_ENUM_DECL(g12a_toacodec_mux_glue,
-				  g12a_toacodec_mux_texts,
-				  g12a_toacodec_get_mux,
-				  g12a_toacodec_put_mux);
+static SOC_ENUM_SINGLE_DECL(g12a_toacodec_mux_enum, TOACODEC_CTRL0,
+			    CTRL0_DAT_SEL_SHIFT,
+			    g12a_toacodec_mux_texts);
 
 static const struct snd_kcontrol_new g12a_toacodec_mux =
 	SOC_DAPM_ENUM_EXT("Source", g12a_toacodec_mux_enum,
-- 
2.17.1


From 90fff935b3971b4aefe785106acef348a14bf380 Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megi@xff.cz>
Date: Sun, 21 Jul 2024 23:06:34 +0200
Subject: Fix for usb gadget on PP

- this will get squashed into

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/usb/gadget/function/f_ecm.c    |  6 ++----
 drivers/usb/gadget/function/f_eem.c    | 22 +++++++---------------
 drivers/usb/gadget/function/f_ncm.c    |  5 ++---
 drivers/usb/gadget/function/f_rndis.c  | 21 ++++++---------------
 drivers/usb/gadget/function/f_subset.c | 12 +++++-------
 drivers/usb/gadget/function/u_ether.c  |  6 ++++--
 6 files changed, 26 insertions(+), 46 deletions(-)

diff --git a/drivers/usb/gadget/function/f_ecm.c b/drivers/usb/gadget/function/f_ecm.c
index e331cc64390b..d19f545876ce 100644
--- a/drivers/usb/gadget/function/f_ecm.c
+++ b/drivers/usb/gadget/function/f_ecm.c
@@ -685,14 +685,12 @@ ecm_bind(struct usb_configuration *c, struct usb_function *f)
 	ecm_opts = container_of(f->fi, struct f_ecm_opts, func_inst);
 
 	mutex_lock(&ecm_opts->lock);
-
 	gether_set_gadget(ecm_opts->net, cdev->gadget);
-
 	if (!ecm_opts->bound) {
 		status = gether_register_netdev(ecm_opts->net);
-		ecm_opts->bound = true;
+		if (!status)
+			ecm_opts->bound = true;
 	}
-
 	mutex_unlock(&ecm_opts->lock);
 	if (status)
 		return status;
diff --git a/drivers/usb/gadget/function/f_eem.c b/drivers/usb/gadget/function/f_eem.c
index 6382cd138d20..3a4fef6b4ec9 100644
--- a/drivers/usb/gadget/function/f_eem.c
+++ b/drivers/usb/gadget/function/f_eem.c
@@ -247,31 +247,23 @@ static int eem_bind(struct usb_configuration *c, struct usb_function *f)
 	struct usb_composite_dev *cdev = c->cdev;
 	struct f_eem		*eem = func_to_eem(f);
 	struct usb_string	*us;
-	int			status;
+	int			status = 0;
 	struct usb_ep		*ep;
 
 	struct f_eem_opts	*eem_opts;
 
 	eem_opts = container_of(f->fi, struct f_eem_opts, func_inst);
-	/*
-	 * in drivers/usb/gadget/configfs.c:configfs_composite_bind()
-	 * configurations are bound in sequence with list_for_each_entry,
-	 * in each configuration its functions are bound in sequence
-	 * with list_for_each_entry, so we assume no race condition
-	 * with regard to eem_opts->bound access
-	 */
+
 	mutex_lock(&eem_opts->lock);
 	gether_set_gadget(eem_opts->net, cdev->gadget);
-	mutex_unlock(&eem_opts->lock);
-
 	if (!eem_opts->bound) {
-		mutex_lock(&eem_opts->lock);
 		status = gether_register_netdev(eem_opts->net);
-		mutex_unlock(&eem_opts->lock);
-		if (status)
-			return status;
-		eem_opts->bound = true;
+		if (!status)
+			eem_opts->bound = true;
 	}
+	mutex_unlock(&eem_opts->lock);
+	if (status)
+		return status;
 
 	us = usb_gstrings_attach(cdev, eem_strings,
 				 ARRAY_SIZE(eem_string_defs));
diff --git a/drivers/usb/gadget/function/f_ncm.c b/drivers/usb/gadget/function/f_ncm.c
index 5e8659050d36..96499743e72f 100644
--- a/drivers/usb/gadget/function/f_ncm.c
+++ b/drivers/usb/gadget/function/f_ncm.c
@@ -1454,14 +1454,13 @@ static int ncm_bind(struct usb_configuration *c, struct usb_function *f)
 	if (!ncm_opts->bound) {
 		ncm_opts->net->mtu = (ncm_opts->max_segment_size - ETH_HLEN);
 		status = gether_register_netdev(ncm_opts->net);
+		if (!status)
+			ncm_opts->bound = true;
 	}
 	mutex_unlock(&ncm_opts->lock);
-
 	if (status)
 		goto fail;
 
-	ncm_opts->bound = true;
-
 	us = usb_gstrings_attach(cdev, ncm_strings,
 				 ARRAY_SIZE(ncm_string_defs));
 	if (IS_ERR(us)) {
diff --git a/drivers/usb/gadget/function/f_rndis.c b/drivers/usb/gadget/function/f_rndis.c
index a15dfb8e6f01..3df56bbfe828 100644
--- a/drivers/usb/gadget/function/f_rndis.c
+++ b/drivers/usb/gadget/function/f_rndis.c
@@ -658,7 +658,7 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	struct usb_composite_dev *cdev = c->cdev;
 	struct f_rndis		*rndis = func_to_rndis(f);
 	struct usb_string	*us;
-	int			status;
+	int			status = 0;
 	struct usb_ep		*ep;
 
 	struct f_rndis_opts *rndis_opts;
@@ -681,25 +681,16 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	rndis_iad_descriptor.bFunctionSubClass = rndis_opts->subclass;
 	rndis_iad_descriptor.bFunctionProtocol = rndis_opts->protocol;
 
-	/*
-	 * in drivers/usb/gadget/configfs.c:configfs_composite_bind()
-	 * configurations are bound in sequence with list_for_each_entry,
-	 * in each configuration its functions are bound in sequence
-	 * with list_for_each_entry, so we assume no race condition
-	 * with regard to rndis_opts->bound access
-	 */
 	mutex_lock(&rndis_opts->lock);
 	gether_set_gadget(rndis_opts->net, cdev->gadget);
-	mutex_unlock(&rndis_opts->lock);
-
 	if (!rndis_opts->bound) {
-		mutex_lock(&rndis_opts->lock);
 		status = gether_register_netdev(rndis_opts->net);
-		mutex_unlock(&rndis_opts->lock);
-		if (status)
-			goto fail;
-		rndis_opts->bound = true;
+		if (!status)
+			rndis_opts->bound = true;
 	}
+	mutex_unlock(&rndis_opts->lock);
+	if (status)
+		goto fail;
 
 	us = usb_gstrings_attach(cdev, rndis_strings,
 				 ARRAY_SIZE(rndis_string_defs));
diff --git a/drivers/usb/gadget/function/f_subset.c b/drivers/usb/gadget/function/f_subset.c
index 70448dd67812..3e92ce958a64 100644
--- a/drivers/usb/gadget/function/f_subset.c
+++ b/drivers/usb/gadget/function/f_subset.c
@@ -310,16 +310,14 @@ geth_bind(struct usb_configuration *c, struct usb_function *f)
 	 */
 	mutex_lock(&gether_opts->lock);
 	gether_set_gadget(gether_opts->net, cdev->gadget);
-	mutex_unlock(&gether_opts->lock);
-
 	if (!gether_opts->bound) {
-		mutex_lock(&gether_opts->lock);
 		status = gether_register_netdev(gether_opts->net);
-		mutex_unlock(&gether_opts->lock);
-		if (status)
-			return status;
-		gether_opts->bound = true;
+		if (!status)
+			gether_opts->bound = true;
 	}
+	mutex_unlock(&gether_opts->lock);
+	if (status)
+		return status;
 
 	us = usb_gstrings_attach(cdev, geth_strings,
 				 ARRAY_SIZE(geth_string_defs));
diff --git a/drivers/usb/gadget/function/u_ether.c b/drivers/usb/gadget/function/u_ether.c
index 1565d2239a34..ba3c989890ff 100644
--- a/drivers/usb/gadget/function/u_ether.c
+++ b/drivers/usb/gadget/function/u_ether.c
@@ -112,8 +112,10 @@ static void eth_get_drvinfo(struct net_device *net, struct ethtool_drvinfo *p)
 
 	strscpy(p->driver, "g_ether", sizeof(p->driver));
 	strscpy(p->version, UETH__VERSION, sizeof(p->version));
-	strscpy(p->fw_version, dev->gadget->name, sizeof(p->fw_version));
-	strscpy(p->bus_info, dev_name(&dev->gadget->dev), sizeof(p->bus_info));
+	if (dev->gadget) {
+		strscpy(p->fw_version, dev->gadget->name, sizeof(p->fw_version));
+		strscpy(p->bus_info, dev_name(&dev->gadget->dev), sizeof(p->bus_info));
+	}
 }
 
 /* REVISIT can also support:
-- 
2.35.3


From 74e92cd26456856e8f47d872c2f4e74d07b3b0f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ond=C5=99ej=20Jirman?= <megi@xff.cz>
Date: Fri, 21 Jan 2022 23:21:51 +0100
Subject: [PATCH 393/456] power: supply: ip5xxx: Allow to initialize the driver
 with a non-I2C regmap

Pinephone keyboard includes IP5209 charger chip, but it is not directly
exposed over I2C, due to HW issues with that solution. Access to IP5209
registers is provided by the keyboard MCU.

KB151 driver implements a regmap based access to the IP5209 registers.
This patch allows the KB151 driver to create power supplies implemented
by ip5xxx driver using a custom regmap that proxies access to the
charger registers.

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/power/supply/ip5xxx_power.c | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/drivers/power/supply/ip5xxx_power.c b/drivers/power/supply/ip5xxx_power.c
index 676d0d5cde82..82df0fb82017 100644
--- a/drivers/power/supply/ip5xxx_power.c
+++ b/drivers/power/supply/ip5xxx_power.c
@@ -480,19 +480,18 @@ static const struct regmap_config ip5xxx_regmap_config = {
 	.max_register		= IP5XXX_BATOCV_DAT1,
 };
 
-static int ip5xxx_power_probe(struct i2c_client *client)
+int ip5xxx_power_probe_with_regmap(struct device* dev, struct regmap *regmap)
 {
 	struct power_supply_config psy_cfg = {};
-	struct device *dev = &client->dev;
 	struct power_supply *psy;
 	struct ip5xxx *ip5xxx;
 	int ret;
 
 	ip5xxx = devm_kzalloc(dev, sizeof(*ip5xxx), GFP_KERNEL);
+	if (!ip5xxx)
+		return -ENOMEM;
 
-	ip5xxx->regmap = devm_regmap_init_i2c(client, &ip5xxx_regmap_config);
-	if (IS_ERR(ip5xxx->regmap))
-		return PTR_ERR(ip5xxx->regmap);
+	ip5xxx->regmap = regmap;
 
 	/*
 	 * Disable shutdown under light load (it turns off the keyboard).
@@ -545,6 +544,18 @@ static int ip5xxx_power_probe(struct i2c_client *client)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(ip5xxx_power_probe_with_regmap);
+
+static int ip5xxx_power_probe(struct i2c_client *client)
+{
+	struct regmap* regmap;
+
+	regmap = devm_regmap_init_i2c(client, &ip5xxx_regmap_config);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	return ip5xxx_power_probe_with_regmap(&client->dev, regmap);
+}
 
 static const struct of_device_id ip5xxx_power_of_match[] = {
 	{ .compatible = "injoinic,ip5108" },
-- 
2.34.1


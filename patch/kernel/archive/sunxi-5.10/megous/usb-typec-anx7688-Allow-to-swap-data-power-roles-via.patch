From 1fc31530527e99dfdc91828b967bb9d6c4fa269d Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megous@megous.com>
Date: Sun, 29 Nov 2020 06:04:54 +0100
Subject: [PATCH 249/351] usb: typec: anx7688: Allow to swap data/power roles
 via sysfs

This implements requests to swap the roles.

Signed-off-by: Ondrej Jirman <megous@megous.com>
---
 drivers/usb/typec/anx7688.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/typec/anx7688.c b/drivers/usb/typec/anx7688.c
index 149c2fe3e8e5..be41481b648b 100644
--- a/drivers/usb/typec/anx7688.c
+++ b/drivers/usb/typec/anx7688.c
@@ -990,19 +990,33 @@ static irqreturn_t anx7688_irq_status_handler(int irq, void *data)
 static int anx7688_dr_set(struct typec_port *port, enum typec_data_role role)
 {
         struct anx7688 *anx7688 = typec_get_drvdata(port);
+	int ret = 0;
 
         dev_info(anx7688->dev, "data role set %d\n", role);
 
-        return -ENOTSUPP;
+	if (anx7688->data_role != role) {
+		mutex_lock(&anx7688->lock);
+		ret = anx7688_send_ocm_message(anx7688, ANX7688_OCM_MSG_DSWAP_REQ, 0, 0);
+		mutex_unlock(&anx7688->lock);
+	}
+
+	return ret;
 }
 
 static int anx7688_pr_set(struct typec_port *port, enum typec_role role)
 {
         struct anx7688 *anx7688 = typec_get_drvdata(port);
+	int ret = 0;
 
         dev_info(anx7688->dev, "power role set %d\n", role);
 
-        return -ENOTSUPP;
+	if (anx7688->pwr_role != role) {
+		mutex_lock(&anx7688->lock);
+		ret = anx7688_send_ocm_message(anx7688, ANX7688_OCM_MSG_PSWAP_REQ, 0, 0);
+		mutex_unlock(&anx7688->lock);
+	}
+
+	return ret;
 }
 
 /*
-- 
2.34.0


From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: HackingGate <i@hackinggate.com>
Date: Wed, 8 Oct 2025 00:23:40 +0900
Subject: [PATCH] feat: add FIELD_PREP_HI16_WE macros for hardware register
 write-enable masks

---
 include/linux/bitfield.h | 47 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/include/linux/bitfield.h b/include/linux/bitfield.h
index 5355f8f806a9..8ee7723007d9 100644
--- a/include/linux/bitfield.h
+++ b/include/linux/bitfield.h
@@ -8,6 +8,7 @@
 #define _LINUX_BITFIELD_H
 
 #include <linux/build_bug.h>
+#include <linux/limits.h>
 #include <linux/typecheck.h>
 #include <asm/byteorder.h>
 
@@ -142,6 +143,52 @@
 		(((typeof(_mask))(_val) << __bf_shf(_mask)) & (_mask))	\
 	)
 
+/**
+ * FIELD_PREP_HI16_WE() - prepare a bitfield element with a write-enable mask
+ * @_mask: shifted mask defining the field's length and position
+ * @_val:  value to put in the field
+ *
+ * FIELD_PREP_HI16_WE() masks and shifts up the value, as well as bitwise ORs
+ * the result with the mask shifted up by 16.
+ *
+ * This is useful for a common design of hardware registers where the upper
+ * 16-bit half of a 32-bit register is used as a write-enable mask. In such a
+ * register, a bit in the lower half is only updated if the corresponding bit
+ * in the upper half is high.
+ */
+#define FIELD_PREP_HI16_WE(_mask, _val)			\
+ ({								\
+	 __BF_FIELD_CHECK(_mask, ((u16) 0U), _val,		\
+			  "FIELD_PREP_HI16_WE: ");		\
+	 (((typeof(_mask))(_val) << __bf_shf(_mask)) & (_mask)) |	\
+	 ((_mask) << 16);					\
+ })
+
+/**
+* FIELD_PREP_HI16_WE_CONST() - prepare a constant bitfield element with a
+*                              write-enable mask
+* @_mask: shifted mask defining the field's length and position
+* @_val:  value to put in the field
+*
+* FIELD_PREP_HI16_WE_CONST() masks and shifts up the value, as well as bitwise
+* ORs the result with the mask shifted up by 16.
+*
+* This is useful for a common design of hardware registers where the upper
+* 16-bit half of a 32-bit register is used as a write-enable mask. In such a
+* register, a bit in the lower half is only updated if the corresponding bit
+* in the upper half is high.
+*
+* Unlike FIELD_PREP_HI16_WE(), this is a constant expression and can therefore
+* be used in initializers. Error checking is less comfortable for this
+* version, and non-constant masks cannot be used.
+*/
+#define FIELD_PREP_HI16_WE_CONST(_mask, _val)			   \
+ (								   \
+	 FIELD_PREP_CONST(_mask, _val) |			   \
+	 (BUILD_BUG_ON_ZERO(const_true((u64) (_mask) > U16_MAX)) + \
+	  ((_mask) << 16))					   \
+ )
+
 /**
  * FIELD_GET() - extract a bitfield element
  * @_mask: shifted mask defining the field's length and position
-- 
2.47.3


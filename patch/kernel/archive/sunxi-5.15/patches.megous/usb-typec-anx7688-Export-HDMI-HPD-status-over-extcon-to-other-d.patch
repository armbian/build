From 217fe0ebd41ca8796c6254c9988357305198da27 Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megous@megous.com>
Date: Tue, 26 Oct 2021 01:28:48 +0200
Subject: [PATCH 372/478] usb: typec: anx7688: Export HDMI HPD status over
 extcon to other drivers

This change allows other drivers to receive HPD status based on
DP state value.

Signed-off-by: Ondrej Jirman <megous@megous.com>
---
 drivers/usb/typec/anx7688.c | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/typec/anx7688.c b/drivers/usb/typec/anx7688.c
index 8786b5ea44d3..2393fdc431e0 100644
--- a/drivers/usb/typec/anx7688.c
+++ b/drivers/usb/typec/anx7688.c
@@ -41,6 +41,7 @@
 
 #include <linux/debugfs.h>
 #include <linux/delay.h>
+#include <linux/extcon-provider.h>
 #include <linux/firmware.h>
 #include <linux/gpio/consumer.h>
 #include <linux/i2c.h>
@@ -221,6 +222,14 @@ struct anx7688 {
 	int last_cc_status;
 	int last_dp_state;
 	int last_bc_result;
+
+	/* for HDMI HPD */
+	struct extcon_dev *extcon;
+};
+
+static const unsigned int anx7688_extcon_cable[] = {
+	EXTCON_DISP_HDMI,
+	EXTCON_NONE,
 };
 
 static int anx7688_reg_read(struct anx7688 *anx7688, u8 reg_addr)
@@ -568,6 +577,9 @@ static void anx7688_disconnect(struct anx7688 *anx7688)
 
 	anx7688->current_update_deadline = 0;
 
+	if (anx7688->extcon)
+		extcon_set_state_sync(anx7688->extcon, EXTCON_DISP_HDMI, 0);
+
 	if (anx7688->vconn_on) {
 		regulator_disable(anx7688->supplies[ANX7688_VCONN_INDEX].consumer);
 		anx7688->vconn_on = false;
@@ -1041,7 +1053,11 @@ static int anx7688_update_status(struct anx7688 *anx7688)
 	dp_substate = anx7688_tcpc_reg_read(anx7688, 0x88);
 	if (dp_substate < 0)
 		return dp_substate;
-	
+
+	if (anx7688->extcon)
+		extcon_set_state_sync(anx7688->extcon,
+				      EXTCON_DISP_HDMI, dp_state >= 3);
+
 	dp_state = (dp_state << 8) | dp_substate;
 
 	if (anx7688->last_status == -1 || anx7688->last_status != status) {
@@ -1984,6 +2000,17 @@ static int anx7688_i2c_probe(struct i2c_client *client,
         if (ret)
                 return ret;
 
+	// Initialize extcon device
+	anx7688->extcon = devm_extcon_dev_allocate(dev, anx7688_extcon_cable);
+	if (IS_ERR(anx7688->extcon))
+		return -ENOMEM;
+
+	ret = devm_extcon_dev_register(dev, anx7688->extcon);
+	if (ret) {
+		dev_err(dev, "failed to register extcon device\n");
+		return ret;
+	}
+
         // Register the TCPC i2c interface as second interface (0x58)
         anx7688->client_tcpc = i2c_new_dummy_device(client->adapter, 0x2c);
         if (IS_ERR(anx7688->client_tcpc)) {
-- 
2.35.3


From 14f5c0dc48d8405ee2d0386dcab097519566890f Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megous@megous.com>
Date: Wed, 13 Oct 2021 19:20:44 +0200
Subject: [PATCH 289/467] pinctrl: sunxi: Fix misleading lockdep deadlock
 warning

============================================
WARNING: possible recursive locking detected
5.15.0-rc4-00828-g8c78cd1f12fe-dirty #1 Tainted: G         C
--------------------------------------------
ueventd/180 is trying to acquire lock:
ffffff8006a108c8 (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0x5c/0xb4

but task is already holding lock:
ffffff800a3aa0c8 (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0x5c/0xb4

other info that might help us debug this:
 Possible unsafe locking scenario:

       CPU0
       ----
  lock(&irq_desc_lock_class);
  lock(&irq_desc_lock_class);

 *** DEADLOCK ***

 May be due to missing lock nesting notation

2 locks held by ueventd/180:
 #0: ffffff800e60a180 (&dev->mutex){....}-{3:3}, at: __driver_attach+0xc4/0x1f4
 #1: ffffff800a3aa0c8 (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0x5c/0xb4

stack backtrace:
CPU: 3 PID: 180 Comm: ueventd Tainted: G         C        5.15.0-rc4-00828-g8c78cd1f12fe-dirty #1
Hardware name: Pine64 PinePhone (1.2) (DT)
Call trace:
 dump_backtrace+0x0/0x29c
 show_stack+0x14/0x20
 dump_stack_lvl+0x98/0xd0
 dump_stack+0x18/0x30
 validate_chain+0x640/0x650
 __lock_acquire+0x714/0xbd0
 lock_acquire.part.0+0x188/0x354
 lock_acquire+0x6c/0x8c
 _raw_spin_lock_irqsave+0x90/0x13c
 __irq_get_desc_lock+0x5c/0xb4
 irq_set_irq_wake+0x84/0x270
 sunxi_pinctrl_irq_set_wake+0x58/0x70
 irq_set_irq_wake+0x164/0x270
 rtw_drv_init+0x2ec/0x390 [8723cs]
 sdio_bus_probe+0x138/0x230
 really_probe.part.0+0xf4/0x48c
 __driver_probe_device+0x120/0x1d4
 driver_probe_device+0x60/0x16c
 __driver_attach+0xd0/0x1f4
 bus_for_each_dev+0xe0/0x14c
 driver_attach+0x30/0x40
 bus_add_driver+0x19c/0x2c0
 driver_register+0xe8/0x200
 sdio_register_driver+0x48/0x5c
 rtw_drv_entry+0x48/0x90 [8723cs]
 do_one_initcall+0x9c/0x1fc
 do_init_module+0xe0/0x374
 load_module+0xf24/0x10d4
 __do_sys_finit_module+0xf8/0x15c
 __arm64_sys_finit_module+0x40/0x50
 invoke_syscall+0x5c/0x180
 el0_svc_common.constprop.0+0x7c/0x160
 do_el0_svc+0x30/0x40
 el0_svc+0x74/0x230
 el0t_64_sync_handler+0x9c/0x120
 el0t_64_sync+0x15c/0x160

Signed-off-by: Ondrej Jirman <megous@megous.com>
---
 drivers/pinctrl/sunxi/pinctrl-sunxi.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/drivers/pinctrl/sunxi/pinctrl-sunxi.c b/drivers/pinctrl/sunxi/pinctrl-sunxi.c
index 862c84efb..023ff4a96 100644
--- a/drivers/pinctrl/sunxi/pinctrl-sunxi.c
+++ b/drivers/pinctrl/sunxi/pinctrl-sunxi.c
@@ -36,6 +36,14 @@
 #include "../core.h"
 #include "pinctrl-sunxi.h"
 
+/*
+ * This lock class tells lockdep that irqchip core that this single
+ * pinctrl can be in a different category than its parents, so it won't
+ * report false recursion.
+ */
+static struct lock_class_key sunxi_pinctrl_lock_class;
+static struct lock_class_key sunxi_pinctrl_request_class;
+
 static struct irq_chip sunxi_pinctrl_edge_irq_chip;
 static struct irq_chip sunxi_pinctrl_level_irq_chip;
 
@@ -1554,6 +1562,7 @@ int sunxi_pinctrl_init_with_variant(struct platform_device *pdev,
 		irq_set_chip_and_handler(irqno, &sunxi_pinctrl_edge_irq_chip,
 					 handle_edge_irq);
 		irq_set_chip_data(irqno, pctl);
+		irq_set_lockdep_class(irqno, &sunxi_pinctrl_lock_class, &sunxi_pinctrl_request_class);
 	}
 
 	for (i = 0; i < pctl->desc->irq_banks; i++) {
-- 
2.34.0


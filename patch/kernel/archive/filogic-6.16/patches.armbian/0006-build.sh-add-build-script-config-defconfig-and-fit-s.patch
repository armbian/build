From aff3d69278291f4138605fd0c62ca7b085e6326e Mon Sep 17 00:00:00 2001
From: Frank Wunderlich <frank-w@public-files.de>
Date: Wed, 7 May 2025 19:23:05 +0200
Subject: [PATCH 06/84] build.sh: add build script,config,defconfig and fit
 source

---
 arch/arm64/configs/mt7988a_bpi-r4_defconfig | 1310 +++++++++++++++++++
 bpi-r4.its                                  |  112 ++
 build.conf                                  |   27 +
 build.sh                                    | 1273 ++++++++++++++++++
 4 files changed, 2722 insertions(+)
 create mode 100644 arch/arm64/configs/mt7988a_bpi-r4_defconfig
 create mode 100644 bpi-r4.its
 create mode 100644 build.conf
 create mode 100755 build.sh

diff --git a/arch/arm64/configs/mt7988a_bpi-r4_defconfig b/arch/arm64/configs/mt7988a_bpi-r4_defconfig
new file mode 100644
index 000000000000..69de56a20462
--- /dev/null
+++ b/arch/arm64/configs/mt7988a_bpi-r4_defconfig
@@ -0,0 +1,1310 @@
+CONFIG_LOCALVERSION="-bpi-r4"
+CONFIG_LOCALVERSION_AUTO=n
+
+CONFIG_32BIT=y
+CONFIG_64BIT_TIME=y
+CONFIG_ADVISE_SYSCALLS=y
+CONFIG_AEABI=y
+CONFIG_AF_UNIX_OOB=y
+CONFIG_AIO=y
+CONFIG_ALLOW_DEV_COREDUMP=y
+CONFIG_ANON_INODES=y
+CONFIG_ARCH_BINFMT_ELF_STATE=y
+CONFIG_ARCH_FLATMEM_ENABLE=y
+CONFIG_ARM64_SW_TTBR0_PAN=y
+CONFIG_ARM_CPU_TOPOLOGY=y
+CONFIG_ARM_DMA_MEM_BUFFERABLE=y
+CONFIG_ARM_GIC_MAX_NR=1
+CONFIG_ATAGS_PROC=y
+CONFIG_ATA_BMDMA=y
+CONFIG_ATA_SFF=y
+CONFIG_ATM_BR2684_IPFILTER=y
+CONFIG_ATM_CLIP_NO_ICMP=y
+CONFIG_BASE_FULL=y
+CONFIG_BASE_SMALL=n
+CONFIG_BCMA_POSSIBLE=y
+CONFIG_BINARY_PRINTF=y
+CONFIG_BINFMT_ELF=y
+CONFIG_BINFMT_SCRIPT=y
+CONFIG_BITREVERSE=y
+CONFIG_BLK_DEV=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_BLK_DEV_LOOP_MIN_COUNT=8
+CONFIG_BLOCK=y
+CONFIG_BOOKE_WDT_DEFAULT_TIMEOUT=3
+CONFIG_BOOT_RAW=y
+CONFIG_BPF=y
+CONFIG_BPF_JIT=y
+CONFIG_BPF_JIT_DEFAULT_ON=y
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_UNPRIV_DEFAULT_OFF=y
+CONFIG_BQL=y
+CONFIG_BRANCH_PROFILE_NONE=y
+CONFIG_BRIDGE=y
+CONFIG_BRIDGE_IGMP_SNOOPING=y
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_BROKEN_ON_SMP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HCIUART_BCSP=y
+CONFIG_BT_HCIUART_H4=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BUG=y
+CONFIG_BUILDTIME_EXTABLE_SORT=y
+CONFIG_BUILDTIME_TABLE_SORT=y
+CONFIG_BUILD_SALT=""
+CONFIG_CACHE_L2X0_PMU=y
+CONFIG_CARDBUS=y
+CONFIG_CC_CAN_LINK=y
+CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
+CONFIG_CIFS=m
+CONFIG_CIFS_ALLOW_INSECURE_LEGACY=y
+CONFIG_CIFS_POSIX=y
+CONFIG_CIFS_XATTR=y
+CONFIG_CIFS_FSCACHE=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_CMDLINE=""
+CONFIG_COMPACTION=y
+#CONFIG_CONSOLE_LOGLEVEL_DEFAULT=7
+CONFIG_CONSOLE_LOGLEVEL_QUIET=4
+CONFIG_CONSTRUCTORS=y
+CONFIG_CPU_LITTLE_ENDIAN=y
+CONFIG_CPU_SW_DOMAIN_PAN=y
+CONFIG_CRAMFS_BLOCKDEV=y
+CONFIG_CRC32=y
+CONFIG_CRC32_SARWATE=y
+CONFIG_CROSS_COMPILE=""
+CONFIG_CRYPTO=y
+CONFIG_CRYPTO_ACOMP2=y
+CONFIG_CRYPTO_AEAD=y
+CONFIG_CRYPTO_AEAD2=y
+CONFIG_CRYPTO_AES=y
+CONFIG_CRYPTO_AKCIPHER=y
+CONFIG_CRYPTO_AKCIPHER2=y
+CONFIG_CRYPTO_ALGAPI=y
+CONFIG_CRYPTO_ALGAPI2=y
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_CTR=y
+CONFIG_CRYPTO_GCM=y
+CONFIG_CRYPTO_GF128MUL=y
+CONFIG_CRYPTO_GHASH=y
+CONFIG_CRYPTO_HASH=y
+CONFIG_CRYPTO_HASH2=y
+CONFIG_CRYPTO_KPP=y
+CONFIG_CRYPTO_KPP2=y
+CONFIG_CRYPTO_LIB_AES=y
+CONFIG_CRYPTO_LIB_ARC4=y
+CONFIG_CRYPTO_LIB_POLY1305_RSIZE=9
+CONFIG_CRYPTO_MANAGER=y
+CONFIG_CRYPTO_MANAGER2=y
+CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
+CONFIG_CRYPTO_NULL=y
+CONFIG_CRYPTO_NULL2=y
+CONFIG_CRYPTO_PCRYPT=y
+CONFIG_CRYPTO_SKCIPHER=y
+CONFIG_CRYPTO_SKCIPHER2=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_FS_ALLOW_ALL=y
+CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
+CONFIG_DEBUG_KERNEL=y
+CONFIG_DEFAULT_CUBIC=y
+CONFIG_DEFAULT_DEADLINE=y
+CONFIG_DEFAULT_FQ_CODEL=y
+CONFIG_DEFAULT_HOSTNAME="(none)"
+CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=120
+CONFIG_DEFAULT_INIT=""
+CONFIG_DEFAULT_MMAP_MIN_ADDR=4096
+CONFIG_DEFAULT_NET_SCH="fq_codel"
+CONFIG_DEFAULT_SECURITY=""
+CONFIG_DEFAULT_SECURITY_DAC=y
+CONFIG_DEFAULT_TCP_CONG="cubic"
+CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
+CONFIG_DEVPORT=y
+CONFIG_DMA_COHERENT_POOL=y
+CONFIG_DMA_DECLARE_COHERENT=y
+CONFIG_DMA_NONCOHERENT_MMAP=y
+CONFIG_DOUBLEFAULT=y
+CONFIG_DQL=y
+CONFIG_DUMMY_CONSOLE_COLUMNS=80
+CONFIG_DUMMY_CONSOLE_ROWS=25
+CONFIG_DVB_MAX_ADAPTERS=16
+CONFIG_DYNAMIC_DEBUG_CORE=y
+CONFIG_EFI_PARTITION=y
+CONFIG_ELFCORE=y
+CONFIG_EMBEDDED=y
+CONFIG_ENABLE_WARN_DEPRECATED=y
+CONFIG_EPOLL=y
+CONFIG_ETHERNET=y
+CONFIG_ETHTOOL_NETLINK=y
+CONFIG_EVENTFD=y
+CONFIG_EXPERT=y
+CONFIG_EXPORTFS=y
+CONFIG_EXT2_FS_XATTR=y
+CONFIG_EXT4_USE_FOR_EXT2=y
+CONFIG_EXTRA_FIRMWARE=""
+CONFIG_EXTRA_TARGETS=""
+CONFIG_F2FS_FS_XATTR=y
+CONFIG_F2FS_STAT_FS=y
+CONFIG_FAT_DEFAULT_CODEPAGE=437
+CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
+CONFIG_FB_NOTIFY=y
+CONFIG_FIB_RULES=y
+CONFIG_FILE_LOCKING=y
+CONFIG_FLATMEM=y
+CONFIG_FLATMEM_MANUAL=y
+CONFIG_FLAT_NODE_MEM_MAP=y
+CONFIG_FORCE_MAX_ZONEORDER=11
+CONFIG_FORTIFY_SOURCE=y
+CONFIG_FRAME_WARN=1024
+CONFIG_FSNOTIFY=y
+CONFIG_FUTEX=y
+CONFIG_FUTEX_PI=y
+CONFIG_FW_LOADER=y
+CONFIG_FW_LOADER_USER_HELPER=y
+CONFIG_FW_LOADER_USER_HELPER_FALLBACK=y
+CONFIG_GACT_PROB=y
+CONFIG_GENERIC_CALIBRATE_DELAY=y
+CONFIG_GENERIC_HWEIGHT=y
+CONFIG_GENERIC_IRQ_IPI=y
+CONFIG_GENERIC_IRQ_PROBE=y
+CONFIG_GENERIC_NET_UTILS=y
+CONFIG_GENERIC_PTDUMP=y
+CONFIG_GENERIC_VDSO_TIME_NS=y
+CONFIG_GPIOLIB_FASTPATH_LIMIT=512
+CONFIG_GPIO_SYSFS=y
+CONFIG_HARDENED_USERCOPY=y
+CONFIG_HARDEN_BRANCH_HISTORY=y
+CONFIG_HARDEN_EL2_VECTORS=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_HPET_MMAP_DEFAULT=y
+CONFIG_HW_PERF_EVENTS=y
+CONFIG_HW_RANDOM_TPM=y
+CONFIG_HZ=100
+CONFIG_HZ_100=y
+CONFIG_IIO_CONSUMERS_PER_TRIGGER=2
+CONFIG_INET=y
+CONFIG_INIT_ENV_ARG_LIMIT=32
+CONFIG_INIT_STACK_NONE=y
+CONFIG_INOTIFY_USER=y
+CONFIG_INPUT_MISC=y
+CONFIG_IO_STRICT_DEVMEM=y
+CONFIG_IO_WQ=y
+CONFIG_IPV6_NDISC_NODETYPE=y
+CONFIG_IPW2100_MONITOR=y
+CONFIG_IPW2200_MONITOR=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_MULTIPATH=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_VS_MH_TAB_INDEX=10
+CONFIG_ISDN=y
+CONFIG_JFFS2_CMODE_PRIORITY=y
+CONFIG_JFFS2_COMPRESSION_OPTIONS=y
+CONFIG_JFFS2_FS=y
+CONFIG_JFFS2_FS_DEBUG=0
+CONFIG_JFFS2_FS_WRITEBUFFER=y
+CONFIG_JFFS2_FS_XATTR=y
+CONFIG_JFFS2_LZMA=y
+CONFIG_JFFS2_RTIME=y
+CONFIG_JFFS2_SUMMARY=y
+CONFIG_JOLIET=y
+CONFIG_KALLSYMS_BASE_RELATIVE=y
+CONFIG_KASAN_STACK=y
+CONFIG_KERNEL_MODE_NEON=y
+CONFIG_KERNEL_XZ=y
+CONFIG_KERNFS=y
+CONFIG_KUSER_HELPERS=y
+CONFIG_LBDAF=y
+CONFIG_LDISC_AUTOLOAD=y
+CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
+CONFIG_LEDS_BRIGHTNESS_HW_CHANGED=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_CLASS_MULTICOLOR=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_NETDEV=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LINEAR_RANGES=y
+CONFIG_LLC=y
+CONFIG_LOCKDEP_SUPPORT=y
+CONFIG_LOCKD_V4=y
+CONFIG_LOG_BUF_SHIFT=17
+CONFIG_LOG_CPU_MAX_BUF_SHIFT=12
+CONFIG_LSM="lockdown,yama,loadpin,safesetid,integrity"
+CONFIG_LSM_MMAP_MIN_ADDR=65536
+CONFIG_LTO_NONE=y
+CONFIG_LZMA_COMPRESS=y
+CONFIG_LZMA_DECOMPRESS=y
+CONFIG_MAC80211_STA_HASH_MAX_SIZE=0
+CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x1
+CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE=""
+CONFIG_MAY_USE_DEVLINK=y
+CONFIG_MEMBARRIER=y
+#CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4
+CONFIG_MII=y
+CONFIG_MISC_FILESYSTEMS=y
+CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=y
+CONFIG_MMC_BLOCK_BOUNCE=y
+CONFIG_MMC_BLOCK_MINORS=8
+CONFIG_MMU=y
+CONFIG_MMU_GATHER_RCU_TABLE_FREE=y
+CONFIG_MMU_GATHER_TABLE_FREE=y
+CONFIG_MODPROBE_PATH="/sbin/modprobe"
+CONFIG_MODULES=y
+CONFIG_MODULE_COMPRESS_NONE=y
+CONFIG_MODULE_STRIPPED=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MSDOS_PARTITION=y
+CONFIG_MTD=y
+CONFIG_MTD_BLKDEVS=y
+CONFIG_MTD_BLOCK=y
+CONFIG_MTD_CFI=y
+CONFIG_MTD_CFI_AMDSTD=y
+CONFIG_MTD_CFI_I1=y
+CONFIG_MTD_CFI_I2=y
+CONFIG_MTD_CFI_INTELEXT=y
+CONFIG_MTD_CFI_NOSWAP=y
+CONFIG_MTD_CFI_UTIL=y
+CONFIG_MTD_COMPLEX_MAPPINGS=y
+CONFIG_MTD_GEN_PROBE=y
+CONFIG_MTD_MAP_BANK_WIDTH_1=y
+CONFIG_MTD_MAP_BANK_WIDTH_2=y
+CONFIG_MTD_MAP_BANK_WIDTH_4=y
+CONFIG_MTD_NAND_DENALI_SCRATCH_REG_ADDR=0xff108018
+CONFIG_MTD_NAND_IDS=y
+CONFIG_MTD_OF_PARTS=y
+CONFIG_MTD_PHYSMAP_OF=y
+CONFIG_MTD_REDBOOT_DIRECTORY_BLOCK=-1
+CONFIG_MTD_ROOTFS_ROOT_DEV=y
+CONFIG_MTD_SPI_NOR_SWP_DISABLE_ON_VOLATILE=y
+CONFIG_MTD_SPI_NOR_USE_4K_SECTORS_LIMIT=4096
+CONFIG_MTD_SPLIT=y
+CONFIG_MTD_SPLIT_FIRMWARE_NAME="firmware"
+CONFIG_MTD_SPLIT_SQUASHFS_ROOT=y
+CONFIG_MTD_SPLIT_SUPPORT=y
+CONFIG_MULTIUSER=y
+CONFIG_NET=y
+CONFIG_NETDEVICES=y
+CONFIG_NETWORK_FILESYSTEMS=y
+CONFIG_NET_CADENCE=y
+CONFIG_NET_CLS=y
+CONFIG_NET_CLS_IND=y
+CONFIG_NET_CORE=y
+CONFIG_NET_EMATCH_STACK=32
+CONFIG_NET_IPGRE_BROADCAST=y
+CONFIG_NET_RX_BUSY_POLL=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_DEFAULT=y
+CONFIG_NET_SCH_FIFO=y
+CONFIG_NET_SCH_FQ_CODEL=y
+CONFIG_NET_SCH_CAKE=m
+CONFIG_NET_SOCK_MSG=y
+CONFIG_NET_VENDOR_3COM=y
+CONFIG_NET_VENDOR_8390=y
+CONFIG_NET_VENDOR_ADAPTEC=y
+CONFIG_NET_VENDOR_AGERE=y
+CONFIG_NET_VENDOR_ALACRITECH=y
+CONFIG_NET_VENDOR_ALTEON=y
+CONFIG_NET_VENDOR_AMAZON=y
+CONFIG_NET_VENDOR_AMD=y
+CONFIG_NET_VENDOR_AQUANTIA=y
+CONFIG_NET_VENDOR_ARC=y
+CONFIG_NET_VENDOR_ATHEROS=y
+CONFIG_NET_VENDOR_AURORA=y
+CONFIG_NET_VENDOR_BROADCOM=y
+CONFIG_NET_VENDOR_BROCADE=y
+CONFIG_NET_VENDOR_CADENCE=y
+CONFIG_NET_VENDOR_CAVIUM=y
+CONFIG_NET_VENDOR_CHELSIO=y
+CONFIG_NET_VENDOR_CIRRUS=y
+CONFIG_NET_VENDOR_CISCO=y
+CONFIG_NET_VENDOR_CORTINA=y
+CONFIG_NET_VENDOR_DEC=y
+CONFIG_NET_VENDOR_DLINK=y
+CONFIG_NET_VENDOR_EMULEX=y
+CONFIG_NET_VENDOR_EXAR=y
+CONFIG_NET_VENDOR_EZCHIP=y
+CONFIG_NET_VENDOR_FARADAY=y
+CONFIG_NET_VENDOR_FREESCALE=y
+CONFIG_NET_VENDOR_FUJITSU=y
+CONFIG_NET_VENDOR_GOOGLE=y
+CONFIG_NET_VENDOR_HISILICON=y
+CONFIG_NET_VENDOR_HP=y
+CONFIG_NET_VENDOR_HUAWEI=y
+CONFIG_NET_VENDOR_I825XX=y
+CONFIG_NET_VENDOR_IBM=y
+CONFIG_NET_VENDOR_INTEL=y
+CONFIG_NET_VENDOR_MARVELL=y
+CONFIG_NET_VENDOR_MELLANOX=y
+CONFIG_NET_VENDOR_MICREL=y
+CONFIG_NET_VENDOR_MICROCHIP=y
+CONFIG_NET_VENDOR_MICROSEMI=y
+CONFIG_NET_VENDOR_MYRI=y
+CONFIG_NET_VENDOR_NATSEMI=y
+CONFIG_NET_VENDOR_NETERION=y
+CONFIG_NET_VENDOR_NETRONOME=y
+CONFIG_NET_VENDOR_NI=y
+CONFIG_NET_VENDOR_NVIDIA=y
+CONFIG_NET_VENDOR_OKI=y
+CONFIG_NET_VENDOR_PACKET_ENGINES=y
+CONFIG_NET_VENDOR_PENSANDO=y
+CONFIG_NET_VENDOR_QLOGIC=y
+CONFIG_NET_VENDOR_QUALCOMM=y
+CONFIG_NET_VENDOR_RDC=y
+CONFIG_NET_VENDOR_REALTEK=y
+CONFIG_NET_VENDOR_RENESAS=y
+CONFIG_NET_VENDOR_ROCKER=y
+CONFIG_NET_VENDOR_SAMSUNG=y
+CONFIG_NET_VENDOR_SEEQ=y
+CONFIG_NET_VENDOR_SILAN=y
+CONFIG_NET_VENDOR_SIS=y
+CONFIG_NET_VENDOR_SMSC=y
+CONFIG_NET_VENDOR_SOCIONEXT=y
+CONFIG_NET_VENDOR_SOLARFLARE=y
+CONFIG_NET_VENDOR_STMICRO=y
+CONFIG_NET_VENDOR_SUN=y
+CONFIG_NET_VENDOR_SYNOPSYS=y
+CONFIG_NET_VENDOR_TEHUTI=y
+CONFIG_NET_VENDOR_TI=y
+CONFIG_NET_VENDOR_TOSHIBA=y
+CONFIG_NET_VENDOR_VIA=y
+CONFIG_NET_VENDOR_WIZNET=y
+CONFIG_NET_VENDOR_XILINX=y
+CONFIG_NET_VENDOR_XIRCOM=y
+CONFIG_NEW_LEDS=y
+CONFIG_NFSD_V3=y
+CONFIG_NFS_COMMON=y
+CONFIG_NFS_V3=y
+CONFIG_NF_CONNTRACK_PROCFS=y
+CONFIG_NF_NAT_MASQUERADE_IPV4=y
+CONFIG_NF_NAT_MASQUERADE_IPV6=y
+CONFIG_NF_TABLES_ARP=y
+CONFIG_NF_TABLES_BRIDGE=y
+CONFIG_NF_TABLES_INET=y
+CONFIG_NF_TABLES_IPV4=y
+CONFIG_NF_TABLES_IPV6=y
+CONFIG_NF_TABLES_NETDEV=y
+CONFIG_NLATTR=y
+CONFIG_NLS_DEFAULT="iso8859-1"
+CONFIG_NMI_LOG_BUF_SHIFT=13
+CONFIG_OF_RESERVED_MEM=y
+CONFIG_OPTIMIZE_INLINING=y
+CONFIG_OVERLAY_FS=y
+CONFIG_OVERLAY_FS_REDIRECT_ALWAYS_FOLLOW=y
+CONFIG_OVERLAY_FS_XINO_AUTO=y
+CONFIG_PACKET=y
+CONFIG_PAGE_SIZE_4KB=y
+CONFIG_PANIC_ON_OOPS=y
+CONFIG_PANIC_ON_OOPS_VALUE=1
+CONFIG_PANIC_TIMEOUT=10
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_PCIE_BUS_DEFAULT=y
+CONFIG_PCI_QUIRKS=y
+CONFIG_PCI_SYSCALL=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_PINMUX=y
+CONFIG_POSIX_TIMERS=y
+CONFIG_PPC_4K_PAGES=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MULTILINK=y
+CONFIG_PREEMPT_NONE=y
+CONFIG_PREVENT_FIRMWARE_BUILD=y
+CONFIG_PRINTK=y
+CONFIG_PRINTK_NMI=y
+CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT=13
+CONFIG_PRINT_STACK_DEPTH=64
+CONFIG_PROC_FS=y
+CONFIG_PROC_SYSCTL=y
+CONFIG_PSTORE_DEFAULT_KMSG_BYTES=10240
+CONFIG_PWRSEQ_EMMC=y
+CONFIG_PWRSEQ_SIMPLE=y
+CONFIG_RCU_CPU_STALL_TIMEOUT=60
+CONFIG_RCU_KTHREAD_PRIO=0
+CONFIG_RCU_NEED_SEGCBLIST=y
+CONFIG_RCU_STALL_COMMON=y
+CONFIG_RCU_TORTURE_TEST_SLOW_INIT_DELAY=3
+CONFIG_REISERFS_FS_XATTR=y
+CONFIG_RFKILL=y
+CONFIG_RTC_DRV_CMOS=y
+CONFIG_RTC_HCTOSYS=y
+CONFIG_RTC_HCTOSYS_DEVICE="rtc0"
+CONFIG_RTC_INTF_DEV=y
+CONFIG_RTC_INTF_PROC=y
+CONFIG_RTC_INTF_SYSFS=y
+CONFIG_RTC_LIB=y
+CONFIG_RTC_SYSTOHC=y
+CONFIG_RTC_SYSTOHC_DEVICE="rtc0"
+CONFIG_RT_MUTEXES=y
+CONFIG_RUNTIME_TESTING_MENU=y
+CONFIG_RWSEM_GENERIC_SPINLOCK=y
+CONFIG_RXKAD=y
+CONFIG_SATA_MOBILE_LPM_POLICY=0
+CONFIG_SBITMAP=y
+CONFIG_SCHED_HRTICK=y
+CONFIG_SCHED_OMIT_FRAME_POINTER=y
+CONFIG_SCSI_DMA=y
+CONFIG_SCSI_LOWLEVEL=y
+CONFIG_SCSI_MOD=y
+CONFIG_SCSI_PROC_FS=y
+CONFIG_SECTION_MISMATCH_WARN_ONLY=y
+CONFIG_SECURITY_DMESG_RESTRICT=y
+CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0
+CONFIG_SELECT_MEMORY_MODEL=y
+CONFIG_SERIAL_8250=y
+CONFIG_SERIAL_8250_16550A_VARIANTS=y
+CONFIG_SERIAL_8250_CONSOLE=y
+CONFIG_SERIAL_8250_DMA=y
+CONFIG_SERIAL_8250_NR_UARTS=3
+CONFIG_SERIAL_8250_RUNTIME_UARTS=3
+CONFIG_SERIAL_CORE=y
+CONFIG_SERIAL_CORE_CONSOLE=y
+CONFIG_SERIAL_EARLYCON=y
+CONFIG_SHMEM=y
+CONFIG_SIGNALFD=y
+CONFIG_SLABINFO=y
+CONFIG_SLAB_MERGE_DEFAULT=y
+CONFIG_SLUB=y
+CONFIG_SLUB_CPU_PARTIAL=y
+CONFIG_SND_DRIVERS=y
+CONFIG_SND_HDA_POWER_SAVE_DEFAULT=0
+CONFIG_SND_HDA_PREALLOC_SIZE=64
+CONFIG_SND_MAX_CARDS=16
+CONFIG_SND_OSSEMUL=y
+CONFIG_SND_PCI=y
+CONFIG_SND_PCM_OSS_PLUGINS=y
+CONFIG_SND_PROC_FS=y
+CONFIG_SND_SOC_INTEL_SST_TOPLEVEL=y
+CONFIG_SND_USB=y
+CONFIG_SND_VERBOSE_PROCFS=y
+CONFIG_SND_X86=y
+CONFIG_SPLIT_PTLOCK_CPUS=4
+CONFIG_SQUASHFS=y
+CONFIG_SQUASHFS_DECOMP_MULTI_PERCPU=y
+CONFIG_SQUASHFS_EMBEDDED=y
+CONFIG_SQUASHFS_FILE_DIRECT=y
+CONFIG_SQUASHFS_FRAGMENT_CACHE_SIZE=3
+CONFIG_SQUASHFS_XZ=y
+CONFIG_SSB_POSSIBLE=y
+CONFIG_STACKTRACE_SUPPORT=y
+CONFIG_STAGING=y
+CONFIG_STANDALONE=y
+CONFIG_STDBINUTILS=y
+CONFIG_STP=y
+CONFIG_STRICT_KERNEL_RWX=y
+CONFIG_STRICT_MODULE_RWX=y
+CONFIG_STRIP_ASM_SYMS=y
+CONFIG_SUNRPC_DISABLE_INSECURE_ENCTYPES=y
+CONFIG_SWAP=y
+CONFIG_SYMBOLIC_ERRNAME=y
+CONFIG_SYN_COOKIES=y
+CONFIG_SYSCTL=y
+CONFIG_SYSFS=y
+CONFIG_SYSTEM_TRUSTED_KEYS=""
+CONFIG_SYSVIPC=y
+CONFIG_SYSVIPC_SYSCTL=y
+CONFIG_TCP_CONG_ADVANCED=y
+CONFIG_TCP_CONG_CUBIC=y
+CONFIG_TEXTSEARCH=y
+CONFIG_THIN_ARCHIVES=y
+CONFIG_TICK_ONESHOT=y
+CONFIG_TIMERFD=y
+CONFIG_TINY_RCU=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_XATTR=y
+CONFIG_TRACE_IRQFLAGS_SUPPORT=y
+CONFIG_TRACING_SUPPORT=y
+CONFIG_TRAD_SIGNALS=y
+CONFIG_TTY=y
+CONFIG_UBIFS_FS_LZO=y
+CONFIG_UBIFS_FS_XATTR=y
+CONFIG_UBIFS_FS_ZLIB=y
+CONFIG_UBIFS_FS_ZSTD=y
+CONFIG_UBSAN_ALIGNMENT=y
+CONFIG_UEVENT_HELPER=y
+CONFIG_UEVENT_HELPER_PATH="/sbin/hotplug"
+CONFIG_UID16=y
+CONFIG_UNIX=y
+CONFIG_UNIX98_PTYS=y
+CONFIG_UNIX_SCM=y
+CONFIG_USBIP_VHCI_HC_PORTS=8
+CONFIG_USBIP_VHCI_NR_HCS=1
+CONFIG_USB_ALI_M5632=y
+CONFIG_USB_AN2720=y
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB_ARMLINUX=y
+CONFIG_USB_AUTOSUSPEND_DELAY=2
+CONFIG_USB_BELKIN=y
+CONFIG_USB_DEFAULT_PERSIST=y
+CONFIG_USB_EHCI_ROOT_HUB_TT=y
+CONFIG_USB_EHCI_TT_NEWSCHED=y
+CONFIG_USB_GADGET_STORAGE_NUM_BUFFERS=2
+CONFIG_USB_GADGET_VBUS_DRAW=2
+CONFIG_USB_OHCI_LITTLE_ENDIAN=y
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_KEYSPAN_MPR=y
+CONFIG_USB_SERIAL_KEYSPAN_USA18X=y
+CONFIG_USB_SERIAL_KEYSPAN_USA19=y
+CONFIG_USB_SERIAL_KEYSPAN_USA19QI=y
+CONFIG_USB_SERIAL_KEYSPAN_USA19QW=y
+CONFIG_USB_SERIAL_KEYSPAN_USA19W=y
+CONFIG_USB_SERIAL_KEYSPAN_USA28=y
+CONFIG_USB_SERIAL_KEYSPAN_USA28X=y
+CONFIG_USB_SERIAL_KEYSPAN_USA28XA=y
+CONFIG_USB_SERIAL_KEYSPAN_USA28XB=y
+CONFIG_USB_SERIAL_KEYSPAN_USA49W=y
+CONFIG_USB_SERIAL_KEYSPAN_USA49WLC=y
+CONFIG_USB_SERIAL_SAFE_PADDED=y
+CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV=y
+CONFIG_VDSO=y
+CONFIG_VHOST_MENU=y
+CONFIG_VIRTIO_MENU=y
+CONFIG_VIRT_TO_BUS=y
+CONFIG_VLAN_8021Q=y
+CONFIG_VMSPLIT_3G=y
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED=y
+CONFIG_WATCHDOG_OPEN_TIMEOUT=0
+CONFIG_WEXT_CORE=y
+CONFIG_WEXT_PRIV=y
+CONFIG_WEXT_PROC=y
+CONFIG_WEXT_SPY=y
+CONFIG_WILINK_PLATFORM_DATA=y
+CONFIG_WIRELESS=y
+CONFIG_WIRELESS_EXT=y
+CONFIG_WLAN=y
+CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
+CONFIG_X86_SYSFB=y
+CONFIG_XEN_SCRUB_PAGES_DEFAULT=y
+CONFIG_XFRM=y
+CONFIG_XZ_DEC=y
+CONFIG_ZONE_DMA=y
+CONFIG_64BIT=y
+CONFIG_AQUANTIA_PHY=y
+CONFIG_ARCH_DMA_ADDR_T_64BIT=y
+CONFIG_ARCH_KEEP_MEMBLOCK=y
+CONFIG_ARCH_MEDIATEK=y
+CONFIG_ARCH_MHP_MEMMAP_ON_MEMORY_ENABLE=y
+CONFIG_ARCH_MMAP_RND_BITS=18
+CONFIG_ARCH_MMAP_RND_BITS_MAX=24
+CONFIG_ARCH_MMAP_RND_BITS_MIN=18
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS=11
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN=11
+CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX=16
+CONFIG_ARCH_PROC_KCORE_TEXT=y
+CONFIG_ARCH_SPARSEMEM_ENABLE=y
+CONFIG_ARCH_STACKWALK=y
+CONFIG_ARCH_SUSPEND_POSSIBLE=y
+CONFIG_ARCH_WANTS_NO_INSTR=y
+CONFIG_ARM64=y
+CONFIG_ARM64_4K_PAGES=y
+CONFIG_ARM64_CRYPTO=y
+CONFIG_ARM64_ERRATUM_843419=y
+CONFIG_ARM64_ERRATUM_845719=y
+CONFIG_ARM64_LD_HAS_FIX_ERRATUM_843419=y
+CONFIG_ARM64_MODULE_PLTS=y
+CONFIG_ARM64_PAGE_SHIFT=12
+CONFIG_ARM64_PA_BITS=48
+CONFIG_ARM64_PA_BITS_48=y
+CONFIG_ARM64_TAGGED_ADDR_ABI=y
+CONFIG_ARM64_VA_BITS=39
+CONFIG_ARM64_VA_BITS_39=y
+CONFIG_ARM_AMBA=y
+CONFIG_ARM_ARCH_TIMER=y
+CONFIG_ARM_ARCH_TIMER_EVTSTREAM=y
+CONFIG_ARM_GIC=y
+CONFIG_ARM_GIC_V2M=y
+CONFIG_ARM_GIC_V3=y
+CONFIG_ARM_GIC_V3_ITS=y
+CONFIG_ARM_GIC_V3_ITS_PCI=y
+CONFIG_ARM_MEDIATEK_CPUFREQ=y
+CONFIG_ARM_MEDIATEK_CPUFREQ_HW=y
+CONFIG_PM_DEVFREQ=y
+CONFIG_ARM_MEDIATEK_CCI_DEVFREQ=y
+CONFIG_ARM_PMU=y
+CONFIG_ARM_PSCI_FW=y
+CONFIG_ATA=y
+CONFIG_AUDIT_ARCH_COMPAT_GENERIC=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_BLK_MQ_PCI=y
+CONFIG_BLK_PM=y
+CONFIG_BLOCK_COMPAT=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_CC_HAVE_STACKPROTECTOR_SYSREG=y
+CONFIG_CLKSRC_MMIO=y
+CONFIG_CLONE_BACKWARDS=y
+CONFIG_COMMON_CLK=y
+CONFIG_COMMON_CLK_MEDIATEK=y
+CONFIG_COMMON_CLK_MT2712=y
+CONFIG_COMMON_CLK_MT7622=y
+CONFIG_COMMON_CLK_MT7622_AUDSYS=y
+CONFIG_COMMON_CLK_MT7622_ETHSYS=y
+CONFIG_COMMON_CLK_MT7622_HIFSYS=y
+CONFIG_COMMON_CLK_MT7988=y
+CONFIG_COMMON_CLK_MT8183=y
+CONFIG_COMMON_CLK_MT8516=y
+CONFIG_COMPAT=y
+CONFIG_COMPAT_32BIT_TIME=y
+CONFIG_COMPAT_BINFMT_ELF=y
+CONFIG_COMPAT_NETLINK_MESSAGES=y
+CONFIG_COMPAT_OLD_SIGACTION=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_CONSOLE_LOGLEVEL_DEFAULT=15
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ATTR_SET=y
+CONFIG_CPU_FREQ_GOV_COMMON=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_STAT=y
+CONFIG_CPU_RMAP=y
+CONFIG_CPU_THERMAL=y
+CONFIG_CRC16=y
+CONFIG_CRYPTO_AES_ARM64=y
+CONFIG_CRYPTO_AES_ARM64_CE=y
+CONFIG_CRYPTO_AES_ARM64_CE_BLK=y
+CONFIG_CRYPTO_AES_ARM64_CE_CCM=y
+CONFIG_CRYPTO_CMAC=y
+CONFIG_CRYPTO_CRC32=y
+CONFIG_CRYPTO_CRC32C=y
+CONFIG_CRYPTO_CRYPTD=y
+CONFIG_CRYPTO_DEFLATE=y
+CONFIG_CRYPTO_DRBG=y
+CONFIG_CRYPTO_DRBG_HMAC=y
+CONFIG_CRYPTO_DRBG_MENU=y
+CONFIG_CRYPTO_ECB=y
+CONFIG_CRYPTO_ECC=y
+CONFIG_CRYPTO_ECDH=y
+CONFIG_CRYPTO_GHASH_ARM64_CE=y
+CONFIG_CRYPTO_HASH_INFO=y
+CONFIG_CRYPTO_HMAC=y
+CONFIG_CRYPTO_JITTERENTROPY=y
+CONFIG_CRYPTO_LIB_SHA256=y
+CONFIG_CRYPTO_LZO=y
+CONFIG_CRYPTO_RNG=y
+CONFIG_CRYPTO_RNG2=y
+CONFIG_CRYPTO_RNG_DEFAULT=y
+CONFIG_CRYPTO_SHA256=y
+CONFIG_CRYPTO_SHA256_ARM64=y
+CONFIG_CRYPTO_SHA2_ARM64_CE=y
+CONFIG_CRYPTO_SHA512=y
+CONFIG_CRYPTO_SIMD=y
+CONFIG_CRYPTO_ZSTD=y
+CONFIG_DCACHE_WORD_ACCESS=y
+CONFIG_DEBUG_MISC=y
+CONFIG_DIMLIB=y
+CONFIG_DMADEVICES=y
+CONFIG_DMATEST=y
+CONFIG_DMA_DIRECT_REMAP=y
+CONFIG_DMA_ENGINE=y
+CONFIG_DMA_ENGINE_RAID=y
+CONFIG_DMA_OF=y
+CONFIG_DMA_REMAP=y
+CONFIG_DMA_VIRTUAL_CHANNELS=y
+CONFIG_DTC=y
+CONFIG_DYNAMIC_DEBUG=y
+CONFIG_EDAC_SUPPORT=y
+CONFIG_EINT_MTK=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_F2FS_FS=y
+CONFIG_FIT_PARTITION=y
+CONFIG_FIXED_PHY=y
+CONFIG_FIX_EARLYCON_MEM=y
+CONFIG_FRAME_POINTER=y
+CONFIG_FS_IOMAP=y
+CONFIG_FS_MBCACHE=y
+CONFIG_FWNODE_MDIO=y
+CONFIG_FW_LOADER_PAGED_BUF=y
+CONFIG_GENERIC_ALLOCATOR=y
+CONFIG_GENERIC_ARCH_TOPOLOGY=y
+CONFIG_GENERIC_BUG=y
+CONFIG_GENERIC_BUG_RELATIVE_POINTERS=y
+CONFIG_GENERIC_CLOCKEVENTS=y
+CONFIG_GENERIC_CLOCKEVENTS_BROADCAST=y
+CONFIG_GENERIC_CPU_AUTOPROBE=y
+CONFIG_GENERIC_CPU_VULNERABILITIES=y
+CONFIG_GENERIC_CSUM=y
+CONFIG_GENERIC_EARLY_IOREMAP=y
+CONFIG_GENERIC_FIND_FIRST_BIT=y
+CONFIG_GENERIC_GETTIMEOFDAY=y
+CONFIG_GENERIC_IDLE_POLL_SETUP=y
+CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK=y
+CONFIG_GENERIC_IRQ_SHOW=y
+CONFIG_GENERIC_IRQ_SHOW_LEVEL=y
+CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED=y
+CONFIG_GENERIC_MSI_IRQ=y
+CONFIG_GENERIC_MSI_IRQ_DOMAIN=y
+CONFIG_GENERIC_PCI_IOMAP=y
+CONFIG_GENERIC_PHY=y
+CONFIG_GENERIC_PINCONF=y
+CONFIG_GENERIC_PINCTRL_GROUPS=y
+CONFIG_GENERIC_PINMUX_FUNCTIONS=y
+CONFIG_GENERIC_SCHED_CLOCK=y
+CONFIG_GENERIC_SMP_IDLE_THREAD=y
+CONFIG_GENERIC_STRNCPY_FROM_USER=y
+CONFIG_GENERIC_STRNLEN_USER=y
+CONFIG_GENERIC_TIME_VSYSCALL=y
+CONFIG_GLOB=y
+CONFIG_GPIOLIB=y
+CONFIG_GPIO_CDEV=y
+CONFIG_GRO_CELLS=y
+CONFIG_HANDLE_DOMAIN_IRQ=y
+CONFIG_HARDIRQS_SW_RESEND=y
+CONFIG_HAS_DMA=y
+CONFIG_HAS_IOMEM=y
+CONFIG_HAS_IOPORT_MAP=y
+CONFIG_HW_RANDOM=y
+CONFIG_HW_RANDOM_MTK=y
+CONFIG_I2C=y
+CONFIG_I2C_BOARDINFO=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MT65XX=y
+CONFIG_ICPLUS_PHY=y
+CONFIG_IIO=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_ILLEGAL_POINTER_VALUE=0xdead000000000000
+CONFIG_INITRAMFS_SOURCE=""
+CONFIG_IO_URING=y
+CONFIG_IRQCHIP=y
+CONFIG_IRQ_DOMAIN=y
+CONFIG_IRQ_DOMAIN_HIERARCHY=y
+CONFIG_IRQ_FORCED_THREADING=y
+CONFIG_IRQ_TIME_ACCOUNTING=y
+CONFIG_IRQ_WORK=y
+CONFIG_JBD2=y
+CONFIG_JUMP_LABEL=y
+CONFIG_LIBFDT=y
+CONFIG_LOCK_DEBUGGING_SUPPORT=y
+CONFIG_LOCK_SPIN_ON_OWNER=y
+CONFIG_LZO_COMPRESS=y
+CONFIG_LZO_DECOMPRESS=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_MAXLINEAR_GPHY=y
+CONFIG_MDIO_BUS=y
+CONFIG_MDIO_DEVICE=y
+CONFIG_MDIO_DEVRES=y
+CONFIG_MEDIATEK_GE_PHY=y
+#CONFIG_MEDIATEK_MT6577_AUXADC=y
+CONFIG_MEDIATEK_WATCHDOG=y
+CONFIG_MEMFD_CREATE=y
+CONFIG_MESSAGE_LOGLEVEL_DEFAULT=7
+CONFIG_MFD_SYSCON=y
+CONFIG_MIGRATION=y
+CONFIG_MMC=y
+CONFIG_MMC_BLOCK=y
+CONFIG_MMC_CQHCI=y
+CONFIG_MMC_MTK=y
+CONFIG_MODULES_TREE_LOOKUP=y
+CONFIG_MODULES_USE_ELF_RELA=y
+CONFIG_MTD_NAND_CORE=y
+CONFIG_MTD_NAND_ECC=y
+CONFIG_MTD_NAND_ECC_MEDIATEK=y
+CONFIG_MTD_NAND_ECC_SW_HAMMING=y
+CONFIG_MTD_NAND_MTK=y
+CONFIG_MTD_NAND_MTK_BMT=y
+CONFIG_MTD_PARSER_TRX=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_MTD_SPI_NAND=y
+CONFIG_MTD_SPI_NOR=y
+CONFIG_MTD_SPLIT_FIRMWARE=y
+CONFIG_MTD_SPLIT_FIT_FW=y
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_BEB_LIMIT=20
+CONFIG_MTD_UBI_BLOCK=y
+CONFIG_MTD_UBI_WL_THRESHOLD=4096
+CONFIG_MTK_EFUSE=y
+CONFIG_MTK_HSDMA=y
+CONFIG_MTK_INFRACFG=y
+CONFIG_MTK_PMIC_WRAP=y
+CONFIG_MTK_SCPSYS=y
+CONFIG_MTK_SCPSYS_PM_DOMAINS=y
+CONFIG_MTK_THERMAL=y
+CONFIG_MTK_SOC_THERMAL=y
+CONFIG_MTK_TIMER=y
+CONFIG_MUTEX_SPIN_ON_OWNER=y
+CONFIG_NEED_DMA_MAP_STATE=y
+CONFIG_NEED_SG_DMA_LENGTH=y
+CONFIG_NET_DEVLINK=y
+CONFIG_NET_DSA=y
+CONFIG_NET_DSA_MT7530=y
+CONFIG_NET_DSA_TAG_MTK=y
+CONFIG_LED_TRIGGER_PHY=y
+CONFIG_NET_FLOW_LIMIT=y
+CONFIG_NET_MEDIATEK_SOC=y
+CONFIG_NET_MEDIATEK_SOC_WED=y
+CONFIG_NET_SELFTESTS=y
+CONFIG_NET_SWITCHDEV=y
+CONFIG_NET_VENDOR_MEDIATEK=y
+CONFIG_NLS=y
+CONFIG_NO_HZ_COMMON=y
+CONFIG_NO_HZ_IDLE=y
+CONFIG_NR_CPUS=4
+CONFIG_NVMEM=y
+CONFIG_NVMEM_SYSFS=y
+CONFIG_OF=y
+CONFIG_OF_ADDRESS=y
+CONFIG_OF_DYNAMIC=y
+CONFIG_OF_EARLY_FLATTREE=y
+CONFIG_OF_FLATTREE=y
+CONFIG_OF_GPIO=y
+CONFIG_OF_IRQ=y
+CONFIG_OF_KOBJ=y
+CONFIG_OF_MDIO=y
+CONFIG_OF_OVERLAY=y
+CONFIG_OF_RESOLVE=y
+CONFIG_OLD_SIGSUSPEND3=y
+CONFIG_PADATA=y
+CONFIG_PARTITION_PERCPU=y
+CONFIG_PCI=y
+CONFIG_PCIEAER=y
+CONFIG_PCIEASPM=y
+CONFIG_PCIEASPM_PERFORMANCE=y
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCIE_MEDIATEK=y
+CONFIG_PCIE_MEDIATEK_GEN3=y
+CONFIG_PCIE_PME=y
+CONFIG_PCI_DEBUG=y
+CONFIG_PCI_DOMAINS=y
+CONFIG_PCI_DOMAINS_GENERIC=y
+CONFIG_PCI_MSI=y
+CONFIG_PCI_MSI_IRQ_DOMAIN=y
+CONFIG_PERF_EVENTS=y
+CONFIG_PGTABLE_LEVELS=3
+CONFIG_PHYLIB=y
+CONFIG_PHYLINK=y
+CONFIG_PHYS_ADDR_T_64BIT=y
+CONFIG_PHY_MTK_TPHY=y
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_MT7622=y
+CONFIG_PINCTRL_MT7988=y
+CONFIG_PINCTRL_MT8516=y
+CONFIG_PINCTRL_MTK=y
+CONFIG_PINCTRL_MTK_MOORE=y
+CONFIG_PINCTRL_MTK_V2=y
+CONFIG_PM=y
+CONFIG_PM_CLK=y
+CONFIG_PM_GENERIC_DOMAINS=y
+CONFIG_PM_GENERIC_DOMAINS_OF=y
+CONFIG_PM_OPP=y
+CONFIG_POWER_RESET=y
+CONFIG_POWER_RESET_SYSCON=y
+CONFIG_POWER_SUPPLY=y
+CONFIG_PRINTK_TIME=y
+CONFIG_PSTORE=y
+CONFIG_PSTORE_COMPRESS=n
+#CONFIG_PSTORE_COMPRESS_DEFAULT="deflate"
+CONFIG_PSTORE_CONSOLE=y
+#CONFIG_PSTORE_DEFLATE_COMPRESS=y
+#CONFIG_PSTORE_DEFLATE_COMPRESS_DEFAULT=y
+CONFIG_PSTORE_PMSG=y
+CONFIG_PSTORE_RAM=y
+CONFIG_PTP_1588_CLOCK_OPTIONAL=y
+CONFIG_PWM=y
+CONFIG_PWM_MEDIATEK=y
+CONFIG_PWM_SYSFS=y
+CONFIG_QUEUED_RWLOCKS=y
+CONFIG_QUEUED_SPINLOCKS=y
+CONFIG_RAS=y
+CONFIG_RATIONAL=y
+CONFIG_REALTEK_PHY=y
+CONFIG_REED_SOLOMON=y
+CONFIG_REED_SOLOMON_DEC8=y
+CONFIG_REED_SOLOMON_ENC8=y
+CONFIG_REGMAP=y
+CONFIG_REGMAP_MMIO=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_MT6380=y
+CONFIG_RESET_CONTROLLER=y
+CONFIG_RFS_ACCEL=y
+CONFIG_RODATA_FULL_DEFAULT_ENABLED=y
+CONFIG_RPS=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_MT7622=y
+CONFIG_RTC_I2C_AND_SPI=y
+CONFIG_RTL8367S_GSW=y
+CONFIG_RWSEM_SPIN_ON_OWNER=y
+CONFIG_SCHED_MC=y
+CONFIG_SCSI=y
+CONFIG_SCSI_COMMON=y
+CONFIG_SERIAL_8250_FSL=y
+CONFIG_SERIAL_8250_MT6577=y
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_SERIAL_DEV_CTRL_TTYPORT=y
+CONFIG_SERIAL_MCTRL_GPIO=y
+CONFIG_SERIAL_OF_PLATFORM=y
+CONFIG_SGL_ALLOC=y
+CONFIG_SG_POOL=y
+CONFIG_SMP=y
+CONFIG_SOCK_RX_QUEUE_MAPPING=y
+CONFIG_SPARSEMEM=y
+CONFIG_SPARSEMEM_EXTREME=y
+CONFIG_SPARSEMEM_VMEMMAP=y
+CONFIG_SPARSEMEM_VMEMMAP_ENABLE=y
+CONFIG_SPARSE_IRQ=y
+CONFIG_SPI=y
+CONFIG_SPI_DYNAMIC=y
+CONFIG_SPI_MASTER=y
+CONFIG_SPI_MEM=y
+CONFIG_SPI_MT65XX=y
+CONFIG_SPI_MTK_NOR=y
+CONFIG_SPI_MTK_SNFI=y
+CONFIG_SRCU=y
+CONFIG_SWCONFIG=y
+CONFIG_SWIOTLB=y
+CONFIG_SWPHY=y
+CONFIG_SYSCTL_EXCEPTION_TRACE=y
+CONFIG_SYSVIPC_COMPAT=y
+CONFIG_THERMAL=y
+CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE=y
+CONFIG_THERMAL_EMERGENCY_POWEROFF_DELAY_MS=0
+CONFIG_THERMAL_EMULATION=y
+CONFIG_THERMAL_GOV_BANG_BANG=y
+CONFIG_THERMAL_GOV_FAIR_SHARE=y
+CONFIG_THERMAL_GOV_STEP_WISE=y
+CONFIG_THERMAL_GOV_USER_SPACE=y
+CONFIG_THERMAL_OF=y
+CONFIG_THERMAL_WRITABLE_TRIPS=y
+CONFIG_THREAD_INFO_IN_TASK=y
+CONFIG_TICK_CPU_ACCOUNTING=y
+CONFIG_TIMER_OF=y
+CONFIG_TIMER_PROBE=y
+CONFIG_TREE_RCU=y
+CONFIG_TREE_SRCU=y
+CONFIG_UBIFS_FS=y
+CONFIG_USB=y
+CONFIG_USB_COMMON=y
+CONFIG_USB_SUPPORT=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_MTK=y
+CONFIG_VMAP_STACK=y
+CONFIG_WATCHDOG_CORE=y
+CONFIG_WATCHDOG_PRETIMEOUT_DEFAULT_GOV_PANIC=y
+CONFIG_WATCHDOG_PRETIMEOUT_GOV=y
+CONFIG_WATCHDOG_PRETIMEOUT_GOV_PANIC=y
+CONFIG_WATCHDOG_PRETIMEOUT_GOV_SEL=m
+CONFIG_WATCHDOG_SYSFS=y
+CONFIG_XPS=y
+CONFIG_XXHASH=y
+CONFIG_ZLIB_DEFLATE=y
+CONFIG_ZLIB_INFLATE=y
+CONFIG_ZONE_DMA32=y
+CONFIG_ZSTD_COMPRESS=y
+CONFIG_ZSTD_DECOMPRESS=y
+
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_DEVTMPFS_SAFE=y
+
+CONFIG_REGULATOR_RT5190A=y
+CONFIG_RESET_TI_SYSCON=y
+CONFIG_REGMAP_I2C=y
+CONFIG_MTK_LVTS_THERMAL=y
+CONFIG_PHY_MTK_XSPHY=y
+CONFIG_NVMEM_MTK_EFUSE=y
+
+
+CONFIG_WLAN_VENDOR_MEDIATEK=y
+CONFIG_CFG80211=m
+CONFIG_CFG80211_WEXT=y
+CONFIG_MAC80211=y
+CONFIG_MAC80211_LEDS=y
+CONFIG_MT7996E=m
+
+CONFIG_VFAT_FS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_CODEPAGE_852=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_ISO8859_15=y
+
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_I2C_GPIO=y
+CONFIG_SFP=y
+CONFIG_BLK_DEV_NVME=y
+CONFIG_NVME_HWMON=y
+
+#CONFIG_USB_USBNET=m
+#CONFIG_USB_SERIAL=m
+#CONFIG_USB_SERIAL_OPTION=m
+#CONFIG_USB_SERIAL_QUALCOMM=m
+#CONFIG_USB_NET_CDC_MBIM=m
+#CONFIG_USB_NET_QMI_WWAN=m
+
+#CONFIG_NVMEM_MTK_EFUSE=y
+#CONFIG_SENSORS_PWM_FAN=y
+
+CONFIG_DUMMY=m
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+CONFIG_IPV6_TUNNEL=m
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETLINK_DIAG=y
+CONFIG_INET_UDP_DIAG=m
+CONFIG_NET_IPIP=m
+CONFIG_IP_MROUTE=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_IPV6=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=m
+CONFIG_NF_CONNTRACK_IPV4=m
+CONFIG_NF_CONNTRACK_IPV6=m
+CONFIG_NETFILTER_NETLINK=m
+CONFIG_NF_CT_NETLINK=m
+CONFIG_IP_NF_IPTABLES=m
+CONFIG_NF_LOG_IPV4=m
+CONFIG_NF_REJECT_IPV4=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_NF_LOG_IPV6=m
+CONFIG_NF_REJECT_IPV6=m
+CONFIG_IP_NF_NAT=m
+CONFIG_IP6_NF_NAT=m
+CONFIG_NF_NAT_MASQUERADE_IPV4=y
+CONFIG_NF_NAT_MASQUERADE_IPV6=y
+CONFIG_IP_NF_FILTER=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP_NF_TARGET_MASQUERADE=m
+CONFIG_IP6_NF_TARGET_MASQUERADE=m
+CONFIG_IP_NF_MANGLE=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_MATCH_RT=m
+CONFIG_NETFILTER_SYNPROXY=m
+CONFIG_IP_NF_TARGET_SYNPROXY=m
+CONFIG_IP6_NF_TARGET_SYNPROXY=m
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=m
+CONFIG_NETFILTER_XT_MATCH_LIMIT=m
+CONFIG_NETFILTER_XT_MATCH_STATE=m
+CONFIG_NETFILTER_XT_TARGET_LOG=m
+CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
+CONFIG_NETFILTER_XT_MATCH_MAC=m
+CONFIG_NETFILTER_XT_MATCH_RECENT=m
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=m
+CONFIG_NETFILTER_XT_MARK=m
+CONFIG_NETFILTER_XT_CONNMARK=m
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_IP_VS=m
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=m
+#CONFIG_NETFILTER_XT_TARGET_NFQUEUE=m
+CONFIG_NF_TABLES=m
+CONFIG_NF_TABLES_SET=m
+CONFIG_NF_TPROXY_IPV4=m
+CONFIG_NF_TPROXY_IPV6=m
+CONFIG_NFT_NUMGEN=m
+CONFIG_NFT_CT=m
+CONFIG_NFT_COUNTER=m
+CONFIG_NFT_CONNLIMIT=m
+CONFIG_NFT_LOG=m
+CONFIG_NFT_LIMIT=m
+CONFIG_NFT_MASQ=m
+CONFIG_NFT_NAT=m
+CONFIG_NFT_QUEUE=m
+CONFIG_NFT_REDIR=m
+CONFIG_NFT_TUNNEL=m
+CONFIG_NFT_OBJREF=m
+CONFIG_NFT_QUOTA=m
+CONFIG_NFT_REJECT=m
+CONFIG_NFT_COMPAT=m
+CONFIG_NFT_HASH=m
+CONFIG_NFT_XFRM=m
+CONFIG_NFT_SOCKET=m
+CONFIG_NFT_OSF=m
+CONFIG_NFT_TPROXY=m
+CONFIG_NFT_SYNPROXY=m
+CONFIG_NFTL=m
+CONFIG_NFTL_RW=y
+CONFIG_NFT_FIB_INET=m
+CONFIG_NFT_FIB_IPV4=m
+CONFIG_NFT_FIB_IPV6=m
+CONFIG_NF_FLOW_TABLE=m
+CONFIG_NF_FLOW_TABLE_INET=m
+CONFIG_NF_FLOW_TABLE_IPV4=m
+CONFIG_NF_FLOW_TABLE_IPV6=m
+CONFIG_NFT_FLOW_OFFLOAD=m
+CONFIG_NF_CONNTRACK_FTP=m
+CONFIG_NF_NAT_FTP=m
+CONFIG_PPP=m
+CONFIG_PPPOE=m
+CONFIG_PPP_DEFLATE=m
+CONFIG_PPP_MPPE=m
+CONFIG_VETH=m
+CONFIG_TUN=m
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_VLAN_8021Q_MVRP=y
+CONFIG_NET_L3_MASTER_DEV=y
+CONFIG_IPVLAN=m
+CONFIG_IFB=m
+CONFIG_MACVLAN=m
+CONFIG_NET_CLS_ACT=y
+# QoS and/or fair queueing
+CONFIG_NET_SCH_CBQ=m
+CONFIG_NET_SCH_HTB=m
+CONFIG_NET_SCH_CSZ=m
+CONFIG_NET_SCH_PRIO=m
+CONFIG_NET_SCH_RED=m
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_SCH_TEQL=m
+CONFIG_NET_SCH_TBF=m
+CONFIG_NET_SCH_GRED=m
+CONFIG_NET_SCH_DSMARK=m
+CONFIG_NET_SCH_INGRESS=m
+#CONFIG_NET_SCH_NETEM=m
+CONFIG_NET_QOS=y
+CONFIG_NET_ESTIMATOR=y
+CONFIG_NET_CLS_TCINDEX=m
+CONFIG_NET_CLS_ROUTE4=m
+CONFIG_NET_CLS_ROUTE=y
+CONFIG_NET_CLS_FW=m
+CONFIG_NET_CLS_U32=m
+CONFIG_NET_CLS_RSVP=m
+CONFIG_NET_CLS_RSVP6=m
+CONFIG_NET_CLS_POLICE=y
+
+CONFIG_NET_ACT_VLAN=m
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_NET_ACT_MIRRED=m
+CONFIG_NET_ACT_SAMPLE=y
+CONFIG_NET_ACT_IPT=m
+CONFIG_NET_ACT_NAT=m
+CONFIG_NET_ACT_PEDIT=m
+CONFIG_NET_ACT_SIMP=m
+CONFIG_NET_ACT_SKBEDIT=m
+CONFIG_NET_ACT_CSUM=m
+# CONFIG_NET_ACT_BPF is not set
+CONFIG_NET_ACT_CONNMARK=m
+CONFIG_NET_ACT_CTINFO=m
+CONFIG_NET_ACT_SKBMOD=m
+# CONFIG_NET_ACT_IFE is not set
+CONFIG_NET_ACT_TUNNEL_KEY=m
+CONFIG_NET_ACT_CT=m
+# CONFIG_NET_ACT_GATE is not set
+
+#NFS Client
+CONFIG_NFS_FS=y
+CONFIG_NFS_V2=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_SWAP=y
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_PNFS_FILE_LAYOUT=m
+CONFIG_PNFS_BLOCK=m
+CONFIG_PNFS_FLEXFILE_LAYOUT=m
+CONFIG_NFS_V4_1_IMPLEMENTATION_ID_DOMAIN="kernel.org"
+CONFIG_NFS_V4_1_MIGRATION=y
+CONFIG_NFS_USE_LEGACY_DNS=y
+CONFIG_ROOT_NFS=y
+
+#NFS Server
+CONFIG_NFSD=m
+CONFIG_NFSD_V2_ACL=y
+CONFIG_NFSD_V3_ACL=y
+CONFIG_NFSD_V4=y
+CONFIG_NFSD_PNFS=y
+CONFIG_NFSD_BLOCKLAYOUT=y
+CONFIG_NFSD_SCSILAYOUT=y
+CONFIG_NFSD_FLEXFILELAYOUT=y
+CONFIG_NFSD_FAULT_INJECTION=y
+CONFIG_NFS_ACL_SUPPORT=m
+
+#usb-tethering
+CONFIG_USB_USBNET=m
+CONFIG_USB_NET_CDCETHER=m
+CONFIG_USB_NET_CDC_EEM=m
+CONFIG_USB_NET_RNDIS_HOST=m
+
+#for lxc
+CONFIG_CGROUPS=y
+CONFIG_NAMESPACES=y
+CONFIG_USER_NS=y
+CONFIG_MEMCG=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_CPUSETS=y
+CONFIG_UNIX_DIAG=m
+CONFIG_PACKET_DIAG=m
+CONFIG_FUSE_FS=m
+
+#for docker
+CONFIG_CGROUP_FREEZER=y
+CONFIG_MEMCG_SWAP=y
+CONFIG_MEMCG_SWAP_ENABLED=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_RT_GROUP_SCHED=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_NET_CLASSID=y
+CONFIG_CGROUP_NET_PRIO=y
+CONFIG_CGROUP_BPF=y
+CONFIG_CFQ_GROUP_IOSCHED=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_POSIX_MQUEUE_SYSCTL=y
+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y
+CONFIG_SECCOMP_FILTER=y
+CONFIG_SECCOMP=y
+
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+
+CONFIG_PCS_MTK_USXGMII=y
+
+CONFIG_MT7915E=m
+CONFIG_MT798X_WMAC=y
+CONFIG_PHY_MTK_XFI_TPHY=y
+CONFIG_RTC_DRV_PCF8563=y
+CONFIG_EEPROM_AT24=y
+CONFIG_SENSORS_PWM_FAN=y
+
+#add some 4G/5G modem options
+CONFIG_USB_ACM=m
+CONFIG_USB_SERIAL=m
+CONFIG_USB_SERIAL_OPTION=m
+CONFIG_USB_SERIAL_QUALCOMM=m
+CONFIG_USB_NET_QMI_WWAN=m
+CONFIG_USB_CDNS_SUPPORT=m
+CONFIG_USB_CDNS3=m
+CONFIG_WWAN=m
+CONFIG_MHI_BUS=m
+CONFIG_MHI_NET=m
+CONFIG_MHI_WWAN_CTRL=m
+CONFIG_MHI_WWAN_MBIM=m
+CONFIG_MTK_T7XX=m
+
+CONFIG_MARVELL_PHY=m
+CONFIG_MARVELL_10G_PHY=m
+CONFIG_MEDIATEK_2P5GE_PHY=m
+#spi display
+#CONFIG_DRM=m
+#CONFIG_FB=m
+#CONFIG_FB_MODE_HELPERS=y
+#CONFIG_DRM_PANEL_MIPI_DBI=m
+#CONFIG_BACKLIGHT_PWM=m
diff --git a/bpi-r4.its b/bpi-r4.its
new file mode 100644
index 000000000000..4c10360895a7
--- /dev/null
+++ b/bpi-r4.its
@@ -0,0 +1,112 @@
+/dts-v1/;
+
+/ {
+	description = "U-Boot fitImage for bpi-r4 aarch64 kernel";
+	#address-cells = <1>;
+
+	images {
+		kernel-1 {
+			description = "Linux Kernel %version%";
+			data = /incbin/("./arch/arm64/boot/Image.gz");
+			type = "kernel";
+			arch = "arm64";
+			os = "linux";
+			compression = "gzip";
+			load = <0x44000000>;
+			entry = <0x44000000>;
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		fdt-base {
+			description = "Flattened Device Tree blob";
+			data = /incbin/("./arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4.dtb");
+			type = "flat_dt";
+			arch = "arm64";
+			load = <0x47000000>;
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		fdt-base-2g5 {
+			description = "Flattened Device Tree blob";
+			data = /incbin/("./arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4-2g5.dtb");
+			type = "flat_dt";
+			arch = "arm64";
+			load = <0x47000000>;
+			compression = "none";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		fdt-ov-sd {
+			description = "Flattened Device Tree blob";
+			data = /incbin/("./arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4-sd.dtbo");
+			type = "flat_dt";
+		};
+		fdt-ov-emmc {
+			description = "Flattened Device Tree blob";
+			data = /incbin/("./arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4-emmc.dtbo");
+			type = "flat_dt";
+		};
+/*		ramdisk-1 {
+			description = "ramdisk";
+			data = /incbin/("./rootfs_arm64.cpio.gz");
+			type = "ramdisk";
+			arch = "arm64";
+			os = "linux";
+			compression = "gzip";
+			hash-1 {
+				algo = "sha1";
+			};
+		};*/
+	};
+	configurations {
+		default = "conf-sd";
+		conf-base {
+			description = "Boot Linux kernel with base FDT blob";
+			kernel = "kernel-1";
+			fdt = "fdt-base";
+			//ramdisk = "ramdisk-1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		conf-base-2g5 {
+			description = "Boot Linux kernel with base FDT blob";
+			kernel = "kernel-1";
+			fdt = "fdt-base-2g5";
+			//ramdisk = "ramdisk-1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		conf-sd {
+			description = "Boot Linux kernel with SD FDT blob";
+			kernel = "kernel-1";
+			fdt = "fdt-base", "fdt-ov-sd";
+			//ramdisk = "ramdisk-1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		conf-emmc {
+			description = "Boot Linux kernel with EMMC FDT blob";
+			kernel = "kernel-1";
+			fdt = "fdt-base", "fdt-ov-emmc";
+			//ramdisk = "ramdisk-1";
+			hash-1 {
+				algo = "sha1";
+			};
+		};
+		ov-sd {
+			description = "SD FDT overlay blob";
+			fdt = "fdt-ov-sd";
+		};
+		ov-emmc {
+			description = "EMMC FDT overlay blob";
+			fdt = "fdt-ov-emmc";
+		};
+	};
+};
diff --git a/build.conf b/build.conf
new file mode 100644
index 000000000000..60d7ff7a4859
--- /dev/null
+++ b/build.conf
@@ -0,0 +1,27 @@
+uploaduser=$USER
+uploadserver=r2
+uploaddir=/var/lib/tftp
+#uploaduser=root
+#uploadserver=192.168.0.11
+#uploaddir=/boot/bananapi/bpi-r2/linux
+
+builddir=../build
+ramdisksize=8G
+#numproc=8
+
+board=bpi-r2
+#board=bpi-r64
+#board=bpi-r2pro
+#board=bpi-r3
+board=bpi-r4
+
+#r64 with rtl8367
+#boardversion=v0.1
+#r2pro with rtl8367
+#boardversion=v00
+
+#mainline uboot for r64 (old ATF) needs 64bit uImage
+#uimagearch=arm64
+
+#grep whitelist filter for adding modules to initramfs
+ownmodules='mt76\|bluetooth'
diff --git a/build.sh b/build.sh
new file mode 100755
index 000000000000..ee71e488bb7c
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,1273 @@
+#!/bin/bash
+if [[ $UID -eq 0 ]];
+then
+  echo "do not run as root!"
+  exit 1;
+fi
+
+numproc=$(grep ^processor /proc/cpuinfo  | wc -l)
+
+. build.conf
+
+r64newswver=1.0
+if [[ -z "$board" ]];then board="bpi-r2";fi
+
+kernver=$(make kernelversion | grep -v 'make')
+#echo $kernver
+
+DOTCONFIG=".config"
+
+clr_red=$'\e[1;31m'
+clr_green=$'\e[1;32m'
+clr_yellow=$'\e[1;33m'
+clr_blue=$'\e[1;34m'
+clr_reset=$'\e[0m'
+
+DEFCONFIG=""
+DTS=""
+DTSI=""
+
+case $board in
+	"bpi-r2pro")
+		ARCH=arm64
+		CONFIGPATH=arch/$ARCH/configs
+		DEFCONFIG=$CONFIGPATH/rk3568_bpi-r2p_defconfig
+		DEFCONFIG=$CONFIGPATH/quartz64_defconfig
+		if [[ "$boardversion" == "v00" ]];then
+			DTS=arch/arm64/boot/dts/rockchip/rk3568-bpi-r2-pro-rtl8367.dts
+		else
+			DTS=arch/arm64/boot/dts/rockchip/rk3568-bpi-r2-pro.dts
+		fi
+		DTSI=arch/arm64/boot/dts/rockchip/rk356x.dtsi
+		;;
+	"bpi-r64")
+		ARCH=arm64
+		CONFIGPATH=arch/$ARCH/configs
+		DEFCONFIG=$CONFIGPATH/mt7622_bpi-r64_defconfig
+		if [[ "$boardversion" == "v0.1" ]];then
+			DTS=arch/arm64/boot/dts/mediatek/mt7622-bananapi-bpi-r64-rtl8367.dts
+		else
+			DTS=arch/arm64/boot/dts/mediatek/mt7622-bananapi-bpi-r64.dts
+		fi
+		DTSI=arch/arm64/boot/dts/mediatek/mt7622.dtsi
+		;;
+	"bpi-r3")
+		ARCH=arm64
+		CONFIGPATH=arch/$ARCH/configs
+		DEFCONFIG=$CONFIGPATH/mt7986a_bpi-r3_defconfig
+		DTS=arch/arm64/boot/dts/mediatek/mt7986a-bananapi-bpi-r3.dts
+		#DTS=arch/arm64/boot/dts/mediatek/mt7986a-bananapi-bpi-r3-sd.dts
+		DTSI=arch/arm64/boot/dts/mediatek/mt7986a.dtsi
+		;;
+	"bpi-r4")
+		ARCH=arm64
+		CONFIGPATH=arch/$ARCH/configs
+		DEFCONFIG=$CONFIGPATH/mt7988a_bpi-r4_defconfig
+		DTS=arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4.dts
+		DTSI=arch/arm64/boot/dts/mediatek/mt7988a.dtsi
+		;;
+	*) #bpir2
+		ARCH=arm
+		CONFIGPATH=arch/$ARCH/configs
+		DEFCONFIG=$CONFIGPATH/mt7623n_evb_fwu_defconfig
+		DTS=arch/arm/boot/dts/mediatek/mt7623n-bananapi-bpi-r2.dts
+		DTSI=arch/arm/boot/dts/mediatek/mt7623.dtsi
+		;;
+esac
+#echo "DTB:${DTS%.*}.dtb"
+export ARCH=$ARCH;
+
+#defconfig-override
+if [[ "$1" =~ ^(importconfig|defconfig)$ && -n "$2" ]];
+then
+	if [[ -e "${CONFIGPATH}/${2}_defconfig" ]];then
+		echo "using defconfig ${2}_defconfig"
+		DEFCONFIG="${CONFIGPATH}/${2}_defconfig"
+	else
+		echo "defconfig ${2}_defconfig not found!"
+	fi
+fi
+
+#Check Crosscompile
+crosscompile=0
+hostarch=$(uname -m) #r64:aarch64 r2: armv7l
+
+if [[ ! $hostarch =~ aarch64|armv ]];then
+	if [[ "$ARCH" == "arm64" ]]; then
+		if [[ -z "$(which aarch64-linux-gnu-gcc)" ]];then echo "please install gcc-aarch64-linux-gnu";exit 1;fi
+		export CROSS_COMPILE='ccache aarch64-linux-gnu-'
+	elif [[ "$ARCH" == "arm" ]]; then
+		if [[ -z "$(which arm-linux-gnueabihf-gcc)" ]];then echo "please install gcc-arm-linux-gnueabihf";exit 1;fi
+		export CROSS_COMPILE='ccache arm-linux-gnueabihf-'
+	fi
+
+	crosscompile=1
+fi;
+
+#if [[ "$builddir" != "" && ! "$1" =~ ^(updatesrc|uenv|defconfig|dts.?|[u]?mount)$ ]];
+if [[ "$builddir" != "" ]];
+then
+	if [[ "$1" == "importconfig" ]];
+	then
+		KBUILD_OUTPUT= make mrproper
+	fi
+	if [[ ! "$builddir" =~ ^/ ]] || [[ "$builddir" == "/" ]];then
+		#make it absolute
+		builddir=$(realpath $(pwd)"/"$builddir)
+#		echo "absolute: $builddir"
+	fi
+
+	mkdir -p $builddir
+
+	if [[ "$ramdisksize" != "" ]];
+	then
+		mount | grep '\s'$builddir'\s' &>/dev/null #$?=0 found;1 not found
+		if [[ $? -ne 0 ]];then
+			#make sure directory is clean for mounting
+			if [[ "$(ls -A $builddir)" ]];then
+				rm -rf $builddir/*
+			fi
+			if [[ "$1" == "importconfig" ]];
+			then
+				echo "mounting tmpfs for building..."
+				sudo mount -t tmpfs -o size=$ramdisksize none $builddir
+			fi
+		fi
+	fi
+
+	#if builddir is empty then run make mrproper to clean up sourcedir
+	if [[ ! "$(ls -A $builddir)" ]];then make mrproper;fi
+
+	if ! [[ "$1" =~ "updatesrc" ]];then
+		DOTCONFIG="$builddir/$DOTCONFIG"
+		export KBUILD_OUTPUT=$builddir
+	fi
+fi
+
+function edit()
+{
+	file=$1
+	if [[ -z "$EDITOR" ]];then EDITOR=/usr/bin/editor;fi #use alternatives setting
+	if [[ -e "$file" ]];then
+		if [[ -w "$file" ]];then
+			$EDITOR "$file"
+		else
+			echo "file $file not writable by user using sudo..."
+			sudo $EDITOR "$file"
+		fi
+	else
+		echo "file $file not found"
+	fi
+}
+
+#Check Dependencies
+
+function check_dep()
+{
+	PACKAGE_Error=0
+
+	grep -i 'ubuntu\|debian' /etc/issue &>/dev/null
+	if [[ $? -ne 0 ]];then
+		echo "depency-check currently only on debian/ubuntu..."
+		return 0;
+	fi
+	PACKAGES=$(dpkg -l | awk '{print $2}')
+
+	NEEDED_PKGS="make"
+
+	#echo "needed: $NEEDED_PKGS"
+
+	if [[ $# -ge 1 ]];
+	then
+		if [[ $@ =~ "build" ]];then
+			NEEDED_PKGS+=" u-boot-tools bc gcc libc6-dev libncurses-dev ccache libssl-dev"
+		fi
+		if [[ $@ =~ "deb" ]];then
+			NEEDED_PKGS+=" fakeroot"
+		fi
+	fi
+
+	echo "needed: $NEEDED_PKGS"
+	for package in $NEEDED_PKGS; do
+		#TESTPKG=$(dpkg -l |grep "\s${package}")
+		TESTPKG=$(echo "$PACKAGES" |grep "^${package}")
+		if [[ -z "${TESTPKG}" ]];then echo "please install ${package}";PACKAGE_Error=1;fi
+	done
+	if [ ${PACKAGE_Error} == 1 ]; then return 1; fi
+	return 0;
+}
+
+function getuenvpath {
+	if [[ $crosscompile -ne 0 ]];then
+		uenv_base=/media/${USER}/BPI-BOOT/
+	else
+		uenv_base=/boot/
+	fi
+	if [[ -d $uenv_base ]];then
+		if [[ "$board" == "bpi-r2" || "$board" == "bpi-r64" ]];then
+			#r2/r64 uboot: ${bpi}/${board}/${service}/${bootenv}
+			uenv=${uenv_base}/bananapi/$board/linux/uEnv.txt
+		else
+			uenv=${uenv_base}/uEnv.txt
+		fi
+		if [[ ! -e $uenv ]];then
+			mkdir -p $(dirname ${uenv})
+		fi
+	fi
+	echo $uenv
+}
+
+function get_version()
+{
+	echo "generate branch vars..."
+	#kernbranch=$(git rev-parse --abbrev-ref HEAD)
+
+	echo "getting git branch: "
+	#find branches with actual commit and filter out detached head
+	commit=$(git log -n 1 --pretty='%h')
+	branches=$(git branch --contains $commit | grep -v '(HEAD')
+	echo "$branches"
+
+	kernbranch=$(echo "$branches" | grep '^*') #look for marked branch (local)
+	if [[ "$kernbranch" == "" ]];then #no marked branch (travis)
+		kernbranch=$(echo "$branches" | head -1) #use first one
+	fi
+	#kernbranch=$(git branch --contains $(git log -n 1 --pretty='%h') | grep '^*' | grep -v '(HEAD' | head -1 | sed 's/^..//')
+	kernbranch=$(echo "$kernbranch" | sed 's/^..//')
+	kernbranch=${kernbranch//frank-w_/}
+	#if no branch is selected (e.g. bisect)
+	if [[ "${kernbranch}" =~ ^\(.* ]]; then
+		kernbranch="-$commit";
+	fi
+
+	gitbranch=$(echo $kernbranch|sed 's/^[456]\.[0-9]\+//'|sed 's/-rc$//')
+
+	echo "kernbranch:$kernbranch,gitbranch:$gitbranch"
+}
+
+function get_r64_switch
+{
+	grep 'RTL8367S_GSW=y' $DOTCONFIG &>/dev/null
+	if [[ $? -eq 0 ]];then
+		echo "rtl8367"
+	else
+		grep 'MT753X_GSW=y' $DOTCONFIG &>/dev/null
+		if [[ $? -eq 0 ]];then
+			echo "mt7531"
+		else
+			echo ""
+		fi
+	fi
+}
+
+function increase_kernel {
+        #echo $kernver
+        old_IFS=$IFS
+        IFS='.'
+        read -ra KV <<< "$kernver"
+        IFS=','
+        newkernver=${KV[0]}"."${KV[1]}"."$(( ${KV[2]} +1 ))
+        echo $newkernver
+}
+
+function disable_option() {
+	echo "disable $1"
+	if [[ "$1" == "" ]];then echo "option missing ($1)";return;fi
+	#CFG=RTL8367S_GSW;
+	CFG=${1^^};
+	CFG=${CFG//CONFIG_/}
+	#echo "CFG:$CFG"
+	#grep -i 'mt753x\|rtl8367' .config
+	grep $CFG .config
+	if [[ $? -eq 0 ]]; then
+		sed -i 's:CONFIG_'$CFG'=y:# CONFIG_'$CFG' is not set:g' $DOTCONFIG
+		grep $CFG $DOTCONFIG
+	else
+		echo "option CONFIG_$CFG not found in .config"
+	fi
+}
+
+function update_kernel_source {
+        changedfiles=$(git diff --name-only)
+        if [[ -z "$changedfiles" ]]; then
+        git fetch stable
+        ret=$?
+        if [[ $ret -eq 0 ]];then
+                newkernver=$(increase_kernel)
+		kernmajorver=$(make kernelversion | sed -e 's/\.[0-9]\+$//')
+		maxkernver=$(git for-each-ref --sort=-taggerdate --count=1  refs/tags/v${kernmajorver}.*| sed 's/^.*refs\/tags\/v//')
+                echo "newkernver:$newkernver (max:$maxkernver)"
+                git merge --no-edit v$newkernver
+        elif [[ $ret -eq 128 ]];then
+                #repo not found
+                git remote add stable https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
+        fi
+        else
+                echo "please first commit/stash modified files: $changedfiles"
+        fi
+}
+
+function changelog() {
+	get_version >/dev/null
+	lasttag=$(curl -s "https://api.github.com/repos/frank-w/BPI-R2-4.14/releases?per_page=100" | jq -r '[.[] | select(.tag_name|contains("'${kernbranch}'"))][0]' | grep "tag_name" | sed 's/.*: "\(.*\)",/\1/')
+	echo "changes since $lasttag:"
+	git log --pretty=format:"%h %ad %s %d" --date=short $lasttag..HEAD
+}
+
+function pack {
+	get_version
+	#if [[ "$board" == "bpi-r64" ]];then
+	#	switch=$(get_r64_switch)"_"
+	#fi
+	prepare_SD
+	echo "pack..."
+	olddir=$(pwd)
+	cd ../SD
+	fname=${board}_${switch}${kernver}${gitbranch}.tar.gz
+	tar -cz --owner=root --group=root -f $fname BPI-BOOT BPI-ROOT
+	md5sum $fname > $fname.md5
+	ls -lh $(pwd)"/"$fname
+	cd $olddir
+}
+
+function pack_debs {
+	get_version
+	echo "pack linux-headers, linux-image, linux-libc-dev debs..."
+	echo "LOCALVERSION=${gitbranch} board=$board ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE"
+	LOCALVERSION="${gitbranch}" board="$board" KDEB_COMPRESS=gzip make bindeb-pkg
+	if [[ $? -ne 0 ]];then exit 1;fi;
+	ls ../*.deb
+}
+
+
+function upload {
+	get_version
+
+	DTBFILE=${DTS%.*}.dtb
+	echo "using ${DTBFILE}..."
+	bindir="";
+	if [[ -n "$builddir" ]];then bindir="$builddir/"; fi
+
+	b=${board//bpi/}
+	if [[ "${gitbranch}" =~ "${b}" ]]; then
+		b=""
+	fi
+
+	imagename="${kernver}${gitbranch}${b}"
+	read -e -i $imagename -p "Kernel-filename: " input
+	imagename="${input:-$imagename}"
+
+	echo "Name: $imagename"
+
+	if [[ "$board" == "bpi-r2" ]];then
+		imagename="uImage_$imagename"
+	else
+		read -e -i y -p "upload fit? " fitupload
+		if [[ "$fitupload" == "y" ]];
+		then
+			imagename="${imagename}.itb"
+			echo "uploading fit as $imagename"
+		else
+			dtbname="${kernver}${b}${gitbranch}.dtb"
+			read -e -i $dtbname -p "dtb-filename: " input
+			dtbname="${input:-$dtbname}"
+			echo "DTB Name: $dtbname"
+		fi
+	fi
+
+	echo "DTB Name: $dtbname"
+	echo "uploading to ${uploadserver}:${uploaddir}..."
+
+	if [[ "$board" == "bpi-r2" ]];then
+		scp uImage ${uploaduser}@${uploadserver}:${uploaddir}/${imagename}
+	else
+		if [[ "$fitupload" == "y" ]];
+		then
+			scp ${board}.itb ${uploaduser}@${uploadserver}:${uploaddir}/${imagename}
+		else
+			scp uImage_nodt ${uploaduser}@${uploadserver}:${uploaddir}/${imagename}
+			scp ${bindir}${DTBFILE} ${uploaduser}@${uploadserver}:${uploaddir}/${dtbname}
+		fi
+	fi
+}
+
+function install
+{
+	get_version
+
+	DTBFILE=${DTS%.*}.dtb
+	echo "using ${DTBFILE}..."
+	bindir="";
+	if [[ -n "$builddir" ]];then bindir="$builddir/"; fi
+
+	imagename="${kernver}${gitbranch}"
+	if [[ "$board" == "bpi-r2pro" ]];then
+		$0 mount
+	fi
+	read -e -i $imagename -p "Image-filename: " input
+	imagename="${input:-$imagename}"
+
+	echo "Name: $imagename"
+
+	if [[ $crosscompile -eq 0 ]]; then
+		kerneldir="/boot/bananapi/$board/linux"
+		kernelfile="$kerneldir/$imagename"
+		if [[ -d "$kerneldir" ]];then
+			if [[ -e "$kernelfile" ]];then
+				echo "backup of kernel: $kernelfile.bak"
+				sudo cp "$kernelfile" "$kernelfile.bak"
+			fi
+			echo "installing new kernel..."
+			sudo cp ./uImage "$kernelfile"
+			sudo make modules_install
+		else
+			echo "Kernel directory not found...is /boot mounted?"
+		fi
+	else
+		itbinput=n
+		imginput=n
+		read -p "Press [enter] to copy data to SD-Card..."
+		if  [[ -d /media/$USER/BPI-BOOT ]]; then
+
+			targetdir=/media/$USER/BPI-BOOT
+			if [[ "$board" == "bpi-r2" || "$board" == "bpi-r64" ]];then
+				targetdir=/media/$USER/BPI-BOOT/bananapi/$board/linux
+			fi
+			mkdir -p $targetdir
+			kernelfile=$targetdir/$imagename
+
+			dtinput=n
+			ndtinput=y
+			imginput=y
+			if [[ -e ${board}.its ]];then
+				read -e -i "y" -p "install FIT kernel (itb) [yn]? " itbinput
+				if [[ "$itbinput" == "y" ]];then
+					itbname=${imagename}.itb
+					itbfile=$targetdir/$itbname
+					if [[ -e $itbfile ]];then
+						echo "backup of kernel: $itbfile.bak"
+						cp $itbfile $itbfile.bak
+					fi
+					echo "copy new kernel"
+					cp ./${board}.itb $itbfile
+					if [[ $? -ne 0 ]];then exit 1;fi
+					ndtinput=n
+					imginput=n
+				fi
+			else
+				read -e -i "y" -p "install kernel with DT [yn]? " dtinput
+				if [[ "$dtinput" == "y" ]];then
+					if [[ -e $kernelfile ]];then
+						echo "backup of kernel: $kernelfile.bak"
+						cp $kernelfile $kernelfile.bak
+					fi
+					echo "copy new kernel"
+					cp ./uImage $kernelfile
+					if [[ $? -ne 0 ]];then exit 1;fi
+				fi
+
+				ndt="n"
+				if [ "$dtinput" != "y" ];then ndt="y"; fi
+				read -e -i "$ndt" -p "install kernel with separate DT [yn]? " ndtinput
+				ndtsuffix="_nodt"
+			fi
+
+			if [[ "$board" == "bpi-r2pro" ]];then
+				targetdir=/media/$USER/BPI-BOOT/extlinux
+				read -e -i "$imginput" -p "install img kernel (img.gz) [yn]? " imginput
+				if [[ "$imginput" == "y" ]];then
+					dtbname=${imgname}.dtb
+					imgname=${imagename}.gz
+					imgfile=$targetdir/$imgname
+					if [[ -e ${imgfile} ]];then
+						echo "backup of kernel: $imgfile.bak"
+						cp ${imgfile} ${imgfile}.bak
+					fi
+					echo "copy new kernel"
+					set -x
+					cp ${bindir}arch/arm64/boot/Image.gz $imgfile
+					cp ${bindir}${DTBFILE} ${targetdir}/${dtbname}
+					set +x
+					if [[ $? -ne 0 ]];then exit 1;fi
+					ndtinput=n
+				fi
+			fi
+			if [[ "$ndtinput" == "y" ]];then
+				if [[ -e ${kernelfile}${ndtsuffix} ]];then
+					echo "backup of kernel: $kernelfile.bak"
+					cp ${kernelfile}${ndtsuffix} ${kernelfile}${ndtsuffix}.bak
+				fi
+				echo "copy new nodt kernel"
+				cp ./uImage_nodt ${kernelfile}${ndtsuffix}
+				if [[ $? -ne 0 ]];then exit 1;fi
+				mkdir -p $targetdir/dtb
+				dtbname=${kernver}${gitbranch}.dtb
+				read -e -i $dtbname -p "dtb-filename: " input
+				dtbname="${input:-$dtbname}"
+				echo "DTB Name: $dtbname"
+
+				dtbfile=$targetdir/dtb/${dtbname}
+				if [[ -e $dtbfile ]];then
+					echo "backup of dtb: $dtbfile.bak"
+					cp $dtbfile $dtbfile.bak
+				fi
+				echo "copy new dtb"
+				cp ${bindir}${DTBFILE} $dtbfile
+			fi
+
+			if [[ "$dtinput" == "y" ]] || [[ "$ndtinput" == "y" ]] || [[ "$itbinput" == "y" ]]  || [[ "$imginput" == "y" ]];then
+				echo "copy modules (root needed because of ext-fs permission)"
+				export INSTALL_MOD_PATH=/media/$USER/BPI-ROOT/;
+				echo "INSTALL_MOD_PATH: $INSTALL_MOD_PATH"
+				sudo make ARCH=$ARCH INSTALL_MOD_PATH=$INSTALL_MOD_PATH KBUILD_OUTPUT=$KBUILD_OUTPUT modules_install
+
+				echo "uImage:"
+				if [[ "$itbinput" == "y" ]];then
+					echo "${itbfile}"
+				fi
+				if [[ "$dtinput" == "y" ]];then
+					echo "${kernelfile}"
+				fi
+				if [[ "$ndtinput" == "y" ]];then
+					echo "${kernelfile}${ndtsuffix}"
+					echo "DTB: ${dtbfile}"
+				fi
+
+				kernelname=$(ls -1t $INSTALL_MOD_PATH"/lib/modules" | head -n 1)
+				EXTRA_MODULE_PATH=$INSTALL_MOD_PATH"/lib/modules/"$kernelname"/kernel/extras"
+				#echo $kernelname" - "${EXTRA_MODULE_PATH}
+				CRYPTODEV="utils/cryptodev/cryptodev-linux/cryptodev.ko"
+				if [ -e "${CRYPTODEV}" ]; then
+					echo Copy CryptoDev
+					sudo mkdir -p "${EXTRA_MODULE_PATH}"
+					sudo cp "${CRYPTODEV}" "${EXTRA_MODULE_PATH}"
+					#Build Module Dependencies
+					sudo /sbin/depmod -b $INSTALL_MOD_PATH ${kernelname}
+				fi
+
+				#sudo cp -r ../mod/lib/modules /media/$USER/BPI-ROOT/lib/
+				if [[ -n "$(grep 'CONFIG_MT76=' $DOTCONFIG)" ]];then
+					echo "MT76 set,don't forget the firmware-files...";
+				fi
+			else
+				echo "install of modules skipped because no kernel was installed";
+			fi
+
+			echo "syncing sd-card...this will take a while"
+			echo "run 'watch -n 1 grep -e Dirty: /proc/meminfo' to show progress"
+			sync
+
+			uenv=$(getuenvpath)
+			echo "using bootfile $uenv"
+			openuenv=n
+
+			if [[ -e "$uenv" ]];then
+				echo "by default this kernel-/dtb-file will be loaded (kernel-var in uEnv.txt):"
+				if [[ "$itbinput" == "y" ]];then
+					curkernel=$(grep '^fit=' $uenv|tail -1| sed 's/fit=//')
+				else
+					curkernel=$(grep '^kernel=' $uenv|tail -1| sed 's/kernel=//')
+					curfdt=$(grep '^fdt=' $uenv|tail -1| sed 's/fdt=//')
+				fi
+				echo "kernel: " $curkernel
+				echo "dtb: " $curfdt
+				if [[ "$curkernel" == "${imagename}" || "$curkernel" == "${imagename}${ndtsuffix}" || "$curkernel" == "${itbname}" ]];then
+					echo "no change needed!"
+					openuenv=n
+				else
+					echo "change needed to boot new kernel (kernel=${imagename}/fit=${itbname})!"
+					openuenv=y
+				fi
+			else
+				echo "no bootconfig...change needed to boot new kernel (kernel=${imagename}/fit=${itbname})!"
+				openuenv=y
+			fi
+
+			read -e -i "$openuenv" -p "open boot config file (uEnv/extlinux.conf) [yn]? " input
+			if [[ "$input" == "y" ]];then
+				$0 uenv
+			fi
+
+			read -e -i "y" -p "umount SD card [yn]? " input
+			if [[ "$input" == "y" ]];then
+				$0 umount
+			fi
+		else
+			echo "SD-Card not found!"
+		fi
+	fi
+}
+
+function install_modules {
+	echo "cleaning up modules"
+	rm -r $(pwd)/mod/* 2> /dev/null
+	mkdir $(pwd)/mod
+	echo "building and installing modules"
+#	export LOCALVERSION="${gitbranch}"
+#	#MAKEFLAGS="V=1"
+#	make ${MAKEFLAGS} ${CFLAGS} modules
+	build
+	INSTALL_MOD_PATH=$(pwd)/mod make modules_install
+}
+
+function mod2initrd {
+	size=$(du -s mod | awk '{ print $1}') #65580 working
+	echo $size
+	if [[ $size -eq 0 ]];
+	then
+		install_modules
+	fi
+	#first reset initrd
+	echo "reset initramfs..."
+	git checkout utils/buildroot/rootfs_${board}.cpio.gz
+	ls -lh utils/buildroot/rootfs_${board}.cpio.gz
+	(
+		echo "adding modules to initramfs..."
+		cd mod
+		#need to create dirs and common files first
+		find . -not -iname '*.ko' > mod.lst
+		if [[ "$ownmodules" != "" ]];then
+			find . | grep $ownmodules >> mod.lst
+		fi
+		cat mod.lst | cpio -H newc -o | gzip >> ../utils/buildroot/rootfs_${board}.cpio.gz
+		#to show whats inside cpio:
+		#gunzip -c < ../utils/buildroot/rootfs_${board}.cpio.gz | while LANG=C cpio -itv 2>/dev/null; do :; done| grep lib/modules
+		ls -lh ../utils/buildroot/rootfs_${board}.cpio.gz
+	)
+	initrdsize=$(ls -l --block-size=M utils/buildroot/rootfs_bpi-r2.cpio.gz | awk '{print $5}' | sed 's/M$//')
+	if [[ $initrdsize -lt 100 ]]; #lower than 40MB leaves 10MB for kernel uImage
+	then
+		echo "re-building kernel with initramfs... ($DOTCONFIG)"
+		OWNCONFIGS="CONFIG_INITRAMFS_SOURCE=\"utils/buildroot/rootfs_${board}.cpio.gz\" CONFIG_INITRAMFS_FORCE=y"
+		build
+		installchoice
+	else
+		echo "kernel with initrd may exceed uboot limit of ~100MB (Bad Data CRC)"
+	fi
+}
+
+function deb {
+#set -x
+	check_dep "deb"
+	if [[ $? -ne 0 ]];then exit 1;fi
+	get_version
+	ver=${kernver}-${board}${gitbranch}
+	uimagename=uImage_${kernver}${gitbranch}
+	echo "deb package ${ver}"
+	prepare_SD
+	boardv=${board:4}
+	targetdir=debian/bananapi-$boardv-image
+
+#    cd ../SD
+#    fname=bpi-r2_${kernver}_${gitbranch}.tar.gz
+#    tar -cz --owner=root --group=root -f $fname BPI-BOOT BPI-ROOT
+
+	rm -rf $targetdir/boot/bananapi/$board/linux/*
+	rm -rf $targetdir/lib/modules/*
+	mkdir -p $targetdir/boot/bananapi/$board/linux/dtb/
+	mkdir -p $targetdir/lib/modules/
+	mkdir -p $targetdir/DEBIAN/
+
+	#sudo mount --bind ../SD/BPI-ROOT/lib/modules debian/bananapi-r2-image/lib/modules/
+	if [[ -e ./uImage || -e ./uImage_nodt ]] && [[ -d ../SD/BPI-ROOT/lib/modules/${ver} ]]; then
+	if [[ -e ./uImage ]];then
+		cp ./uImage $targetdir/boot/bananapi/$board/linux/${uimagename}
+	fi
+	if [[ -e ./uImage_nodt && -e ./$board.dtb ]];then
+		cp ./uImage_nodt $targetdir/boot/bananapi/$board/linux/${uimagename}_nodt
+		cp ./$board.dtb $targetdir/boot/bananapi/$board/linux/dtb/$board-${kernver}${gitbranch}.dtb
+	fi
+#    pwd
+	cp -r ../SD/BPI-ROOT/lib/modules/${ver} $targetdir/lib/modules/
+	#rm debian/bananapi-r2-image/lib/modules/${ver}/{build,source}
+	#mkdir debian/bananapi-r2-image/lib/modules/${ver}/kernel/extras
+	#cp cryptodev-linux/cryptodev.ko debian/bananapi-r2-image/lib/modules/${ver}/kernel/extra
+	cat > $targetdir/DEBIAN/preinst << EOF
+#!/bin/bash
+clr_red=\$'\e[1;31m'
+clr_green=\$'\e[1;32m'
+clr_yellow=\$'\e[1;33m'
+clr_blue=\$'\e[1;34m'
+clr_reset=\$'\e[0m'
+m=\$(mount | grep '/boot[^/]')
+if [[ -z "\$m" ]];
+then
+	echo "\${clr_red}/boot needs to be mountpoint for /dev/mmcblk0p1\${clr_reset}";
+	exit 1;
+fi
+kernelfile=/boot/bananapi/$board/linux/${uimagename}
+if [[ -e "\${kernelfile}" ]];then
+	echo "\${clr_red}\${kernelfile} already exists\${clr_reset}"
+	echo "\${clr_red}please remove/rename it or uninstall previous installed kernel-package\${clr_reset}"
+	exit 2;
+fi
+EOF
+	chmod +x $targetdir/DEBIAN/preinst
+	cat > $targetdir/DEBIAN/postinst << EOF
+#!/bin/bash
+clr_red=\$'\e[1;31m'
+clr_green=\$'\e[1;32m'
+clr_yellow=\$'\e[1;33m'
+clr_blue=\$'\e[1;34m'
+clr_reset=\$'\e[0m'
+case "\$1" in
+	configure)
+	#install|upgrade)
+		echo "kernel=${uimagename}">>/boot/bananapi/$board/linux/uEnv.txt
+
+		#check for non-dsa-kernel (4.4.x)
+		kernver=\$(uname -r)
+		if [[ "\${kernver:0:3}" == "4.4" ]];
+		then
+			echo "\${clr_yellow}you are upgrading from kernel 4.4.\${clr_reset}";
+			echo "\${clr_yellow}Please make sure your network-config (/etc/network/interfaces) matches dsa-driver\${clr_reset}";
+			echo "\${clr_yellow}(bring cpu-ports ethx up, ip-configuration to wan/lanx)\${clr_reset}";
+		fi
+	;;
+	*) echo "unhandled \$1 in postinst-script"
+esac
+EOF
+	chmod +x $targetdir/DEBIAN/postinst
+	cat > $targetdir/DEBIAN/postrm << EOF
+#!/bin/bash
+case "\$1" in
+	abort-install)
+		echo "installation aborted"
+	;;
+	remove|purge)
+		if [[ -e /boot/bananapi/$board/linux/uEnv.txt ]];then
+			cp /boot/bananapi/$board/linux/uEnv.txt /boot/bananapi/$board/linux/uEnv.txt.bak
+			grep -v  ${uimagename} /boot/bananapi/$board/linux/uEnv.txt.bak > /boot/bananapi/$board/linux/uEnv.txt
+		else
+			cp /boot/uEnv.txt /boot/uEnv.txt.bak
+			grep -v  ${uimagename} /boot/uEnv.txt.bak > /boot/uEnv.txt
+		fi
+	;;
+esac
+EOF
+	chmod +x $targetdir/DEBIAN/postrm
+	if [[ "$board" == "bpi-r2" ]];then
+		debarch=armhf
+	else
+		debarch=arm64
+	fi
+
+    cat > $targetdir/DEBIAN/control << EOF
+Package: bananapi-$boardv-image-${kernbranch}
+Version: ${kernver}-1
+Section: custom
+Priority: optional
+Architecture: $debarch
+Multi-Arch: no
+Essential: no
+Maintainer: Frank Wunderlich
+Description: ${BOARD^^} linux image ${ver}
+EOF
+    cd debian
+    fakeroot dpkg-deb --build bananapi-$boardv-image ../debian
+    cd ..
+    ls -lh debian/*.deb
+    debfile=debian/bananapi-$boardv-image-${kernbranch,,}_${kernver}-1_$debarch.deb
+    dpkg -c $debfile
+
+	dpkg -I $debfile
+  else
+    echo "First build kernel ${ver}"
+    echo "eg: ./build"
+  fi
+}
+
+function build {
+	echo Cleanup Kernel Build
+	rm arch/arm/boot/zImage 2>/dev/null
+	rm arch/arm/boot/zImage-dtb 2>/dev/null
+	rm arch/arm64/boot/Image 2>/dev/null
+	rm ./uImage* 2>/dev/null
+	rm ${board}.dtb 2>/dev/null
+
+	check_dep "build"
+	if [[ $? -ne 0 ]];then exit 1;fi
+
+	get_version
+
+	if [ -e $DOTCONFIG ]; then
+		exec 3> >(tee build.log)
+		export LOCALVERSION="${gitbranch}"
+		#MAKEFLAGS="V=1"
+		export DTC_FLAGS="-@"
+		make ${MAKEFLAGS} ${CFLAGS} ${OWNCONFIGS} 2>&3
+		ret=$?
+		exec 3>&-
+
+		if [[ $ret == 0 ]]; then
+			if [[ -z "${uimagearch}" ]];then uimagearch=arm;fi
+
+			DTBFILE=${DTS%.*}.dtb
+			case "$board" in
+				"bpi-r2pro")
+					IMAGE=arch/arm64/boot/Image
+					LADDR=0x7f000001
+					ENTRY=0x7f000001
+				;;
+				"bpi-r64")
+					IMAGE=arch/arm64/boot/Image
+					LADDR=40080000
+					ENTRY=40080000
+				;;
+				"bpi-r3")
+					IMAGE=arch/arm64/boot/Image
+					LADDR=40080000
+					ENTRY=40080000
+					if [[ -e mt7986a-bananapi-bpi-r3-nor.dts ]];then
+						echo "compiling r3 dt overlays"
+						#dtc -O dtb -o bpi-r3-nor.dtbo mt7986a-bananapi-bpi-r3-nor.dts
+						#dtc -O dtb -o bpi-r3-nand.dtbo mt7986a-bananapi-bpi-r3-nand.dts
+					fi
+				;;
+				"bpi-r4")
+					IMAGE=arch/arm64/boot/Image
+					LADDR=40080000
+					ENTRY=40080000
+				;;
+				"bpi-r2")
+					IMAGE=arch/arm/boot/zImage
+					LADDR=80008000
+					ENTRY=80008000
+				;;
+			esac
+
+			if [[ "$builddir" != "" ]];
+			then
+				cp $builddir/${IMAGE%.*}* ${IMAGE%/*}
+				DTBBASE=${DTBFILE%.*}
+				if [[ -e $builddir/${DTBBASE}.dtb ]];then
+					cp $builddir/${DTBBASE}*.dtb ${DTBFILE%/*}
+					cp $builddir/$DTBFILE $board.dtb
+				fi
+				if [[ -e $builddir/${DTBBASE}-sd.dtbo ]];then
+					cp $builddir/${DTBBASE}-*.dtbo ${DTBFILE%/*}
+				fi
+			elif [[ -e $DTBFILE ]];then
+				cp $DTBFILE $board.dtb
+			fi
+
+			#if [[ "$board" == "bpi-r2pro" ]];then
+			#	#skipping mkimage causes no choice, but uImage is not bootable on r2pro
+			#	mkimage -A ${uimagearch} -O linux -T kernel -C none -a $LADDR -e $ENTRY -n "Linux Kernel $kernver$gitbranch" -d $IMAGE ./uImage_nodt
+			if [[ -e ${board}.its ]];then #"$board" == "bpi-r64" || "$board" == "bpi-r3" ]];then
+				mkimage -A ${uimagearch} -O linux -T kernel -C none -a $LADDR -e $ENTRY -n "Linux Kernel $kernver$gitbranch" -d $IMAGE ./uImage_nodt
+				sed "s/%version%/$kernver$gitbranch/" ${board}.its > ${board}.its.tmp
+				mkimage -f ${board}.its.tmp ${board}.itb
+				cp ${board}.itb ${board}-$kernver$gitbranch.itb
+				rm ${board}.its.tmp
+			else
+				cat $IMAGE $DTBFILE > arch/arm/boot/zImage-dtb
+				mkimage -A arm -O linux -T kernel -C none -a $LADDR -e $ENTRY -n "Linux Kernel $kernver$gitbranch" -d arch/arm/boot/zImage-dtb ./uImage
+
+				echo "build uImage without appended DTB..."
+				export DTC_FLAGS="-@ --space 32768"
+				make ${CFLAGS} CONFIG_ARM_APPENDED_DTB=n &>/dev/null #output/errors can be ignored because they are printed before
+				ret=$?
+				if [[ $ret == 0 ]]; then
+					mkimage -A arm -O linux -T kernel -C none -a $LADDR -e $ENTRY -n "Linux Kernel $kernver$gitbranch" -d $IMAGE ./uImage_nodt
+				fi
+			fi
+
+			if [[ "$builddir" != "" ]];
+			then
+				if [[ -e uImage ]];then
+					cp {,$builddir/}uImage
+				fi
+				cp {,$builddir/}uImage_nodt
+				if [[ -e ${board}.itb ]];then
+					cp {,$builddir/}${board}.itb
+				fi
+			fi
+		fi
+	else
+		echo "No Configfile found, Please Configure Kernel"
+	fi
+	return $ret
+}
+
+function prepare_SD {
+	SD=../SD
+	cd $(dirname $0)
+	mkdir -p ../SD >/dev/null 2>/dev/null
+
+	echo "cleanup..."
+	for toDel in "$SD/BPI-BOOT/" "$SD/BPI-ROOT/"; do
+		rm -r ${toDel} 2>/dev/null
+	done
+
+	echo "copy..."
+
+	bindir="";
+	if [[ -n "$builddir" ]];then bindir="$builddir/"; fi
+
+	export INSTALL_MOD_PATH=$SD/BPI-ROOT/;
+	echo "INSTALL_MOD_PATH: $INSTALL_MOD_PATH"
+	kerndir="$SD/BPI-BOOT"
+	fdtdir=$kerndir
+	if [[ "$board" == "bpi-r2pro" ]];then
+		mkdir -p $kerndir/extlinux/
+		cp ${bindir}arch/arm64/boot/Image.gz $kerndir/extlinux/
+		cp ./$board.dtb $kerndir/extlinux/$board.dtb
+	else
+		if [[ "$board" =~ bpi-r2|bpi-r64 ]];then
+			kerndir=$SD/BPI-BOOT/bananapi/$board/linux
+			fdtdir="$kerndir/dtb"
+		fi
+		for createDir in "$kerndir" "$fdtdir" "$SD/BPI-ROOT/lib/modules" "$SD/BPI-ROOT/lib/firmware"; do
+			mkdir -p ${createDir} >/dev/null 2>/dev/null
+		done
+		if [[ -e ./uImage ]];then
+			cp ./uImage $kerndir/uImage
+		fi
+		if [[ -e ./uImage_nodt ]];then
+			cp ./uImage_nodt $kerndir/uImage_nodt
+			cp ./$board.dtb $fdtdir/$board.dtb
+		fi
+	fi
+	if [[ -e ./$board.itb ]];then
+		cp ./$board.itb $kerndir/$board.itb
+	fi
+	make modules_install
+
+	#Add CryptoDev Module if exists or Blacklist
+	CRYPTODEV="utils/cryptodev/cryptodev-linux/cryptodev.ko"
+	mkdir -p "${INSTALL_MOD_PATH}/etc/modules-load.d"
+	mkdir -p "${INSTALL_MOD_PATH}/etc/modprobe.d"
+
+	LOCALVERSION=$(find ../SD/BPI-ROOT/lib/modules/* -maxdepth 0 -type d |rev|cut -d"/" -f1 | rev)
+	EXTRA_MODUL_PATH="${SD}/BPI-ROOT/lib/modules/${LOCALVERSION}/kernel/extras"
+	if [ -e "${CRYPTODEV}" ]; then
+		echo Copy CryptoDev
+		mkdir -p "${EXTRA_MODUL_PATH}"
+		cp "${CRYPTODEV}" "${EXTRA_MODUL_PATH}"
+		#Load Cryptodev on BOOT
+		echo  "cryptodev" >${INSTALL_MOD_PATH}/etc/modules-load.d/cryptodev.conf
+
+		#Build Module Dependencies
+		/sbin/depmod -b "${SD}/BPI-ROOT/" ${LOCALVERSION}
+	else
+		#Blacklist Cryptodev Module
+		echo "blacklist cryptodev" >${INSTALL_MOD_PATH}/etc/modprobe.d/cryptodev.conf
+	fi
+
+	if [[ -n "$(grep 'CONFIG_MT76=' $DOTCONFIG)" ]];then
+		echo "MT76 set, including the firmware-files...";
+		cp drivers/net/wireless/mediatek/mt76/firmware/* $SD/BPI-ROOT/lib/firmware/
+	fi
+
+	if [[ "$board" == "bpi-r64" ]];then
+		mkdir -p $SD/BPI-ROOT/lib/firmware/mediatek
+		cp utils/firmware/mediatek/mt7622* $SD/BPI-ROOT/lib/firmware/mediatek/
+	fi
+}
+
+function installchoice
+{
+	if [ -e "./uImage" ] || [ -e "./uImage_nodt" ]; then
+		echo "==========================================="
+		echo "1) pack"
+		if [[ $crosscompile -eq 0 ]];then
+			echo "2) install to System"
+		else
+			echo "2) install to SD-Card"
+		fi;
+		echo "3) deb-package"
+		echo "4) upload"
+		read -n1 -p "choice [1234]:" choice
+		echo
+		if [[ "$choice" == "1" ]]; then
+			$0 pack
+		elif [[ "$choice" == "2" ]];then
+			$0 install
+		elif [[ "$choice" == "3" ]];then
+			$0 deb
+		elif [[ "$choice" == "4" ]];then
+			$0 upload
+		else
+			echo "wrong option: $choice"
+		fi
+	fi
+}
+
+function release
+{
+	lc=$(git log -n 1 --pretty=format:'%s')
+	reltag="Release_${kernver}"
+	if [[ ${lc} =~ ^Merge ]];
+	then
+		echo Merge;
+	else
+		echo "normal commit";
+		lc=${lc//[^a-zA-Z0-9]/_}
+		reltag="${reltag}_${lc}"
+	fi
+	echo "RelTag:"$reltag
+	if [[ -z "$(git tag -l $reltag)" ]]; then
+	git tag $reltag
+	git push origin $reltag
+	else
+		echo "Tag already used, please use another"
+	fi
+}
+
+#Test if the Kernel is there
+if [ -n "$kernver" ]; then
+	action=$1
+	file=$2
+	LANG=C
+	CFLAGS=-j${numproc}
+
+	#echo $action
+
+	case "$action" in
+		"checkdep")
+			echo "checking depencies..."
+			check_dep "build";
+			if [[ $? -eq 0 ]];then echo "OK";else echo "failed";fi
+		;;
+		"changelog")
+			echo "print changelog from last release of branch"
+			changelog
+		;;
+		"changelog_file")
+			echo "write changelog from last release of branch to file"
+			changelog > changelog.txt
+		;;
+		"reset")
+			echo "Reset Git"
+			##Reset Git
+			git reset --hard HEAD
+			#call self and Import Config
+			$0 importconfig
+			;;
+
+		"update")
+			echo "Update Git Repo"
+			git pull
+			;;
+
+		"updatesrc")
+			echo "Update kernel source"
+			update_kernel_source
+			;;
+
+		"mount")
+			mount | grep "BPI-BOOT" > /dev/null
+			if [[ $? -ne 0 ]];then
+				udisksctl mount -b /dev/disk/by-label/BPI-BOOT
+			fi
+			mount | grep "BPI-ROOT" > /dev/null
+			if [[ $? -ne 0 ]];then
+				udisksctl mount -b /dev/disk/by-label/BPI-ROOT
+			fi
+			;;
+
+		"umount")
+			echo "umount SD Media"
+			dev=$(mount | grep BPI-ROOT | head -1 | sed -e 's/[0-9] .*$/?/' | sort -u)
+			echo "$dev"
+			if [[ ! -z "$dev" ]];then
+				umount $dev
+			fi
+			;;
+
+		"uenv")
+			echo "edit uEnv.txt on sd-card"
+			uenv=$(getuenvpath)
+			if [[ -n "$uenv" ]];then
+				edit $uenv
+			else
+				echo "uenv.txt not found"
+			fi
+			;;
+
+		"lskernel")
+			echo "list kernels on sd-card"
+			ls -lh /media/$USER/BPI-BOOT/bananapi/$board/linux/
+			echo "available DTBs:"
+			ls -lh /media/$USER/BPI-BOOT/bananapi/$board/linux/dtb
+			;;
+
+		"defconfig")
+			echo "edit def config"
+			edit $DEFCONFIG
+			;;
+		"deb")
+			echo "deb-package (currently testing-state)"
+			deb
+			;;
+		"dtsi")
+			edit $DTSI
+			;;
+
+		"dts")
+			edit $DTS
+			;;
+		"dtbs_check")
+			make dtbs_check 2>&1 | tee -a dtbs_check.log
+		;;
+
+		"importmylconfig")
+			echo "import myl config"
+			make mt7623n_myl_defconfig
+			;;
+
+
+		"importconfig")
+			echo "import a defconfig file"
+			if [[ -e "${DEFCONFIG}" ]];then
+				DEFCONF="${DEFCONFIG##*/}"
+				echo "import $DEFCONF ($DEFCONFIG)"
+				make ${DEFCONF}
+				if [[ -n "$disable" ]];then
+					disable_option "$disable"
+				fi
+			else
+				echo "file ${DEFCONFIG} not found"
+			fi
+			;;
+
+		"importfullconfig")
+			echo "import full config"
+			if [[ -e "${DEFCONFIG}" ]];then
+				tmpfile=${DEFCONFIG%/*}/temp_defconfig
+				cat $DEFCONFIG > ${tmpfile}
+				if [[ -e config_generic ]];then
+					echo "append generic config"
+					cat config_generic >> $tmpfile
+				fi
+				if [[ -e config_${board} ]];then
+					echo "append board config"
+					cat config_${board} >> $tmpfile
+				fi
+				make temp_defconfig
+			else
+				echo "file ${DEFCONFIG} not found"
+			fi
+			;;
+
+		"ic")
+			echo "menu for multiple conf-files...currently in developement"
+			files=();
+			i=1;
+			if [[ "$board" == "bpi-r2pro" ]];then
+				p=arch/arm64/configs/
+				ff=rk3568_bpi-r2p_defconfig
+			elif [[ "$board" == "bpi-r64" ]];then
+				p=arch/arm64/configs/
+				ff="mt7622*defconfig"
+			else
+				p=arch/arm/configs/
+				ff="mt7623n*defconfig"
+			fi
+			for f in $(cd $p; ls $ff)
+			do
+				echo "[$i] $f"
+				files+=($f)
+				i=$(($i+1))
+			done
+			read -n1 -p "choice [1..${#files[@]}]:" choice
+			echo
+			set -x
+			make ${files[$(($choice-1))]}
+			set +x
+		;;
+		"config")
+			echo "change kernel-configuration (menuconfig)"
+			make menuconfig
+			;;
+
+		"pack")
+			echo "Pack Kernel to Archive"
+			pack
+			;;
+
+		"pack_debs")
+			echo "Pack Kernel to linux-*.deb"
+			pack_debs
+			;;
+
+		"install")
+			echo "Install Kernel to SD Card"
+			install
+			;;
+
+		"upload")
+			echo "Upload Kernel to TFTP-Server"
+			upload
+			;;
+
+		"build")
+			echo "Build Kernel"
+			echo "building with ${numproc} threads"
+			time build
+			#$0 cryptodev
+			;;
+		"clean")
+			echo clean
+			make clean
+			if [[ "$builddir" != "" ]];then
+				rm -r $builddir/debian || true;
+			else
+				rm -r debian || true;
+			fi
+			;;
+		"spidev")
+			echo "Build SPIDEV-Test"
+			(
+				cd tools/spi;
+				make
+			)
+			;;
+
+		"cryptodev")
+			echo "Build CryptoDev"
+			cdbuildscript=utils/cryptodev/build.sh
+			if [[ -e $cdbuildscript ]];then
+				$cdbuildscript
+			fi
+			;;
+
+		"utils")
+			echo "Build utils"
+			( cd utils; make )
+			;;
+
+		"release")
+			echo "create release tag for travis-ci build"
+			release
+			;;
+		"all-pack")
+			echo "update repo, create kernel & build archive"
+			$0 update
+			$0 importconfig
+			$0 build
+			#$0 cryptodev
+			$0 pack
+			;;
+		"install_modules")
+				install_modules
+			;;
+		"mod2initrd")
+				mod2initrd
+			;;
+		"help")
+			echo "print help"
+			sed -n -e '/case "$action" in/,/esac/{//!p}'  $0 | grep -A1 '")$' | sed -e 's/echo "\(.*\)"/\1/'
+			;;
+		*)
+			if [[ -n "$action" ]];then
+				echo "unknown command $action";
+				exit 1;
+			fi;
+			$0 build
+			#$0 cryptodev
+			installchoice
+			;;
+	esac
+fi
-- 
2.30.2


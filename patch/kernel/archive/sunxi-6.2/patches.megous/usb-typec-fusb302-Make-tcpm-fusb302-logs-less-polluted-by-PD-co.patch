From 37b60acf11f43835ec252dc16dc74172e59e45a0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ond=C5=99ej=20Jirman?= <megi@xff.cz>
Date: Tue, 23 Nov 2021 17:58:05 +0100
Subject: [PATCH 347/391] usb: typec: fusb302: Make tcpm/fusb302 logs less
 polluted by PD comm stuff

This adds clarity to debugging.

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/usb/typec/tcpm/fusb302.c | 18 ++++++++++--------
 drivers/usb/typec/tcpm/tcpm.c    | 27 +++++++++++++++++----------
 2 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/drivers/usb/typec/tcpm/fusb302.c b/drivers/usb/typec/tcpm/fusb302.c
index 7cc8446ee..11d4f617a 100644
--- a/drivers/usb/typec/tcpm/fusb302.c
+++ b/drivers/usb/typec/tcpm/fusb302.c
@@ -787,7 +787,7 @@ static int tcpm_get_cc(struct tcpc_dev *dev, enum typec_cc_status *cc1,
 	mutex_lock(&chip->lock);
 	*cc1 = chip->cc1;
 	*cc2 = chip->cc2;
-	fusb302_log(chip, "cc1=%s, cc2=%s", typec_cc_status_name[*cc1],
+	fusb302_log(chip, "tcpm_get_cc => cc1=%s, cc2=%s (cached)", typec_cc_status_name[*cc1],
 		    typec_cc_status_name[*cc2]);
 	mutex_unlock(&chip->lock);
 
@@ -1073,8 +1073,8 @@ static int fusb302_pd_send_message(struct fusb302_chip *chip,
 	ret = fusb302_i2c_block_write(chip, FUSB_REG_FIFOS, pos, buf);
 	if (ret < 0)
 		return ret;
-	fusb302_log(chip, "sending PD message header: %x", msg->header);
-	fusb302_log(chip, "sending PD message len: %d", len);
+	//fusb302_log(chip, "sending PD message header: %x", msg->header);
+	//fusb302_log(chip, "sending PD message len: %d", len);
 
 	return ret;
 }
@@ -1365,8 +1365,10 @@ static int fusb302_get_src_cc_status(struct fusb302_chip *chip,
 	if (ret < 0)
 		return ret;
 
+	//XXX resolve activity conflicts while measuring
+
 	fusb302_i2c_read(chip, FUSB_REG_SWITCHES0, &status0);
-	fusb302_log(chip, "get_src_cc_status switches: 0x%0x", status0);
+	//fusb302_log(chip, "get_src_cc_status switches: 0x%0x", status0);
 
 	/* Step 2: Set compararator volt to differentiate between Open and Rd */
 	ret = fusb302_i2c_write(chip, FUSB_REG_MEASURE, rd_mda);
@@ -1378,7 +1380,7 @@ static int fusb302_get_src_cc_status(struct fusb302_chip *chip,
 	if (ret < 0)
 		return ret;
 
-	fusb302_log(chip, "get_src_cc_status rd_mda status0: 0x%0x", status0);
+	//fusb302_log(chip, "get_src_cc_status rd_mda status0: 0x%0x", status0);
 	if (status0 & FUSB_REG_STATUS0_COMP) {
 		*cc = TYPEC_CC_OPEN;
 		return 0;
@@ -1394,7 +1396,7 @@ static int fusb302_get_src_cc_status(struct fusb302_chip *chip,
 	if (ret < 0)
 		return ret;
 
-	fusb302_log(chip, "get_src_cc_status ra_mda status0: 0x%0x", status0);
+	//fusb302_log(chip, "get_src_cc_status ra_mda status0: 0x%0x", status0);
 	if (status0 & FUSB_REG_STATUS0_COMP)
 		*cc = TYPEC_CC_RD;
 	else
@@ -1559,8 +1561,8 @@ static int fusb302_pd_read_message(struct fusb302_chip *chip,
 	ret = fusb302_i2c_block_read(chip, FUSB_REG_FIFOS, 4, crc);
 	if (ret < 0)
 		return ret;
-	fusb302_log(chip, "PD message header: %x", msg->header);
-	fusb302_log(chip, "PD message len: %d", len);
+	//fusb302_log(chip, "PD message header: %x", msg->header);
+	//fusb302_log(chip, "PD message len: %d", len);
 
 	/*
 	 * Check if we've read off a GoodCRC message. If so then indicate to
diff --git a/drivers/usb/typec/tcpm/tcpm.c b/drivers/usb/typec/tcpm/tcpm.c
index 59b366b5c..083781d62 100644
--- a/drivers/usb/typec/tcpm/tcpm.c
+++ b/drivers/usb/typec/tcpm/tcpm.c
@@ -784,7 +784,7 @@ static void tcpm_debugfs_exit(const struct tcpm_port *port) { }
 
 static void tcpm_set_cc(struct tcpm_port *port, enum typec_cc_status cc)
 {
-	tcpm_log(port, "cc:=%d", cc);
+	//tcpm_log(port, "cc:=%d", cc);
 	port->cc_req = cc;
 	port->tcpc->set_cc(port->tcpc, cc);
 }
@@ -877,10 +877,13 @@ static int tcpm_pd_transmit(struct tcpm_port *port,
 	unsigned long timeout;
 	int ret;
 
-	if (msg)
+	if (msg) {
 		tcpm_log(port, "PD TX, header: %#x", le16_to_cpu(msg->header));
-	else
+		for (ret = 0; ret < pd_header_cnt_le(msg->header); ret++)
+			tcpm_log(port, "  tx payload[%d]: %#x", ret, le32_to_cpu(msg->payload[ret]));
+	} else {
 		tcpm_log(port, "PD TX, type: %#x", type);
+	}
 
 	reinit_completion(&port->tx_complete);
 	ret = port->tcpc->pd_transmit(port->tcpc, type, msg, port->negotiated_rev);
@@ -926,7 +929,7 @@ static int tcpm_pd_transmit(struct tcpm_port *port,
 void tcpm_pd_transmit_complete(struct tcpm_port *port,
 			       enum tcpm_transmit_status status)
 {
-	tcpm_log(port, "PD TX complete, status: %u", status);
+	//tcpm_log(port, "PD TX complete, status: %u", status);
 	port->tx_status = status;
 	complete(&port->tx_complete);
 }
@@ -959,7 +962,7 @@ static int tcpm_set_polarity(struct tcpm_port *port,
 {
 	int ret;
 
-	tcpm_log(port, "polarity %d", polarity);
+	//tcpm_log(port, "polarity %d", polarity);
 
 	ret = port->tcpc->set_polarity(port->tcpc, polarity);
 	if (ret < 0)
@@ -974,7 +977,7 @@ static int tcpm_set_vconn(struct tcpm_port *port, bool enable)
 {
 	int ret;
 
-	tcpm_log(port, "vconn:=%d", enable);
+	//tcpm_log(port, "vconn:=%d", enable);
 
 	ret = port->tcpc->set_vconn(port->tcpc, enable);
 	if (!ret) {
@@ -2929,8 +2932,8 @@ static void tcpm_pd_rx_handler(struct kthread_work *work)
 
 	mutex_lock(&port->lock);
 
-	tcpm_log(port, "PD RX, header: %#x [%d]", le16_to_cpu(msg->header),
-		 port->attached);
+	//tcpm_log(port, "PD RX, header: %#x [%d]", le16_to_cpu(msg->header),
+		 //port->attached);
 
 	if (port->attached) {
 		enum pd_ctrl_msg_type type = pd_header_type_le(msg->header);
@@ -2976,6 +2979,10 @@ static void tcpm_pd_rx_handler(struct kthread_work *work)
 void tcpm_pd_receive(struct tcpm_port *port, const struct pd_message *msg)
 {
 	struct pd_rx_event *event;
+	int ret;
+
+	for (ret = 0; ret < pd_header_cnt_le(msg->header); ret++)
+		tcpm_log(port, "  rx payload[%d]: %#x", ret, le32_to_cpu(msg->payload[ret]));
 
 	event = kzalloc(sizeof(*event), GFP_ATOMIC);
 	if (!event)
@@ -5107,7 +5114,7 @@ static void _tcpm_cc_change(struct tcpm_port *port, enum typec_cc_status cc1,
 
 static void _tcpm_pd_vbus_on(struct tcpm_port *port)
 {
-	tcpm_log_force(port, "VBUS on");
+	tcpm_log_force(port, "VBUS event received: on");
 	port->vbus_present = true;
 	/*
 	 * When vbus_present is true i.e. Voltage at VBUS is greater than VSAFE5V implicitly
@@ -5197,7 +5204,7 @@ static void _tcpm_pd_vbus_on(struct tcpm_port *port)
 
 static void _tcpm_pd_vbus_off(struct tcpm_port *port)
 {
-	tcpm_log_force(port, "VBUS off");
+	tcpm_log_force(port, "VBUS event received: off");
 	port->vbus_present = false;
 	port->vbus_never_low = false;
 	switch (port->state) {
-- 
2.35.3


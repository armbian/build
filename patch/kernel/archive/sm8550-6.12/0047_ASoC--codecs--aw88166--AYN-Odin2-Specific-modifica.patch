From 059f19790b3bbf807229e6777905869f8dd75f4d Mon Sep 17 00:00:00 2001
From: Teguh Sobirin <teguh@sobir.in>
Date: Fri, 21 Feb 2025 20:49:14 +0800
Subject: [PATCH] ASoC: codecs: aw88166: AYN Odin2 Specific modification

- AYN Odin2 have problem with regmap_raw_write
- Add .ops in aw88166_dai
- Remove .controls in soc_codec_dev_aw88166
- Add firmware-name support in device tree

Signed-off-by: Teguh Sobirin <teguh@sobir.in>
---
 sound/soc/codecs/aw88166.c | 365 ++++++++++---------------------------
 1 file changed, 93 insertions(+), 272 deletions(-)

diff --git a/sound/soc/codecs/aw88166.c b/sound/soc/codecs/aw88166.c
index 9f52d838e262..e2636bde62fc 100644
--- a/sound/soc/codecs/aw88166.c
+++ b/sound/soc/codecs/aw88166.c
@@ -12,6 +12,7 @@
 #include <linux/gpio/consumer.h>
 #include <linux/i2c.h>
 #include <linux/regmap.h>
+#include <sound/pcm_params.h>
 #include <sound/soc.h>
 #include "aw88166.h"
 #include "aw88395/aw88395_device.h"
@@ -902,9 +903,11 @@ static int aw88166_dev_start(struct aw88166 *aw88166)
 static int aw_dev_dsp_update_container(struct aw_device *aw_dev,
 			unsigned char *data, unsigned int len, unsigned short base)
 {
-	u32 tmp_len;
 	int i, ret;
 
+#ifdef AW88166_DSP_I2C_WRITES
+	u32 tmp_len;
+
 	mutex_lock(&aw_dev->dsp_lock);
 	ret = regmap_write(aw_dev->regmap, AW88166_DSPMADD_REG, base);
 	if (ret)
@@ -922,6 +925,23 @@ static int aw_dev_dsp_update_container(struct aw_device *aw_dev,
 			goto error_operation;
 	}
 	mutex_unlock(&aw_dev->dsp_lock);
+#else
+	__be16 reg_val;
+
+	mutex_lock(&aw_dev->dsp_lock);
+	/* i2c write */
+	ret = regmap_write(aw_dev->regmap, AW88166_DSPMADD_REG, base);
+	if (ret)
+		goto error_operation;
+	for (i = 0; i < len; i += 2) {
+		reg_val = cpu_to_be16p((u16 *)(data + i));
+		ret = regmap_write(aw_dev->regmap, AW88166_DSPMDAT_REG,
+					(u16)reg_val);
+		if (ret)
+			goto error_operation;
+	}
+	mutex_unlock(&aw_dev->dsp_lock);
+#endif
 
 	return 0;
 
@@ -1326,7 +1346,7 @@ static int aw_dev_check_sysint(struct aw_device *aw_dev)
 
 	aw_dev_get_int_status(aw_dev, &reg_val);
 	if (reg_val & AW88166_BIT_SYSINT_CHECK) {
-		dev_err(aw_dev->dev, "pa stop check fail:0x%04x\n", reg_val);
+		dev_dbg(aw_dev->dev, "pa stop check fail:0x%04x\n", reg_val);
 		return -EINVAL;
 	}
 
@@ -1372,286 +1392,97 @@ static int aw88166_stop(struct aw_device *aw_dev)
 	return 0;
 }
 
-static struct snd_soc_dai_driver aw88166_dai[] = {
-	{
-		.name = "aw88166-aif",
-		.id = 1,
-		.playback = {
-			.stream_name = "Speaker_Playback",
-			.channels_min = 1,
-			.channels_max = 2,
-			.rates = AW88166_RATES,
-			.formats = AW88166_FORMATS,
-		},
-		.capture = {
-			.stream_name = "Speaker_Capture",
-			.channels_min = 1,
-			.channels_max = 2,
-			.rates = AW88166_RATES,
-			.formats = AW88166_FORMATS,
-		},
-	},
-};
-
-static int aw88166_get_fade_in_time(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *component = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(component);
-	struct aw_device *aw_dev = aw88166->aw_pa;
-
-	ucontrol->value.integer.value[0] = aw_dev->fade_in_time;
-
-	return 0;
-}
-
-static int aw88166_set_fade_in_time(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
+static int aw88166_startup(struct snd_pcm_substream *substream,
+			struct snd_soc_dai *dai)
 {
-	struct snd_soc_component *component = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(component);
-	struct soc_mixer_control *mc =
-		(struct soc_mixer_control *)kcontrol->private_value;
-	struct aw_device *aw_dev = aw88166->aw_pa;
-	int time;
-
-	time = ucontrol->value.integer.value[0];
-
-	if (time < mc->min || time > mc->max)
-		return -EINVAL;
-
-	if (time != aw_dev->fade_in_time) {
-		aw_dev->fade_in_time = time;
-		return 1;
-	}
-
-	return 0;
-}
-
-static int aw88166_get_fade_out_time(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *component = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(component);
-	struct aw_device *aw_dev = aw88166->aw_pa;
-
-	ucontrol->value.integer.value[0] = aw_dev->fade_out_time;
-
-	return 0;
-}
-
-static int aw88166_set_fade_out_time(struct snd_kcontrol *kcontrol,
-	struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *component = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(component);
-	struct soc_mixer_control *mc =
-		(struct soc_mixer_control *)kcontrol->private_value;
-	struct aw_device *aw_dev = aw88166->aw_pa;
-	int time;
-
-	time = ucontrol->value.integer.value[0];
-	if (time < mc->min || time > mc->max)
-		return -EINVAL;
-
-	if (time != aw_dev->fade_out_time) {
-		aw_dev->fade_out_time = time;
-		return 1;
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		dev_dbg(dai->dev, "STREAM_PLAYBACK start");
+	} else {
+		dev_dbg(dai->dev, "STREAM_CAPTURE start");
 	}
-
-	return 0;
-}
-
-static int aw88166_dev_set_profile_index(struct aw_device *aw_dev, int index)
-{
-	/* check the index whether is valid */
-	if ((index >= aw_dev->prof_info.count) || (index < 0))
-		return -EINVAL;
-	/* check the index whether change */
-	if (aw_dev->prof_index == index)
-		return -EINVAL;
-
-	aw_dev->prof_index = index;
-	dev_dbg(aw_dev->dev, "set prof[%s]",
-		aw_dev->prof_info.prof_name_list[aw_dev->prof_info.prof_desc[index].id]);
-
 	return 0;
 }
 
-static int aw88166_profile_info(struct snd_kcontrol *kcontrol,
-			 struct snd_ctl_elem_info *uinfo)
+static int aw88166_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
 {
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	char *prof_name, *name;
-	int count, ret;
-
-	uinfo->type = SNDRV_CTL_ELEM_TYPE_ENUMERATED;
-	uinfo->count = 1;
-
-	count = aw88166->aw_pa->prof_info.count;
-	if (count <= 0) {
-		uinfo->value.enumerated.items = 0;
-		return 0;
-	}
-
-	uinfo->value.enumerated.items = count;
-
-	if (uinfo->value.enumerated.item >= count)
-		uinfo->value.enumerated.item = count - 1;
-
-	name = uinfo->value.enumerated.name;
-	count = uinfo->value.enumerated.item;
-
-	ret = aw88166_dev_get_prof_name(aw88166->aw_pa, count, &prof_name);
-	if (ret) {
-		strscpy(uinfo->value.enumerated.name, "null",
-						strlen("null") + 1);
-		return 0;
-	}
-
-	strscpy(name, prof_name, sizeof(uinfo->value.enumerated.name));
+	dev_dbg(dai->dev, "fmt=0x%x", fmt);
 
 	return 0;
 }
 
-static int aw88166_profile_get(struct snd_kcontrol *kcontrol,
-			struct snd_ctl_elem_value *ucontrol)
+static int aw88166_set_dai_sysclk(struct snd_soc_dai *dai,
+				int clk_id, unsigned int freq, int dir)
 {
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = aw88166->aw_pa->prof_index;
-
+	dev_dbg(dai->dev, "freq=%d", freq);
 	return 0;
 }
 
-static int aw88166_profile_set(struct snd_kcontrol *kcontrol,
-		struct snd_ctl_elem_value *ucontrol)
+static int aw88166_hw_params(struct snd_pcm_substream *substream,
+				struct snd_pcm_hw_params *params,
+				struct snd_soc_dai *dai)
 {
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	int ret;
-
-	mutex_lock(&aw88166->lock);
-	ret = aw88166_dev_set_profile_index(aw88166->aw_pa, ucontrol->value.integer.value[0]);
-	if (ret) {
-		dev_dbg(codec->dev, "profile index does not change");
-		mutex_unlock(&aw88166->lock);
-		return 0;
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+		dev_dbg(dai->dev,
+			"STREAM_CAPTURE requested rate: %d, width = %d",
+			params_rate(params), params_width(params));
 	}
 
-	if (aw88166->aw_pa->status) {
-		aw88166_stop(aw88166->aw_pa);
-		aw88166_start(aw88166, AW88166_SYNC_START);
-	}
-
-	mutex_unlock(&aw88166->lock);
-
-	return 1;
-}
-
-static int aw88166_volume_get(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	struct aw_volume_desc *vol_desc = &aw88166->aw_pa->volume_desc;
-
-	ucontrol->value.integer.value[0] = vol_desc->ctl_volume;
-
-	return 0;
-}
-
-static int aw88166_volume_set(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	struct aw_volume_desc *vol_desc = &aw88166->aw_pa->volume_desc;
-	struct soc_mixer_control *mc =
-		(struct soc_mixer_control *)kcontrol->private_value;
-	int value;
-
-	value = ucontrol->value.integer.value[0];
-	if (value < mc->min || value > mc->max)
-		return -EINVAL;
-
-	if (vol_desc->ctl_volume != value) {
-		vol_desc->ctl_volume = value;
-		aw_dev_set_volume(aw88166->aw_pa, vol_desc->ctl_volume);
-
-		return 1;
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		dev_dbg(dai->dev,
+			"STREAM_PLAYBACK requested rate: %d, width = %d",
+			params_rate(params), params_width(params));
 	}
 
 	return 0;
 }
 
-static int aw88166_get_fade_step(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
+static int aw88166_mute(struct snd_soc_dai *dai, int mute, int stream)
 {
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-
-	ucontrol->value.integer.value[0] = aw88166->aw_pa->fade_step;
+	dev_dbg(dai->dev, "mute state=%d", mute);
 
 	return 0;
 }
 
-static int aw88166_set_fade_step(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
+static void aw88166_shutdown(struct snd_pcm_substream *substream,
+				struct snd_soc_dai *dai)
 {
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	struct soc_mixer_control *mc =
-		(struct soc_mixer_control *)kcontrol->private_value;
-	int value;
-
-	value = ucontrol->value.integer.value[0];
-	if (value < mc->min || value > mc->max)
-		return -EINVAL;
-
-	if (aw88166->aw_pa->fade_step != value) {
-		aw88166->aw_pa->fade_step = value;
-		return 1;
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
+		dev_dbg(dai->dev, "STREAM_PLAYBACK stop");
+	} else {
+		dev_dbg(dai->dev, "STREAM_CAPTURE stop");
 	}
-
-	return 0;
 }
 
-static int aw88166_re_get(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	struct aw_device *aw_dev = aw88166->aw_pa;
-
-	ucontrol->value.integer.value[0] = aw_dev->cali_desc.cali_re;
-
-	return 0;
-}
-
-static int aw88166_re_set(struct snd_kcontrol *kcontrol,
-				struct snd_ctl_elem_value *ucontrol)
-{
-	struct snd_soc_component *codec = snd_soc_kcontrol_component(kcontrol);
-	struct aw88166 *aw88166 = snd_soc_component_get_drvdata(codec);
-	struct soc_mixer_control *mc =
-		(struct soc_mixer_control *)kcontrol->private_value;
-	struct aw_device *aw_dev = aw88166->aw_pa;
-	int value;
-
-	value = ucontrol->value.integer.value[0];
-	if (value < mc->min || value > mc->max)
-		return -EINVAL;
-
-	if (aw_dev->cali_desc.cali_re != value) {
-		aw_dev->cali_desc.cali_re = value;
-		return 1;
-	}
+static const struct snd_soc_dai_ops aw88166_dai_ops = {
+	.startup = aw88166_startup,
+	.set_fmt = aw88166_set_fmt,
+	.set_sysclk = aw88166_set_dai_sysclk,
+	.hw_params = aw88166_hw_params,
+	.mute_stream = aw88166_mute,
+	.shutdown = aw88166_shutdown,
+};
 
-	return 0;
-}
+static struct snd_soc_dai_driver aw88166_dai[] = {
+	{
+		.name = "aw88166-aif",
+		.id = 1,
+		.playback = {
+			.stream_name = "Speaker_Playback",
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = AW88166_RATES,
+			.formats = AW88166_FORMATS,
+		},
+		.capture = {
+			.stream_name = "Speaker_Capture",
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = AW88166_RATES,
+			.formats = AW88166_FORMATS,
+		},
+		.ops = &aw88166_dai_ops,
+	},
+};
 
 static int aw88166_dev_init(struct aw88166 *aw88166, struct aw_container *aw_cfg)
 {
@@ -1693,19 +1524,27 @@ static int aw88166_dev_init(struct aw88166 *aw88166, struct aw_container *aw_cfg
 
 static int aw88166_request_firmware_file(struct aw88166 *aw88166)
 {
+	struct aw_device *aw_dev = aw88166->aw_pa;
+	struct device_node *np = aw_dev->dev->of_node;
 	const struct firmware *cont = NULL;
+	const char *fw_name;
 	int ret;
 
 	aw88166->aw_pa->fw_status = AW88166_DEV_FW_FAILED;
 
-	ret = request_firmware(&cont, AW88166_ACF_FILE, aw88166->aw_pa->dev);
+	ret = of_property_read_string(np, "firmware-name", &fw_name);
+	if (ret < 0) {
+		fw_name = AW88166_ACF_FILE;
+	}
+
+	ret = request_firmware(&cont, fw_name, aw88166->aw_pa->dev);
 	if (ret) {
-		dev_err(aw88166->aw_pa->dev, "request [%s] failed!\n", AW88166_ACF_FILE);
+		dev_err(aw88166->aw_pa->dev, "request [%s] failed!\n", fw_name);
 		return ret;
 	}
 
 	dev_dbg(aw88166->aw_pa->dev, "loaded %s - size: %zu\n",
-			AW88166_ACF_FILE, cont ? cont->size : 0);
+			fw_name, cont ? cont->size : 0);
 
 	aw88166->aw_cfg = devm_kzalloc(aw88166->aw_pa->dev,
 			struct_size(aw88166->aw_cfg, data, cont->size), GFP_KERNEL);
@@ -1719,7 +1558,7 @@ static int aw88166_request_firmware_file(struct aw88166 *aw88166)
 
 	ret = aw88395_dev_load_acf_check(aw88166->aw_pa, aw88166->aw_cfg);
 	if (ret) {
-		dev_err(aw88166->aw_pa->dev, "load [%s] failed!\n", AW88166_ACF_FILE);
+		dev_err(aw88166->aw_pa->dev, "load [%s] failed!\n", fw_name);
 		return ret;
 	}
 
@@ -1733,22 +1572,6 @@ static int aw88166_request_firmware_file(struct aw88166 *aw88166)
 	return ret;
 }
 
-static const struct snd_kcontrol_new aw88166_controls[] = {
-	SOC_SINGLE_EXT("PCM Playback Volume", AW88166_SYSCTRL2_REG,
-		6, AW88166_MUTE_VOL, 0, aw88166_volume_get,
-		aw88166_volume_set),
-	SOC_SINGLE_EXT("Fade Step", 0, 0, AW88166_MUTE_VOL, 0,
-		aw88166_get_fade_step, aw88166_set_fade_step),
-	SOC_SINGLE_EXT("Volume Ramp Up Step", 0, 0, FADE_TIME_MAX, FADE_TIME_MIN,
-		aw88166_get_fade_in_time, aw88166_set_fade_in_time),
-	SOC_SINGLE_EXT("Volume Ramp Down Step", 0, 0, FADE_TIME_MAX, FADE_TIME_MIN,
-		aw88166_get_fade_out_time, aw88166_set_fade_out_time),
-	SOC_SINGLE_EXT("Calib", 0, 0, AW88166_CALI_RE_MAX, 0,
-		aw88166_re_get, aw88166_re_set),
-	AW88166_PROFILE_EXT("AW88166 Profile Set", aw88166_profile_info,
-		aw88166_profile_get, aw88166_profile_set),
-};
-
 static int aw88166_playback_event(struct snd_soc_dapm_widget *w,
 				struct snd_kcontrol *k, int event)
 {
@@ -1816,8 +1639,6 @@ static const struct snd_soc_component_driver soc_codec_dev_aw88166 = {
 	.num_dapm_widgets = ARRAY_SIZE(aw88166_dapm_widgets),
 	.dapm_routes = aw88166_audio_map,
 	.num_dapm_routes = ARRAY_SIZE(aw88166_audio_map),
-	.controls = aw88166_controls,
-	.num_controls = ARRAY_SIZE(aw88166_controls),
 };
 
 static void aw88166_hw_reset(struct aw88166 *aw88166)
-- 
2.34.1


diff --git a/arch/arm64/boot/dts/rockchip/overlay/Makefile b/arch/arm64/boot/dts/rockchip/overlay/Makefile
index f11aa6d57..badb15519 100644
--- a/arch/arm64/boot/dts/rockchip/overlay/Makefile
+++ b/arch/arm64/boot/dts/rockchip/overlay/Makefile
@@ -19,7 +19,11 @@ dtbo-$(CONFIG_ARCH_ROCKCHIP) += \
 	rockchip-rk3318-box-wlan-ext.dtbo \
 	rockchip-rk3318-box-wlan-ap6330.dtbo \
 	rockchip-rk3318-box-cpu-hs.dtbo \
-	rockchip-rk3318-box-emmc-hs200.dtbo
+	rockchip-rk3318-box-emmc-hs200.dtbo \
+        rk3308-bs.dtbo rk3308-bs@1.3ghz.dtbo \
+        rk3308-sdio@10mhz.dtbo rk3308-sdio@4mhz.dtbo \
+        rk3308-emmc.dtbo
+        
 
 scr-$(CONFIG_ARCH_ROCKCHIP) += \
        rockchip-fixup.scr
diff --git a/arch/arm64/boot/dts/rockchip/overlay/README.rockchip-overlays b/arch/arm64/boot/dts/rockchip/overlay/README.rockchip-overlays
index 27f945d38..d21fed1ff 100644
--- a/arch/arm64/boot/dts/rockchip/overlay/README.rockchip-overlays
+++ b/arch/arm64/boot/dts/rockchip/overlay/README.rockchip-overlays
@@ -10,6 +10,10 @@ rockchip (Rockchip)
 
 - i2c7, i2c8, pcie-gen2, spi-spidev, uart4, w1-gpio
 
+for RK3308 (Rock PI-S)
+
+- rk3308bs rk3308bs-1.3ghz sdio-10mhz sdio-4mhz emmc
+
 ### Overlay details:
 
 ### i2c7
@@ -166,3 +170,40 @@ wifi + bt chip and clones.
 ### rk3318-box-cpu-hs
 
 Enable additional cpu "high-speed" bins up to 1.3ghz
+
+**********************************
+Details for Rock Pi-S overlays  (7 Oct 2022):
+
+V1.3 of the RockPi-S uses a the B-S variant of the RK3308 that is optimized
+for lower core voltages than the older chips on the V1.2 and V1.1 boards.
+All V1.3 boards should apply the
+###  rk3308-bs
+overlay to lower the core voltages to reduce power consumption.
+This also enables operation at 1.1Ghz.
+
+Optionally, V1.3 boards may add the
+###  rk3308-bs@1.3ghz
+to overclock the B-S CPU to 1.3Ghz.
+Add the rk3308bs-rock-pi-s-1.3Ghz overlay  *after adding*  rockchip-rk3308bs
+
+===========
+Install the following overlays only on older (unpatched) mainline kernels:
+
+Older mainline kernels disable the Rock Pi S built-in SDNAND (EMMC)
+###  rk3308-emmc
+enables your SDNAND chip.  It is OK to install for boards that lack the SDNAND.
+
+The legacy 4.4 and this mainline kernel drive the SDIO clock at 50Mhz to provide
+maximum WiFi throughput.  However...
+
+Older versions of the Mainline kernel drive the SDIO clock at only 1Mhz
+This reduces WiFi throughput to < 500kB/s !
+
+###  rk3308-sdio@10mhz
+increases the SDIO clock to 10Mhz, providing about 2.4MB/s WiFi throughput.
+
+###  rk3308-sdio@4mhz
+increases the SDIO clock to only 4Mhz, providing about 1MB/s WiFi throughput.
+use this only if 10Mhz SDIO clock is unstable
+
+Note that older mainline kernels cannot drive the SDIO clock faster than 10Mhz.
diff --git a/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs.dts b/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs.dts
new file mode 100644
index 000000000..978f67947
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs.dts
@@ -0,0 +1,39 @@
+//Adjustments for Rockchip RK3308-BS suffix SOC
+//https://dl.radxa.com/rockpis/docs/sw/RK3308B-S&RK3308H-S_Software_Compatibility_Introduction_V1.0.0_20211016.pdf
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	fragment@0 {
+		target = <&cpu0_opp_table>;
+		__overlay__ {
+			opp-408000000 {
+				opp-hz = /bits/ 64 <408000000>;
+				opp-microvolt = <850000 850000 1200000>;
+				clock-latency-ns = <40000>;
+				opp-suspend;
+			};
+			opp-600000000 {
+				opp-hz = /bits/ 64 <600000000>;
+				opp-microvolt = <900000 900000 1200000>;
+				clock-latency-ns = <40000>;
+			};
+			opp-816000000 {
+				opp-hz = /bits/ 64 <816000000>;
+				opp-microvolt = <1000000 1000000 1200000>;
+				clock-latency-ns = <40000>;
+			};
+			opp-1008000000 {
+				opp-hz = /bits/ 64 <1008000000>;
+				opp-microvolt = <1125000 1125000 1200000>;
+				clock-latency-ns = <40000>;
+			};
+			opp-1104000000 {
+				opp-hz = /bits/ 64 <1104000000>;
+				opp-microvolt = <1200000 1200000 1200000>;
+				clock-latency-ns = <40000>;
+			};
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs@1.3ghz.dts b/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs@1.3ghz.dts
new file mode 100644
index 000000000..3fae0dd23
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/overlay/rk3308-bs@1.3ghz.dts
@@ -0,0 +1,26 @@
+//Overclock the Rockchip RK3308-BS suffix SOC to 1.3 Ghz
+//  assumes rk3308bs-rock-pi-s.dts overlay has already been added
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	fragment@0 {
+		target = <&cpu0_opp_table>;
+		__overlay__ {
+			//the following are unsupported, overclocked operating points
+			opp-1200000000 {
+				opp-hz = /bits/ 64 <1200000000>;
+				opp-microvolt = <1200000 1200000 1200000>;
+				clock-latency-ns = <40000>;
+				status = "okay";
+			};
+			opp-1296000000 {
+				opp-hz = /bits/ 64 <1296000000>;
+				opp-microvolt = <1200000 1200000 1200000>;
+				clock-latency-ns = <40000>;
+				status = "okay";
+			};
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/rockchip/overlay/rk3308-emmc.dts b/arch/arm64/boot/dts/rockchip/overlay/rk3308-emmc.dts
new file mode 100644
index 000000000..4a4c3804d
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/overlay/rk3308-emmc.dts
@@ -0,0 +1,13 @@
+//For RockPI-S:  enable SDnand chip
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	fragment@0 {
+		target = <&emmc>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@10mhz.dts b/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@10mhz.dts
new file mode 100644
index 000000000..c7f2e280f
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@10mhz.dts
@@ -0,0 +1,14 @@
+//For RockPI-S:  Increase SDIO Max Frequency from 1Mhz to 10Mhz
+//Increases RTL8723-BS WiFi's throughput from 300KB/s to 2.4MB/s
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	fragment@0 {
+		target = <&sdio>;
+		__overlay__ {
+			max-frequency = <10000000>;
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@4mhz.dts b/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@4mhz.dts
new file mode 100644
index 000000000..efcc5c265
--- /dev/null
+++ b/arch/arm64/boot/dts/rockchip/overlay/rk3308-sdio@4mhz.dts
@@ -0,0 +1,14 @@
+//For RockPI-S:  Increase SDIO Max Frequency from 1Mhz to 4Mhz
+//Increases RTL8723-BS WiFi's throughput from 300KB/s to 1MB/s
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	fragment@0 {
+		target = <&sdio>;
+		__overlay__ {
+			max-frequency = <4000000>;
+		};
+	};
+};
diff --git a/arch/arm64/boot/dts/rockchip/rk3308-rock-pi-s.dts b/arch/arm64/boot/dts/rockchip/rk3308-rock-pi-s.dts
index 880976849..a7ecfb188 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308-rock-pi-s.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3308-rock-pi-s.dts
@@ -192,13 +192,9 @@ &cpu0 {
 };
 
 &emmc {
-	bus-width = <4>;  // Confirm if right value - <8>
+	bus-width = <4>;
 	cap-mmc-highspeed;
-	mmc-hs200-1_8v;
-	/* supports-sd; */
-	/* disable-wp; */
 	non-removable;
-	/* num-slots = <1>; */
 	/* please provide actual vmmc and vqmmc supplies
 	vin is not a valid supply for emmcs */
 	vin-supply = <&vcc_io>;
@@ -210,13 +206,9 @@ &i2c1 {
 };
 
 &sdmmc {
-	/* bus-width = <4>; */
 	cap-mmc-highspeed;
 	cap-sd-highspeed;
-	/* max-frequency = <150000000>; */
-	/* supports-sd; */
 	disable-wp;
-	/* num-slots = <1>; */
 	pinctrl-0 = <&sdmmc_clk &sdmmc_cmd &sdmmc_det &sdmmc_bus4>;
 	card-detect-delay = <800>; // Confirm if right value - <200>
 	status = "okay";
@@ -233,6 +225,16 @@ &gmac {
 	status = "okay";
 };
 
+&io_domains {
+	vccio0-supply = <&vcc_io>;
+	vccio1-supply = <&vcc_io>;
+	vccio2-supply = <&vcc_io>;
+	vccio3-supply = <&vcc_io>;
+	vccio4-supply = <&vcc_1v8>;
+	vccio5-supply = <&vcc_io>;
+	status = "okay";
+};
+
 &i2s_8ch_0 {
 	assigned-clocks = <&cru SCLK_I2S0_8CH_RX>;
 	assigned-clock-parents = <&cru SCLK_I2S0_8CH_TX_MUX>;
@@ -246,7 +248,7 @@ &i2s_8ch_2 {
 };
 
 &spi2 {
-	status = "okay";
+//	status = "okay";  //conflicts with UART2
 	max-freq = <10000000>;
 };
 
@@ -296,15 +298,12 @@ &saradc {
 &sdio {
 	#address-cells = <1>;
 	#size-cells = <0>;
-	/* bus-width = <4>;  */
-	max-frequency = <1000000>;
 	cap-sd-highspeed;
 	cap-sdio-irq;
-	/* supports-sdio; */
 	keep-power-in-suspend;
 	mmc-pwrseq = <&sdio_pwrseq>;
 	non-removable;
-	sd-uhs-sdr104;
+	no-mmc;
 	status = "okay";
 
 	rtl8723ds: wifi@1 {
diff --git a/arch/arm64/boot/dts/rockchip/rk3308.dtsi b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
index fd8685d7c..b1cf9fa77 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
@@ -216,6 +216,11 @@ grf: grf@ff000000 {
 		compatible = "rockchip,rk3308-grf", "syscon", "simple-mfd";
 		reg = <0x0 0xff000000 0x0 0x08000>;
 
+		io_domains: io-domains {
+			compatible = "rockchip,rk3308-io-voltage-domain";
+			status = "disabled";
+		};
+
 		reboot-mode {
 			compatible = "syscon-reboot-mode";
 			offset = <0x500>;
diff --git a/drivers/pinctrl/pinconf-generic.c b/drivers/pinctrl/pinconf-generic.c
index 415d1df8f..45ca3505f 100644
--- a/drivers/pinctrl/pinconf-generic.c
+++ b/drivers/pinctrl/pinconf-generic.c
@@ -51,6 +51,7 @@ static const struct pin_config_item conf_items[] = {
 	PCONFDUMP(PIN_CONFIG_SLEEP_HARDWARE_STATE, "sleep hardware state", NULL, false),
 	PCONFDUMP(PIN_CONFIG_SLEW_RATE, "slew rate", NULL, true),
 	PCONFDUMP(PIN_CONFIG_SKEW_DELAY, "skew delay", NULL, true),
+	PCONFDUMP(PIN_CONFIG_MUX, "mux", NULL, true),
 };
 
 static void pinconf_generic_dump_one(struct pinctrl_dev *pctldev,
diff --git a/drivers/pinctrl/pinctrl-rockchip.c b/drivers/pinctrl/pinctrl-rockchip.c
index 32e41395f..f1fed12c4 100644
--- a/drivers/pinctrl/pinctrl-rockchip.c
+++ b/drivers/pinctrl/pinctrl-rockchip.c
@@ -2213,6 +2213,26 @@ static int rockchip_set_pull(struct rockchip_pin_bank *bank,
 	return ret;
 }
 
+#define RK3308_SLEW_PINS_PER_REG	8
+#define RK3308_SLEW_BANK_STRIDE		16
+#define RK3308_SLEW_GRF_OFFSET		0x150
+
+static int rk3308_calc_slew_reg_and_bit(struct rockchip_pin_bank *bank,
+				    int pin_num, struct regmap **regmap,
+				    int *reg, u8 *bit)
+{
+	struct rockchip_pinctrl *info = bank->drvdata;
+
+	*regmap = info->regmap_base;
+	*reg = RK3308_SLEW_GRF_OFFSET;
+
+	*reg += bank->bank_num * RK3308_SLEW_BANK_STRIDE;
+	*reg += ((pin_num / RK3308_SLEW_PINS_PER_REG) * 4);
+	*bit = pin_num % RK3308_SLEW_PINS_PER_REG;
+
+	return 0;
+}
+
 #define RK3328_SCHMITT_BITS_PER_PIN		1
 #define RK3328_SCHMITT_PINS_PER_REG		16
 #define RK3328_SCHMITT_BANK_STRIDE		8
@@ -2326,6 +2346,51 @@ static int rockchip_set_schmitt(struct rockchip_pin_bank *bank,
 	return regmap_update_bits(regmap, reg, rmask, data);
 }
 
+static int rockchip_get_slew_rate(struct rockchip_pin_bank *bank, int pin_num)
+{
+	struct rockchip_pinctrl *info = bank->drvdata;
+	struct rockchip_pin_ctrl *ctrl = info->ctrl;
+	struct regmap *regmap;
+	int reg, ret;
+	u8 bit;
+	u32 data;
+
+	ret = ctrl->slew_rate_calc_reg(bank, pin_num, &regmap, &reg, &bit);
+	if (ret)
+		return ret;
+
+	ret = regmap_read(regmap, reg, &data);
+	if (ret)
+		return ret;
+
+	data >>= bit;
+	return data & 0x1;
+}
+
+static int rockchip_set_slew_rate(struct rockchip_pin_bank *bank,
+				  int pin_num, int speed)
+{
+	struct rockchip_pinctrl *info = bank->drvdata;
+	struct rockchip_pin_ctrl *ctrl = info->ctrl;
+	struct regmap *regmap;
+	int reg, ret;
+	u8 bit;
+	u32 data, rmask;
+
+	dev_dbg(info->dev, "setting slew rate of GPIO%d-%d to %d\n",
+		bank->bank_num, pin_num, speed);
+
+	ret = ctrl->slew_rate_calc_reg(bank, pin_num, &regmap, &reg, &bit);
+	if (ret)
+		return ret;
+
+	/* enable the write to the equivalent lower bits */
+	data = BIT(bit + 16) | (speed << bit);
+	rmask = BIT(bit + 16) | BIT(bit);
+
+	return regmap_update_bits(regmap, reg, rmask, data);
+}
+
 /*
  * Pinmux_ops handling
  */
@@ -2544,6 +2609,15 @@ static int rockchip_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin,
 			if (rc < 0)
 				return rc;
 			break;
+		case PIN_CONFIG_SLEW_RATE:
+			if (!info->ctrl->slew_rate_calc_reg)
+				return -ENOTSUPP;
+
+			rc = rockchip_set_slew_rate(bank,
+						    pin - bank->pin_base, arg);
+			if (rc < 0)
+				return rc;
+			break;
 		default:
 			return -ENOTSUPP;
 			break;
@@ -2618,6 +2692,26 @@ static int rockchip_pinconf_get(struct pinctrl_dev *pctldev, unsigned int pin,
 		if (rc < 0)
 			return rc;
 
+		arg = rc;
+		break;
+	case PIN_CONFIG_SLEW_RATE:
+		if (!info->ctrl->slew_rate_calc_reg)
+			return -ENOTSUPP;
+
+		rc = rockchip_get_slew_rate(bank, pin - bank->pin_base);
+		if (rc < 0)
+			return rc;
+
+		arg = rc;
+		break;
+	case PIN_CONFIG_MUX:
+		if (!info->ctrl->schmitt_calc_reg)
+			return -ENOTSUPP;
+
+		rc = rockchip_get_mux(bank, pin - bank->pin_base);
+		if (rc < 0)
+			return rc;
+
 		arg = rc;
 		break;
 	default:
@@ -3380,6 +3474,7 @@ static struct rockchip_pin_ctrl rk3308_pin_ctrl = {
 		.pull_calc_reg		= rk3308_calc_pull_reg_and_bit,
 		.drv_calc_reg		= rk3308_calc_drv_reg_and_bit,
 		.schmitt_calc_reg	= rk3308_calc_schmitt_reg_and_bit,
+		.slew_rate_calc_reg	= rk3308_calc_slew_reg_and_bit,
 };
 
 static struct rockchip_pin_bank rk3328_pin_banks[] = {
diff --git a/drivers/pinctrl/pinctrl-rockchip.h b/drivers/pinctrl/pinctrl-rockchip.h
index ec46f8815..890c1b09e 100644
--- a/drivers/pinctrl/pinctrl-rockchip.h
+++ b/drivers/pinctrl/pinctrl-rockchip.h
@@ -405,6 +405,9 @@ struct rockchip_pin_ctrl {
 	int	(*schmitt_calc_reg)(struct rockchip_pin_bank *bank,
 				    int pin_num, struct regmap **regmap,
 				    int *reg, u8 *bit);
+	int	(*slew_rate_calc_reg)(struct rockchip_pin_bank *bank,
+				      int pin_num, struct regmap **regmap,
+				      int *reg, u8 *bit);
 };
 
 struct rockchip_pin_config {
diff --git a/drivers/soc/rockchip/io-domain.c b/drivers/soc/rockchip/io-domain.c
index 9df513d12..83f5354ba 100644
--- a/drivers/soc/rockchip/io-domain.c
+++ b/drivers/soc/rockchip/io-domain.c
@@ -39,6 +39,10 @@
 #define RK3288_SOC_CON2_FLASH0		BIT(7)
 #define RK3288_SOC_FLASH_SUPPLY_NUM	2
 
+#define RK3308_SOC_CON0			0x300
+#define RK3308_SOC_CON0_VCCIO3		BIT(8)
+#define RK3308_SOC_VCCIO3_SUPPLY_NUM	3
+
 #define RK3328_SOC_CON4			0x410
 #define RK3328_SOC_CON4_VCCIO2		BIT(7)
 #define RK3328_SOC_VCCIO2_SUPPLY_NUM	1
@@ -229,6 +233,30 @@ static void rk3288_iodomain_init(struct rockchip_iodomain *iod)
 		dev_warn(iod->dev, "couldn't update flash0 ctrl\n");
 }
 
+static void rk3308_iodomain_init(struct rockchip_iodomain *iod)
+{
+	int ret;
+	u32 val;
+
+	/* if no vccio3 supply we should leave things alone */
+	if (!iod->supplies[RK3308_SOC_VCCIO3_SUPPLY_NUM].reg)
+		return;
+
+	/*
+	 * vccio3 iodomain voltage should be determined by GPIO4 input state
+	 * RockPI-S uses this to drive the SDIO interface at 50Mhz
+	 * (otherwise SDIO clock will be limited to 10Mhz)
+	 *
+	 * Note that setting vccio4 [rather than vccio3] is observed to reduce
+	 * the rise time of SDIO-clk from 30ns to 5ns.
+	 * The CON0_VCCIO3 control bit appears to influence vccio4.
+	 */
+	val = RK3308_SOC_CON0_VCCIO3 | (RK3308_SOC_CON0_VCCIO3 << 16);
+	ret = regmap_write(iod->grf, RK3308_SOC_CON0, val);
+	if (ret < 0)
+		dev_warn(iod->dev, "couldn't update vccio3 vsel ctrl\n");
+}
+
 static void rk3328_iodomain_init(struct rockchip_iodomain *iod)
 {
 	int ret;
@@ -376,6 +404,19 @@ static const struct rockchip_iodomain_soc_data soc_data_rk3288 = {
 	.init = rk3288_iodomain_init,
 };
 
+static const struct rockchip_iodomain_soc_data soc_data_rk3308 = {
+	.grf_offset = 0x300,
+	.supply_names = {
+		"vccio0",
+		"vccio1",
+		"vccio2",
+		"vccio3",
+		"vccio4",
+		"vccio5",
+	},
+	.init = rk3308_iodomain_init,
+};
+
 static const struct rockchip_iodomain_soc_data soc_data_rk3328 = {
 	.grf_offset = 0x410,
 	.supply_names = {
@@ -512,6 +553,10 @@ static const struct of_device_id rockchip_iodomain_match[] = {
 		.compatible = "rockchip,rk3288-io-voltage-domain",
 		.data = &soc_data_rk3288
 	},
+	{
+		.compatible = "rockchip,rk3308-io-voltage-domain",
+		.data = &soc_data_rk3308
+	},
 	{
 		.compatible = "rockchip,rk3328-io-voltage-domain",
 		.data = &soc_data_rk3328
diff --git a/include/linux/pinctrl/pinconf-generic.h b/include/linux/pinctrl/pinconf-generic.h
index 2422211d6..a8b9b6c2b 100644
--- a/include/linux/pinctrl/pinconf-generic.h
+++ b/include/linux/pinctrl/pinconf-generic.h
@@ -137,6 +137,7 @@ enum pin_config_param {
 	PIN_CONFIG_SKEW_DELAY,
 	PIN_CONFIG_SLEEP_HARDWARE_STATE,
 	PIN_CONFIG_SLEW_RATE,
+	PIN_CONFIG_MUX,
 	PIN_CONFIG_END = 0x7F,
 	PIN_CONFIG_MAX = 0xFF,
 };

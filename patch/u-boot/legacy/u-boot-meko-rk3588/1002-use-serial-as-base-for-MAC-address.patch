From fdd68a2b06862cd2229d77e463eb10a7ecef26db Mon Sep 17 00:00:00 2001
From: Ricardo Pardini <ricardo@pardini.net>
Date: Fri, 30 Jun 2023 17:30:37 +0200
Subject: [PATCH 1002/1006] use serial# as base for MAC address

---
 arch/arm/mach-rockchip/board.c | 35 ++++++++++++++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mach-rockchip/board.c b/arch/arm/mach-rockchip/board.c
index 8797ad3436..6c8d96a60e 100644
--- a/arch/arm/mach-rockchip/board.c
+++ b/arch/arm/mach-rockchip/board.c
@@ -109,8 +109,31 @@ static int rockchip_set_ethaddr(void)
 	char buf[ARP_HLEN_ASCII + 1], mac[16];
 	u8 ethaddr[ARP_HLEN * MAX_ETHERNET] = {0};
 	int i, ret = -EINVAL;
+	u8 serial_checksum[ARP_HLEN] = {0};
 
 	printf("%s: starting ethernet MAC set\n", __func__);
+	
+	char *serial;
+	serial = env_get("serial#");
+	if (serial) {
+		printf("%s: serial# for eth base is %s\n", __func__, serial);
+		// checksum the serial# and obtain 6 bytes from it (ARP_HLEN)
+		// Initialize checksum bytes to zero
+		for (int i = 0; i < 6; i++) {
+			serial_checksum[i] = 0;
+		}
+		// Iterate over each character in the serial array
+		for (int i = 0; serial[i] != '\0'; i++) {
+			printf("%s: checksumming serial digit %d\n", __func__, i);
+			int index = i % 6;  // Calculate the appropriate index in the checksum array
+			serial_checksum[index] ^= serial[i];  // Perform XOR operation
+		}
+		serial_checksum[0] &= 0xfe;	/* clear multicast bit */
+		serial_checksum[0] |= 0x02;	/* set local assignment bit (IEEE802) */
+	} else {
+		printf("%s: serial# for eth base not available\n", __func__);
+	}
+	
 
 #ifdef CONFIG_ROCKCHIP_VENDOR_PARTITION
 	printf("%s: going for vendor_storage_read\n", __func__);
@@ -122,10 +145,18 @@ static int rockchip_set_ethaddr(void)
 		printf("%s: looping... %d and ret %d\n", __func__, i, ret);
 		if (ret <= 0 || !is_valid_ethaddr(&ethaddr[i * ARP_HLEN])) {
 			if (!randomed) {
-				net_random_ethaddr(&ethaddr[i * ARP_HLEN]);
+				if (serial) {
+					// copy the checksum bytes into the ethaddr array
+					printf("%s: using SERIAL as base for MAC\n", __func__);
+					memcpy(&ethaddr[i * ARP_HLEN], serial_checksum, ARP_HLEN);
+					printf("%s: used SERIAL as base for MAC\n", __func__);
+				} else {
+					printf("%s: generating RANDOM MAC\n", __func__);
+					net_random_ethaddr(&ethaddr[i * ARP_HLEN]);
+				}
 				randomed = true;
 				printf
-				    ("%s: looping... generated RANDOMED... %d and ret %d\n",
+				    ("%s: looping... generated SERIAL or RANDOMED... %d and ret %d\n",
 				     __func__, i, ret);
 			} else {
 				if (i > 0) {
-- 
2.40.1


diff --git a/arch/arm/mach-rockchip/rk3588/rk3588.c b/arch/arm/mach-rockchip/rk3588/rk3588.c
index f7928a7f2..3c4d1e2f2 100644
--- a/arch/arm/mach-rockchip/rk3588/rk3588.c
+++ b/arch/arm/mach-rockchip/rk3588/rk3588.c
@@ -1067,6 +1067,7 @@ int arch_cpu_init(void)
 #endif
 
 #define BAD_CPU(mask, n)	((mask) & (1 << (n)))
+#define BAD_GPU(mask, n)	((mask) & (1 << (n)))
 #define BAD_RKVENC(mask, n)	((mask) & (1 << (n)))
 #define BAD_RKVDEC(mask, n)	((mask) & (1 << (n)))
 
@@ -1220,51 +1221,54 @@ static void fdt_rm_cpu(const void *blob, u8 cpu_mask)
 
 static void rk3582_fdt_rm_cpus(const void *blob, u8 cpu_mask)
 {
-	/*
-	 * policy:
-	 *
-	 * 1. both of cores within the same cluster should be normal, otherwise
-	 *    remove both of them.
-	 * 2. if core4~7 are all normal, remove core6 and core7 anyway.
-	 */
-	if (BAD_CPU(cpu_mask, 4) || BAD_CPU(cpu_mask, 5))
-		cpu_mask |= BIT(4) | BIT(5);
-	if (BAD_CPU(cpu_mask, 6) || BAD_CPU(cpu_mask, 7))
-		cpu_mask |= BIT(6) | BIT(7);
-
-	if (!BAD_CPU(cpu_mask, 4) & !BAD_CPU(cpu_mask, 5) &&
-	    !BAD_CPU(cpu_mask, 6) & !BAD_CPU(cpu_mask, 7))
-		cpu_mask |= BIT(6) | BIT(7);
+	if (BAD_CPU(cpu_mask, 4))
+		cpu_mask |= BIT(4);
+	if (BAD_CPU(cpu_mask, 5))
+		cpu_mask |= BIT(5);
+	if (BAD_CPU(cpu_mask, 6))
+		cpu_mask |= BIT(6);
+	if (BAD_CPU(cpu_mask, 7))
+		cpu_mask |= BIT(7);
 
 	fdt_rm_cooling_map(blob, cpu_mask);
 	fdt_rm_cpu_affinity(blob, cpu_mask);
 	fdt_rm_cpu(blob, cpu_mask);
 }
 
-static void rk3582_fdt_rm_gpu(void *blob)
+static void rk3582_fdt_rm_gpu(void *blob, u8 mask)
 {
-	/*
-	 * policy:
-	 *
-	 * Remove GPU by default.
-	 */
-	fdt_rm_path(blob, "/gpu@fb000000");
-	fdt_rm_path(blob, "/thermal-zones/soc-thermal/cooling-maps/map3");
-	debug("rm: gpu\n");
+	/* If one core is bad, disable gpu */
+	if ((BAD_GPU(mask, 0)) || (BAD_GPU(mask, 1)) || (BAD_GPU(mask, 2)) || (BAD_GPU(mask, 3)))
+	{
+		fdt_rm_path(blob, "/gpu@fb000000");
+		fdt_rm_path(blob, "/thermal-zones/soc-thermal/cooling-maps/map3");
+		debug("rm: gpu\n");
+	}
 }
 
-static void rk3582_fdt_rm_rkvdec01(void *blob)
+static void rk3582_fdt_rm_rkvdec01(void *blob, u8 mask)
 {
-	/*
-	 * policy:
-	 *
-	 * Remove rkvdec0 and rkvdec1 by default.
-	 */
-	fdt_rm_path(blob, "/rkvdec-core@fdc38000");
-	fdt_rm_path(blob, "/iommu@fdc38700");
-	fdt_rm_path(blob, "/rkvdec-core@fdc48000");
-	fdt_rm_path(blob, "/iommu@fdc48700");
-	debug("rm: rkvdec0, rkvdec1\n");
+	/* Only remove bad cores */
+	if (BAD_RKVDEC(mask, 0)) {
+		fdt_rm_path(blob, "/rkvdec-core@fdc38000");
+		fdt_rm_path(blob, "/iommu@fdc38700");
+		debug("rm: rkvdec0\n");
+	}
+	if (BAD_RKVDEC(mask, 1)) {
+		fdt_rm_path(blob, "/rkvdec-core@fdc48000");
+		fdt_rm_path(blob, "/iommu@fdc48700");
+		debug("rm: rkvdec1\n");
+	}
+
+	/* If there is bad core, fix multi core related nodes */
+	if (BAD_RKVDEC(mask, 0) || BAD_RKVDEC(mask, 1)) {
+		do_fixup_by_path((void *)blob, "/rkvdec-ccu",
+				 "status", "disabled", sizeof("disabled"), 0);
+
+		/* rename node name if the node exist, actually only one exist  */
+		fdt_rename_path(blob, "/rkvdec-core@fdc38000", "rkvdec@fdc38000");
+		fdt_rename_path(blob, "/rkvdec-core@fdc48000", "rkvdec@fdc48000");
+	}
 }
 
 static void rk3582_fdt_rm_rkvenc01(void *blob, u8 mask)
@@ -1277,31 +1271,27 @@ static void rk3582_fdt_rm_rkvenc01(void *blob, u8 mask)
 	 * 3. disable '*-ccu' node
 	 * 4. rename '*-core@' node
 	 */
-	if (!BAD_RKVENC(mask, 0) && !BAD_RKVENC(mask, 1)) {
-		/* rkvenc1 */
+	if (BAD_RKVENC(mask, 0)) {
+		fdt_rm_path(blob, "/rkvenc-core@fdbd0000");
+		fdt_rm_path(blob, "/iommu@fdbdf000");
+		debug("rm: rkvenv0\n");
+
+	}
+	if (BAD_RKVENC(mask, 1)) {
 		fdt_rm_path(blob, "/rkvenc-core@fdbe0000");
 		fdt_rm_path(blob, "/iommu@fdbef000");
 		debug("rm: rkvenv1\n");
-	} else {
-		if (BAD_RKVENC(mask, 0)) {
-			fdt_rm_path(blob, "/rkvenc-core@fdbd0000");
-			fdt_rm_path(blob, "/iommu@fdbdf000");
-			debug("rm: rkvenv0\n");
-
-		}
-		if (BAD_RKVENC(mask, 1)) {
-			fdt_rm_path(blob, "/rkvenc-core@fdbe0000");
-			fdt_rm_path(blob, "/iommu@fdbef000");
-			debug("rm: rkvenv1\n");
-		}
 	}
 
-	do_fixup_by_path((void *)blob, "/rkvenc-ccu",
-			 "status", "disabled", sizeof("disabled"), 0);
+	/* If there is bad core, fix multi core related nodes */
+	if (BAD_RKVENC(mask, 0) || BAD_RKVENC(mask, 1)) {
+		do_fixup_by_path((void *)blob, "/rkvenc-ccu",
+				 "status", "disabled", sizeof("disabled"), 0);
 
-	/* rename node name if the node exist, actually only one exist  */
-	fdt_rename_path(blob, "/rkvenc-core@fdbd0000", "rkvenc@fdbd0000");
-	fdt_rename_path(blob, "/rkvenc-core@fdbe0000", "rkvenc@fdbe0000");
+		/* rename node name if the node exist, actually only one exist  */
+		fdt_rename_path(blob, "/rkvenc-core@fdbd0000", "rkvenc@fdbd0000");
+		fdt_rename_path(blob, "/rkvenc-core@fdbe0000", "rkvenc@fdbe0000");
+	}
 }
 
 static void rk3583_fdt_rm_rkvdec01(void *blob, u8 mask)
@@ -1352,6 +1342,7 @@ static int fdt_fixup_modules(void *blob)
 	u8 rkvenc_mask;
 	u8 rkvdec_mask;
 	u8 cpu_mask;
+	u8 gpu_mask;
 	int ret;
 
 	ret = uclass_get_device_by_driver(UCLASS_MISC,
@@ -1386,12 +1377,10 @@ static int fdt_fixup_modules(void *blob)
 	rkvenc_mask = (ip_state[2] & 0x1) | ((ip_state[2] & 0x4) >> 1);
 	/* ip_state[1]: bit6,7 */
 	rkvdec_mask = (ip_state[1] & 0xc0) >> 6;
-#if 0
 	/* ip_state[1]: bit1~4 */
 	gpu_mask = (ip_state[1] & 0x1e) >> 1;
-#endif
 	debug("hw-mask: 0x%02x, 0x%02x, 0x%02x\n", ip_state[0], ip_state[1], ip_state[2]);
-	debug("sw-mask: 0x%02x, 0x%02x, 0x%02x\n", cpu_mask, rkvenc_mask, rkvdec_mask);
+	debug("sw-mask: 0x%02x, 0x%02x, 0x%02x, 0x%02x\n", cpu_mask, gpu_mask, rkvenc_mask, rkvdec_mask);
 
 	/*
 	 *		FIXUP WARNING!
@@ -1408,8 +1397,8 @@ static int fdt_fixup_modules(void *blob)
 		 * So don't use pattern like "if (rkvenc_mask) then rk3582_fdt_rm_rkvenc01()",
 		 * just go through all of them as this chip is rk3582.
 		 */
-		rk3582_fdt_rm_gpu(blob);
-		rk3582_fdt_rm_rkvdec01(blob);
+		rk3582_fdt_rm_gpu(blob, gpu_mask);
+		rk3582_fdt_rm_rkvdec01(blob, rkvdec_mask);
 		rk3582_fdt_rm_rkvenc01(blob, rkvenc_mask);
 		rk3582_fdt_rm_cpus(blob, cpu_mask);
 	} else if (chip_id[0] == 0x35 && chip_id[1] == 0x83) {

name: Maintain runners

on:
  workflow_dispatch:

jobs:

  Prepare:

    runs-on: [self-hosted, Linux, x64]
    if: ${{ github.repository_owner == 'armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Prepare matrix
        id: list_dirs
        run:
          echo ::set-output name=matrix::$(for x in $(seq -w 01 50); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)

  Maint:
  
    needs: [ Prepare ]
    runs-on: [self-hosted, Linux, x64]
    if: ${{ github.repository_owner == 'armbian' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}
    steps:
      - name: Fix permissions
        run: |
          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true
              sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 && $(sudo mountpoint -q build/output/images; echo $?) -eq 1 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sleep 10
          done
          sudo apt-get -y -qq update          
          sudo apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -y -qq upgrade
          cd build
          [[ -d build/.git ]] && sudo chown -R $USER:$USER build/.git || true
          [[ -d build/output/images ]] && sudo rm -rf build/output/images/* || true          
          [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
          #./compile.sh KERNEL_ONLY="yes" CLEAN_LEVEL="sources,alldebs" BOARD="bananapim64" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel,u-boot"
          #rm -rf output/debs output/debs-beta
          echo "test"
    
  Caches:

    name: Check cache files
    needs: [Maint]
    runs-on: [self-hosted, Linux, x64]
    if: ${{ github.repository_owner == 'Armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:
      - name: Prepare matrix
        id: list_dirs
        run:
          echo ::set-output name=matrix::$(for x in $(LC_ALL=C rsync --include '*.lz4' --exclude='*' rsync://rsync.armbian.com/dl/_rootfs/ | awk '{ print $5}' | tail -n +2); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)

  Check:
    name: Checks
    needs: [ Caches ]
    runs-on: [self-hosted, Linux, x64, images]
    if: ${{ github.repository_owner == 'armbian' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Caches.outputs.matrix)}}
    steps:
      - run: echo Run ${{ matrix.run }}
      - name: Show chunk
        run: |
          CHUNK="${{ matrix.node }}"
          echo "Node: $CHUNK"

      - name: Fix permissions
        run: |

          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true
              sudo mountpoint -q build/output/images && sudo fusermount -u build/output/images || true
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 && $(sudo mountpoint -q build/output/images; echo $?) -eq 1 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sleep 10
          done
          [[ -d build/.git ]] && sudo chown -R $USER:$USER build/.git || true
          [[ -d build/output/images ]] && sudo rm -rf build/output/images/* || true

      - name: Checkout Armbian build script

        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false
          
      - name: Sync or mount rootfs
        run: |
      
          cd build
          if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
              sudo mkdir -p cache/toolchain cache/rootfs
              sudo mount nas:/tank/armbian/toolchain.armbian.com cache/toolchain
              sudo mount nas:/tank/armbian/dl.armbian.com/_rootfs cache/rootfs
          else
              sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
          fi
          ls -l cache/rootfs/
          #lz4 -tqq cache/rootfs/${CHUNK}
          #if [[ $? -ne 0 ]]; then
          #    display_alert "Integrity check failed" "Removing $file" "err"
          #    rm ${file}*
          #else
          #    display_alert "Integrity checking" "$file" "info"
          #fi

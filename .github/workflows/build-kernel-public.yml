name: Build kernel packages on PR

on:
  workflow_dispatch:
  pull_request:

jobs:

  Prepare:
    
    name: "Finding changed kernels"    
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'Armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Cache build parameters
        uses: actions/cache@v2
        env:
          cache-name: build-kernel
        with:
          path: build-kernel
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}

      - name: Store matrix values
        run: |
          echo "${{ github.event.inputs.release_type }}" > build-kernel/build_type

      - name: Store environment variables values
        run: |

          echo "FILE_EXT=-beta" >> $GITHUB_ENV
          echo "REPO_DEST=nightly" >> $GITHUB_ENV
          echo "BETA=yes" >> $GITHUB_ENV
          if [[ "$(cat build-kernel/build_type 2> /dev/null || true)" =~ "stable|edge" ]]; then
              echo "FILE_EXT=" >> $GITHUB_ENV
              echo "REPO_DEST=master" >> $GITHUB_ENV
              echo "BETA=no" >> $GITHUB_ENV
          fi

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: ${{ github.event.pull_request.head.sha }}
          clean: false

      - name: Checkout support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
          path: scripts
          clean: true

      - name: Determine changed kernels
        run: |

          cd build
          [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
          BETA="${{ env.BETA }}"
          FILE_EXT="${{ env.FILE_EXT }}"
          ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" \
          BETA="$BETA" REPOSITORY_INSTALL="u-boot,kernel" 'prepare_host'
          mkdir -p cache/hash${FILE_EXT}
          sudo rsync -ar --delete ../scripts/hash${FILE_EXT}/. cache/hash${FILE_EXT}/ 2> /dev/null
          sudo cp ../scripts/configs/* userpatches/
          sudo rm -f userpatches/targets.conf          
          if [[ "$(cat ../build-kernel/build_type 2> /dev/null || true)" =~ stable|edge ]]; then
            cat config/targets.conf | grep edge | grep cli | grep hirsute | sudo tee userpatches/targets.conf 1>/dev/null 
            echo "FILE_EXT=" >> $GITHUB_ENV
            echo "REPO_DEST=master" >> $GITHUB_ENV
            echo "BETA=no" >> $GITHUB_ENV
          fi

      - name: Prepare build matrix
        id: list_dirs
        run: |

          BETA="${{ env.BETA }}"
          MATRIX=$(cd build;./compile.sh all-new-beta-kernels BETA="$BETA" BUILD_ALL="demo" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" | egrep "^[0-9]" | awk '{ print $2 ":" $4 }' | sort | uniq)
          mkdir -p build-kernel
          echo "no" > build-kernel/skip          
          if [[ -z "$MATRIX" ]]; then
              MATRIX="none:none"
              echo "yes" > build-kernel/skip
          fi          
          echo ::set-output name=matrix::$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
          
  Linux:

    name: "Build Linux"
    needs: [ Prepare ]
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'armbian' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}

    steps:

      - name: Checkout Armbian support scripts
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
          path: scripts
          clean: true

      - name: Cache Gradle packages
        uses: actions/cache@v2
        env:
          cache-name: build-kernel
        with:
          path: build-kernel
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}-linux 
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}

      - name: Read value
        run: |

          echo "FILE_EXT=-beta" >> $GITHUB_ENV
          echo "REPO_DEST=nightly" >> $GITHUB_ENV
          echo "BETA=yes" >> $GITHUB_ENV
          if [[ "$(cat build-kernel/build_type 2> /dev/null || true)" =~ stable|edge ]]; then
              echo "FILE_EXT=" >> $GITHUB_ENV
              echo "REPO_DEST=master" >> $GITHUB_ENV
              echo "BETA=no" >> $GITHUB_ENV
          fi

      - name: Checkout Armbian build script

        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: ${{ github.event.pull_request.head.sha }}
          clean: false

      - name: Build
        run: |

          if [[ "$(cat build-kernel/skip 2> /dev/null || true)" == "no" ]]; then

              CHUNK="${{ matrix.node }}"
              BETA="${{ env.BETA }}"
              FILE_EXT="${{ env.FILE_EXT }}"
              BOARD=$(echo $CHUNK | cut -d":" -f1)
              BRANCH=$(echo $CHUNK | cut -d":" -f2)
              echo "FILE_NAME=${BOARD}-${BRANCH}" >> $GITHUB_ENV
              cd build              
              sudo rsync -ar --delete ../scripts/hash${FILE_EXT}/. cache/hash${FILE_EXT}/ 2> /dev/null
              [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes          
              ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" REPOSITORY_INSTALL="u-boot,kernel" 'prepare_host_basic'          
              if [[ $(curl -s http://ifconfig.me) == "93.103.15.56" ]]; then
                  sudo mkdir -p cache/toolchain cache/rootfs
                  sudo mount nas:/tank/armbian/toolchain.armbian.com cache/toolchain
                  sudo mount nas:/tank/armbian/dl.armbian.com/_rootfs cache/rootfs
              fi
              rm -rf output/debs*
              ./compile.sh ARMBIAN_MIRROR="https://github.com/armbian/mirror/releases/download/" BOARD="$BOARD" CLEAN_LEVEL="alldebs" \
              PRIVATE_CCACHE="yes" BETA="$BETA" KERNEL_ONLY="yes" BRANCH="$BRANCH" KERNEL_CONFIGURE="no" OFFLINE="no"
              [[ $? -eq 0 ]] && echo "UPLOAD=true" >> $GITHUB_ENV
              sudo mkdir -p ../build-kernel
              echo "${FILE_EXT}"
              RAZLIKA=$(diff -q "cache/hash${FILE_EXT}/" "../scripts/hash${FILE_EXT}/" | cut -d" " -f2)
              [[ -n $RAZLIKA ]] && cp $RAZLIKA ../build-kernel/
              cp $(diff -q "cache/hash${FILE_EXT}/" "../scripts/hash${FILE_EXT}/" | cut -d" " -f2) ../build-kernel/
              
          fi
          
      - name: Upload build artifacts
        if: ${{ matrix.node != 'none:none' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FILE_NAME }}
          path: build/output/debs${{ env.FILE_EXT }}/linux-*
          retention-days: 14


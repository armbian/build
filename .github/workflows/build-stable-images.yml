name: Stable images

on:

  workflow_dispatch:

    inputs:
      branch:
        description: 'Branch to pull from'
        required: true
        default: 'v21.08-RC'

      buildconfig:
        description: 'Build config'
        required: false
        default: 'all-new-RC-images'

jobs:

    worker-1:

      name: Worker 1/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-00.conf userpatches/targets.conf # Building chunk 1

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-2:

      name: Worker 2/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-01.conf userpatches/targets.conf # Building chunk 2

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-3:

      name: Worker 3/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-02.conf userpatches/targets.conf # Building chunk 3

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-4:

      name: Worker 4/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-03.conf userpatches/targets.conf # Building chunk 4

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-5:

      name: Worker 5/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-04.conf userpatches/targets.conf # Building chunk 5

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-6:

      name: Worker 6/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-05.conf userpatches/targets.conf # Building chunk 6

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-7:

      name: Worker 7/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-06.conf userpatches/targets.conf # Building chunk 7

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-8:

      name: Worker 8/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-07.conf userpatches/targets.conf # Building chunk 8

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-9:

      name: Worker 9/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-08.conf userpatches/targets.conf # Building chunk 9

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-10:

      name: Worker 10/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-09.conf userpatches/targets.conf # Building chunk 10

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-11:

      name: Worker 11/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-10.conf userpatches/targets.conf # Building chunk 11

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-12:

      name: Worker 12/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-11.conf userpatches/targets.conf # Building chunk 12

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-13:

      name: Worker 13/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-12.conf userpatches/targets.conf # Building chunk 13

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-14:

      name: Worker 14/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-13.conf userpatches/targets.conf # Building chunk 14

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-15:

      name: Worker 15/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-14.conf userpatches/targets.conf # Building chunk 15

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-16:

      name: Worker 16/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-15.conf userpatches/targets.conf # Building chunk 16

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-17:

      name: Worker 17/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-16.conf userpatches/targets.conf # Building chunk 17

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-18:

      name: Worker 18/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-17.conf userpatches/targets.conf # Building chunk 18

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-19:

      name: Worker 19/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-18.conf userpatches/targets.conf # Building chunk 19

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-20:

      name: Worker 20/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-19.conf userpatches/targets.conf # Building chunk 20

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-21:

      name: Worker 21/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-20.conf userpatches/targets.conf # Building chunk 21

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-22:

      name: Worker 22/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-21.conf userpatches/targets.conf # Building chunk 22

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-23:

      name: Worker 23/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-22.conf userpatches/targets.conf # Building chunk 23

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-24:

      name: Worker 24/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-23.conf userpatches/targets.conf # Building chunk 24

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-25:

      name: Worker 25/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-24.conf userpatches/targets.conf # Building chunk 25

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-26:

      name: Worker 26/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-25.conf userpatches/targets.conf # Building chunk 26

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-27:

      name: Worker 27/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-26.conf userpatches/targets.conf # Building chunk 27

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-28:

      name: Worker 28/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-27.conf userpatches/targets.conf # Building chunk 28

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-29:

      name: Worker 29/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-28.conf userpatches/targets.conf # Building chunk 29

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-30:

      name: Worker 30/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-29.conf userpatches/targets.conf # Building chunk 30

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-31:

      name: Worker 31/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-30.conf userpatches/targets.conf # Building chunk 31

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-32:

      name: Worker 32/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-31.conf userpatches/targets.conf # Building chunk 32

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-33:

      name: Worker 33/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-32.conf userpatches/targets.conf # Building chunk 33

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-34:

      name: Worker 34/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-33.conf userpatches/targets.conf # Building chunk 34

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-35:

      name: Worker 35/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-34.conf userpatches/targets.conf # Building chunk 35

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-36:

      name: Worker 36/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-35.conf userpatches/targets.conf # Building chunk 36

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-37:

      name: Worker 37/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-36.conf userpatches/targets.conf # Building chunk 37

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-38:

      name: Worker 38/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-37.conf userpatches/targets.conf # Building chunk 38

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-39:

      name: Worker 39/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-38.conf userpatches/targets.conf # Building chunk 39

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-40:

      name: Worker 40/40
      runs-on: [self-hosted, Linux, images]
      timeout-minutes: 720
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: ${{ github.event.inputs.branch }}
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build stable images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}
            BUILD_CONFIG: ${{ github.event.inputs.buildconfig }}

          run: |

            cd build

            # use prepared configs
            sudo mkdir -p userpatches
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/debs/. output/debs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 40 build chunks
            cat config/targets.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/40 --additional-suffix=.conf --suffix-length=2 userpatches/split.conf userpatches/split-

            sudo ln -sf split-39.conf userpatches/targets.conf # Building chunk 40

            ./compile.sh "${BUILD_CONFIG}" MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    torrents:

      #
      # Rebuilt torrent files for rootfs cache
      #

      name: Update download infrastructure
      needs: [worker-1, worker-2, worker-3, worker-4, worker-5, worker-6, worker-7, worker-8, worker-9, worker-10,worker-11, worker-12, worker-13, worker-14, worker-15, worker-16, worker-17, worker-18, worker-19, worker-20,worker-21, worker-22, worker-23, worker-24, worker-25, worker-26, worker-27, worker-28, worker-29, worker-30,worker-31, worker-32, worker-33, worker-34, worker-35, worker-36, worker-37, worker-38, worker-39, worker-40]
      runs-on: [self-hosted, Linux, local]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Install SSH key for torrent

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            name: id_torrent # optional
            known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENTS }}
            if_key_exists: replace

        - name: Create torrents

          run: ssh -T -i ~/.ssh/id_torrent ${{ secrets.USER_TORRENTS }}@${{ secrets.HOST_TORRENTS }}

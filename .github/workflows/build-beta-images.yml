name: Beta images

on:

  workflow_dispatch:

  workflow_run:

    workflows: ["Build"]
    branches: [master]
    types:
      - completed

jobs:

    worker-1:

      name: CLI worker 1/5
      runs-on: [self-hosted, Linux, images]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/5000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-cli-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-0.conf userpatches/targets.conf # Building chunk 1

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-2:

      name: CLI worker 2/5
      runs-on: [self-hosted, Linux, images]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/5000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-cli-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-1.conf userpatches/targets.conf # Building chunk 2

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-3:

      name: CLI worker 3/5
      runs-on: [self-hosted, Linux, images]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/5000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-cli-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-2.conf userpatches/targets.conf # Building chunk 3

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-4:

      name: CLI worker 4/5
      runs-on: [self-hosted, Linux, images]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/5000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-cli-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-3.conf userpatches/targets.conf # Building chunk 4

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-5:

      name: CLI worker 5/5
      runs-on: [self-hosted, Linux, images]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/2000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-cli-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-4.conf userpatches/targets.conf # Building chunk 5

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-a:

      name: Desktop worker 1/5
      runs-on: [self-hosted, Linux, images, big]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-0.conf userpatches/targets.conf # Building chunk 1

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-b:

      name: Desktop worker 2/5
      runs-on: [self-hosted, Linux, images, big]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-1.conf userpatches/targets.conf # Building chunk 2

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-c:

      name: Desktop worker 3/5
      runs-on: [self-hosted, Linux, images, big]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-2.conf userpatches/targets.conf # Building chunk 3

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-d:

      name: Desktop worker 4/5
      runs-on: [self-hosted, Linux, images, big]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-3.conf userpatches/targets.conf # Building chunk 4

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    worker-e:

      name: Desktop worker 5/5
      runs-on: [self-hosted, Linux, images, big]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Fix permissions
          run: |

            # make sure no temporally dirs are mounted from previous runs
            while :
            do
                sudo pkill compile.sh || true
                sudo pkill arm-binfmt-P || true
                sudo pkill aarch64-binfmt-P || true
                sudo pkill pixz || true
                [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
                echo "Mounted temp directories. Trying to unmount."
                df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
                sleep 10
            done

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts

          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
            path: scripts
            clean: false

        - name: Import GPG key

          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_KEY1 }}
            passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
            workdir: scripts
            git-user-signingkey: true
            git-commit-gpgsign: true

        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

          run: |

            cd build

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # prepare host
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'

            # sync rootfs
            mkdir -p cache/rootfs/
            sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/

            # calculate how many images we can build in parallel
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/8000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # cleaning leftovers if any
            rm -rf output/images/*

            # split into 5 build chunks
            cat config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#"  > userpatches/split.conf
            split -d --number=l/5 --additional-suffix=.conf --suffix-length=1 userpatches/split.conf userpatches/split-

            sudo ln -sf split-4.conf userpatches/targets.conf # Building chunk 5

            ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
            if_key_exists: replace

        - name: Deploy to server

          if: ${{ success() }}

          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    torrents:

      #
      # Rebuilt torrent files for rootfs cache
      #

      name: Update download infrastructure
      needs: [worker-1, worker-2, worker-3, worker-4, worker-5, worker-a, worker-b, worker-c, worker-d, worker-e]
      runs-on: [self-hosted, Linux, local]
      if: ${{ github.repository_owner == 'Armbian' }}
      steps:

        - name: Install SSH key for torrent

          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_TORRENTS }}
            name: id_torrent # optional
            known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENTS }}
            if_key_exists: replace

        - name: Create torrents

          run: ssh -T -i ~/.ssh/id_torrent ${{ secrets.USER_TORRENTS }}@${{ secrets.HOST_TORRENTS }}

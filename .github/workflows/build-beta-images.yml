name: Build beta images

on:
  workflow_dispatch:
    inputs:
      build_chunks:
        description: 'Build chunks'
        required: true
        default: '10'

jobs:

  Prepare:

    runs-on: [self-hosted, Linux, images]
    if: ${{ github.repository_owner == 'armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Cut the job into n chunks
        run: |

          # split into build chunks
          mkdir -p temp
          cat build/config/targets-cli-beta.conf build/config/targets-desktop-beta.conf | grep -v "^$" | grep -v "^#" | shuf > temp/split.conf
          split -d --number=l/5 --additional-suffix=.conf --suffix-length=2 temp/split.conf temp/split-
      - id: list_dirs
        run: echo "::Prepare-output name=matrix::$(for x in $(seq -w 00 ${{ github.event.inputs.build_chunks }}); do echo $x; done|jq -cnR '[inputs | select(length>0)]')"

      - name: Cache build configurations
        uses: actions/cache@v2
        env:
          cache-name: cache-build
        with:
          path: temp
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}

  Runner: # short name because Github will expand with the matrix values

    needs: [ Prepare ]
    runs-on: [self-hosted, Linux, images]
    if: ${{ github.repository_owner == 'armbian' }}
    timeout-minutes: 480
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix: 
        include: ${{fromJson(needs.Prepare.outputs.matrix)}}

    steps:
 
      - name: Cache Gradle packages
        uses: actions/cache@v2
        env:
          cache-name: cache-build
        with:
          path: temp
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.run_id }}

      - name: Debug
        run: |

          set +e
          mkdir -p download
          GITURL="${{ github.repository }}"
          CHUNK="${{ matrix.part }}"
          echo "$GITURL $CHUNK"
          ls -l temp/

      - name: Fix permissions
        run: |

          # make sure no temporally dirs are mounted from previous runs
          while :
          do
              sudo pkill compile.sh || true
              sudo pkill arm-binfmt-P || true
              sudo pkill aarch64-binfmt-P || true
              sudo pkill pixz || true
              [[ "$(df | grep "/.tmp" | wc -l)" -eq 0 ]] && sudo rm -rf build/.tmp && break
              echo "Mounted temp directories. Trying to unmount."
              df | grep ".tmp" | awk '{print $6}' | xargs sudo umount 2>/dev/null || true
              sleep 10
          done
          sudo chown -R $USER:$USER .
      - name: Checkout Armbian build script

        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/build
          path: build
          ref: nightly
          clean: false

      - name: Checkout Armbian support scripts

        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: armbian/scripts
          token: ${{ secrets.SCRIPTS_ACCESS_TOKEN }}
          path: scripts
          clean: false

      - name: Import GPG key

        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
          workdir: scripts
          git-user-signingkey: true
          git-commit-gpgsign: true

      - name: Build beta images
        env:
          GPG_PASS: ${{ secrets.GPG_PASSPHRASE1 }}

        run: |

          CHUNK="${{ matrix.part }}"
          cp temp/split* build/userpatches/
          cd build
          # use prepared configs
          sudo mkdir -p userpatches
          sudo cp ../scripts/configs/* userpatches/
          # prepare host
          [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
          ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'
          # sync rootfs
          mkdir -p cache/rootfs/
          sudo rsync --size-only --delete -avr rsync://rsync.armbian.com/dl/_rootfs/. cache/rootfs/
          # calculate how many images we can build in parallel
          PARALLEL_BUILDS=$(awk '{printf("%d",$1/5000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))
          # cleaning leftovers if any
          rm -rf output/images/* output/debs-beta/* output/debs/*

          sudo ln -sf split-${CHUNK}.conf userpatches/targets.conf
          ./compile.sh all-new-beta-images MULTITHREAD="${PARALLEL_BUILDS}" GPG_PASS="${GPG_PASS}"

      - name: Install SSH key for storage

        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Deploy to server

        if: ${{ success() }}

        run: |
          sudo apt-get -y -qq install lftp
          sudo chown -R $USER:$USER $(pwd)/build/output/images/
          lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

  torrents:

    name: Update download infrastructure
    needs: [Runner]
    runs-on: [self-hosted, Linux, local]
    if: ${{ github.repository_owner == 'Armbian' }}
    steps:
      - name: Install SSH key for torrent
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_TORRENTS }}
          name: id_torrent # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENTS }}
          if_key_exists: replace
      - name: Create torrents
        run: ssh -T -i ~/.ssh/id_torrent ${{ secrets.USER_TORRENTS }}@${{ secrets.HOST_TORRENTS }}

#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2024 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#

declare -g ARCH="riscv64"
declare -g LINUXFAMILY="spacemit"
declare -g GOVERNOR="performance"

# Arm Trusted Firmware
declare -g ATF_USE_GCC="> 8.0"
declare -g ATF_COMPILER="riscv64-linux-gnu-"
declare -g ATFSOURCE="https://gitee.com/bianbu-linux/opensbi.git"
declare -g ATFDIR="opensbi"
declare -g ATFBRANCH="tag:v2.0.4"
declare -g ATF_TARGET_MAP="PLATFORM_DEFCONFIG=k1_defconfig PLATFORM=generic ;;build/platform/generic/firmware/fw_dynamic.itb"

# U-Boot
declare -g BOOTSOURCE="https://gitee.com/bianbu-linux/uboot-2022.10.git"
declare -g BOOTBRANCH="${BOOTBRANCH_BOARD:-"tag:v2.0.4"}"
declare -g BOOTDIR='u-boot-spacemit'
declare -g BOOTPATCHDIR="${BOOTPATCHDIR:-"legacy/u-boot-spacemit-k1"}"
declare -g UBOOT_TARGET_MAP=";;bootinfo_emmc.bin FSBL.bin u-boot.itb fw_dynamic.itb"
declare -g BOOTCONFIG="k1_defconfig" # Boot with generic SpacemiT K1 config

# Linux
case "${BRANCH}" in
	current)
		declare -g KERNELSOURCE='https://github.com/jmontleon/linux-bianbu.git'
		declare -g KERNELBRANCH='commit:d3300881e2d524fbc4f9a8c7174df910f55ab3d0'
		declare -g EXTRAWIFI="no" # WiFi drivers are already included in the kernel
		declare -g KERNEL_MAJOR_MINOR="6.6"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-current"
		;;
esac

function custom_kernel_config__spacemit_k1_firmware() {
	if [[ -f .config ]]; then
		# check $kernel_work_dir is set and exists, or bail
		[[ -z "${kernel_work_dir}" ]] && exit_with_error "kernel_work_dir is not set"
		[[ ! -d "${kernel_work_dir}" ]] && exit_with_error "kernel_work_dir does not exist: ${kernel_work_dir}"
		display_alert "$BOARD" "Adding boot firmware" "info"
		mkdir -pv "${kernel_work_dir}/firmware"
		cp -fv "$SRC/packages/blobs/riscv64/spacemit/esos.elf" "${kernel_work_dir}/firmware"
	fi
}

pre_prepare_partitions() {
	declare -g OFFSET="4"
	declare -g IMAGE_PARTITION_TABLE="msdos"
}

write_uboot_platform() {
	local device N

	declare -A d
	d=(
		["bootinfo_emmc.bin"]="0:$(du -b ${1}/bootinfo_emmc.bin | awk '{print $1}')"
		["FSBL.bin"]="1:$(du -b ${1}/FSBL.bin | awk '{print $1}')"
		["fw_dynamic.itb"]="1280:$(du -b ${1}/fw_dynamic.itb | awk '{print $1}')"
		["u-boot.itb"]="2048:$(du -b ${1}/u-boot.itb | awk '{print $1}')"
	)

	device=${2}
	if [ -b ${2}boot0 ]; then
		device=${2}boot0
		echo 0 > /sys/block/$(basename ${device})/force_ro
		sync
	fi

	for f in "${!d[@]}"; do

		N=$((${d[$f]%:*} * 512))
		if dd "if=${device}" bs=1 "skip=$N" "count=${d[$f]#*:}" \
			conv=notrunc status=noxfer 2> /dev/null | cmp --quiet "${1}/${f}"; then

			echo "Skip  $f, it is equal to the existing one"
		else
			echo "# Write $f to ${device}"
			dd "if=${1}/${f}" "of=${device}" bs=512 "seek=${d[$f]%:*}" conv=notrunc,fsync status=noxfer
		fi
	done

}

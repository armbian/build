#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2023 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#

declare -g ARCH="riscv64"
declare -g LINUXFAMILY="spacemit"
declare -g GOVERNOR="performance"

# arm trusted firmware
declare -g ATF_USE_GCC="> 8.0"
declare -g ATF_COMPILER="riscv64-linux-gnu-"
declare -g ATFSOURCE="https://github.com/riscv-software-src/opensbi.git"
declare -g ATFDIR="opensbi"
declare -g ATFBRANCH="tag:v1.3"
declare -g ATF_TARGET_MAP="PLATFORM_DEFCONFIG=k1_defconfig PLATFORM=generic ;;build/platform/generic/firmware/fw_dynamic.itb"

# u-boot
declare -g BOOTSOURCE="https://source.denx.de/u-boot/u-boot.git"
declare -g BOOTCONFIG="k1_defconfig"
declare -g BOOTBRANCH="${BOOTBRANCH_BOARD:-"tag:v2022.10"}"
declare -g BOOTPATCHDIR="${BOOTPATCHDIR:-"v2022.10"}"
declare -g UBOOT_TARGET_MAP=";;bootinfo_emmc.bin FSBL.bin u-boot.itb fw_dynamic.itb"

# wireless
declare -g KERNEL_DRIVERS_SKIP+=(driver_generic_bring_back_ipx driver_mt7921u_add_pids driver_rtl8152_rtl8153 driver_rtl8189ES \
				driver_rtl8189FS driver_rtl8192EU driver_rtl8811_rtl8812_rtl8814_rtl8821 driver_xradio_xr819 driver_rtl8811CU_rtl8821C \
				driver_rtl8188EU_rtl8188ETV driver_rtl88x2bu driver_rtw88 driver_rtl88x2cs driver_rtl8822cs_bt driver_rtl8723DS driver_rtl8723DU \
				driver_rtl8822BS driver_uwe5622 driver_rtl8723cs)

case "${BRANCH}" in

	legacy)
		# linux
		declare -g KERNEL_MAJOR_MINOR="6.1" 
		declare -g KERNELBRANCH="branch:v6.1.15"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-legacy"
		KERNELPATCHDIR="archive/${LINUXFAMILY}-legacy-${KERNEL_MAJOR_MINOR}"
		;;

	current)
		# linux
		declare -g KERNEL_MAJOR_MINOR="6.1"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-current"
		# No need to set KERNELPATCHDIR, since default is: KERNELPATCHDIR='archive/${LINUXFAMILY}-${KERNEL_MAJOR_MINOR}'
		;;
esac

function custom_kernel_config__bananapif3_firmware () {
	if [[ -f .config ]]; then
		# check $kernel_work_dir is set and exists, or bail
		[[ -z "${kernel_work_dir}" ]] && exit_with_error "kernel_work_dir is not set"
		[[ ! -d "${kernel_work_dir}" ]] && exit_with_error "kernel_work_dir does not exist: ${kernel_work_dir}"
		display_alert "$BOARD" "Adding boot firmware" "info"
		mkdir -pv "${kernel_work_dir}/firmware"
		cp -fv "$SRC/packages/blobs/riscv64/spacemit/esos.elf" "${kernel_work_dir}/firmware"
	fi
}

pre_prepare_partitions () {
	declare -g OFFSET="100"
	declare -g IMAGE_PARTITION_TABLE="msdos"
}

write_uboot_platform () {
	# SDCARD
	dd if=$1/bootinfo_emmc.bin of=$2 bs=512 conv=notrunc
	dd if=$1/FSBL.bin of=$2 bs=512 seek=1 conv=notrunc
	dd if=$1/FSBL.bin of=$2 bs=512 seek=512 conv=notrunc
	dd if=$1/fw_dynamic.itb of=$2 bs=512 seek=1280 conv=notrunc
	dd if=$1/u-boot.itb of=$2 bs=512 seek=2048 conv=notrunc
}

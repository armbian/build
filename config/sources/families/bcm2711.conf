#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2023 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#
declare -g LINUXFAMILY=bcm2711
declare -g ARCH=arm64
declare -g UEFI_FS_LABEL="RPICFG"               # Windows/Mac users will see this if they mount the SD card. Configurable, but should be uppercase always
declare -g SKIP_BOOTSPLASH="yes"                # video is init-ed before us
declare -g CPUMIN=500000
declare -g CPUMAX=2900000
declare -g GOVERNOR=ondemand
declare -g INSTALL_ARMBIAN_FIRMWARE=no
declare -g UEFISIZE=256                         # in MiB. Not really UEFI, but partition layout is the same.
declare -g BOOTSIZE=0                           # No separate /boot, flash-kernel will "flash" the kernel+initrd to the firmware part.
declare -g BOOTCONFIG=none                      # We are currently not using U-boot for Raspberry Pi boards
declare -g UEFI_MOUNT_POINT="/boot/firmware"    # mount uefi partition at /boot/firmware

case "${BRANCH}" in

	ddk)
		declare -g RASPI_DISTRO_KERNEL=yes # This will cause board to include distro's prebuilt kernel, not from source
		;;

	legacy)
		declare -g RASPI_DISTRO_KERNEL=no
		declare -g KERNELSOURCE='https://github.com/raspberrypi/linux'
		declare -g KERNEL_MAJOR_MINOR="5.15" # Major and minor versions of this kernel. For mainline caching.
		declare -g KERNELBRANCH="branch:rpi-5.15.y"
		declare -g KERNELPATCHDIR="${LINUXFAMILY}-${BRANCH}"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-${BRANCH}"
		;;

	current)
		declare -g RASPI_DISTRO_KERNEL=no
		declare -g KERNELSOURCE='https://github.com/raspberrypi/linux'
		declare -g KERNEL_MAJOR_MINOR="6.1" # Major and minor versions of this kernel. For mainline caching.
		declare -g KERNELBRANCH="branch:rpi-6.1.y"
		declare -g KERNELPATCHDIR="${LINUXFAMILY}-${BRANCH}"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-${BRANCH}"
		;;

	edge)
		declare -g RASPI_DISTRO_KERNEL=no
		declare -g KERNELSOURCE='https://github.com/raspberrypi/linux'
		declare -g KERNEL_MAJOR_MINOR="6.6" # Major and minor versions of this kernel. For mainline caching.
		declare -g KERNELBRANCH="branch:rpi-6.6.y"
		declare -g KERNELPATCHDIR="${LINUXFAMILY}-${BRANCH}"
		declare -g LINUXCONFIG="linux-${LINUXFAMILY}-${BRANCH}"
		;;
esac

function post_family_config__add_rpi_packages() {
	display_alert "Preparing bcm2711" "${RELEASE}, distro kernel?: ${RASPI_DISTRO_KERNEL}" "info"
	unset BOOTSOURCE                                            # To try and convince lib/ to not build or install u-boot.
	declare -g RASPI_DISTRO_KERNEL="${RASPI_DISTRO_KERNEL:-no}" # Include a distro-built kernel?
	declare -g SERIALCON="${RASPI_SERIALCON:-tty1}"             # HDMI etc, not serial. most people don't have UART on rpi

	# if RELEASE is set, make sure it is one of the ones we support.
	if [[ -n "${RELEASE}" ]]; then
		if [[ "$RELEASE" =~ ^(${RPI_USABLE_RELEASES})$ ]]; then
			add_packages_to_image rpi-eeprom linux-firmware linux-firmware-raspi pi-bluetooth libraspberrypi-bin busybox
			add_packages_to_image raspi-config # Add raspi-config for those releases that have it; it might be useful.

			if [[ "${RASPI_DISTRO_KERNEL}" == "yes" ]]; then # and firmware.
				unset KERNELSOURCE                              # Make sure Armbian will not try to compile from source.
				add_packages_to_image linux-tools-raspi linux-raspi linux-image-raspi
				# Ubuntu Impish+ split the kernel modules, add the extra ones too.
				if [[ "$RELEASE" =~ ^(jammy|kinetic)$ ]]; then
					add_packages_to_image linux-modules-extra-raspi
				fi
			fi
		else
			exit_with_target_not_supported_error "Can't use release '${RELEASE}' for ${BOARD}. Try: '${RPI_USABLE_RELEASES}'" "'${RELEASE}' not supported"
		fi
	fi
}

# Make sure we don't try to install or remove /boot/dtb-$kvers directory
function post_family_tweaks_bsp__add_hooks_to_move_kernel_initrd_and_dtb() {
	run_host_command_logged mkdir -p "${destination}"/etc/kernel/post{inst,rm}.d

	# Copy new files to /boot/firmware
	run_host_command_logged cat <<- 'z50-raspi-firmware' > "${destination}"/etc/kernel/postinst.d/z50-raspi-firmware
		#!/bin/bash -e

		# We are using same name as the debian's raspi-firmware script, but we
		# only need to run this script on ubuntu. Debian's package has a postinst
		# section capable of copying files, but Ubuntu relies on flash-kernel
		[[ -d /usr/lib/linux-firmware-raspi ]] || exit 0

		# Play nice when run under debconf.
		exec </dev/null >&2

		# Ensure the target directory exists.
		mkdir -p /boot/firmware

		for file in /usr/lib/linux-firmware-raspi/*
		do
			file=$( basename "$file" )
			cp "/usr/lib/linux-firmware-raspi/$file" "/boot/firmware/$file"
			sync -f "/boot/firmware/$file" || true
		done

		exit 0
	z50-raspi-firmware

	# Copy new files to /boot/firmware
	run_host_command_logged cat <<- 'zzz-copy-new-files' > "${destination}"/etc/kernel/postinst.d/zzz-copy-new-files
		#!/bin/bash -e

		# Play nice when run under debconf.
		exec </dev/null >&2

		abi=$1
		target=/boot/firmware
		dtb_dir=/usr/lib/linux-image-$abi/

		cp /boot/vmlinuz-${abi} ${target}/vmlinuz
		cp ${dtb_dir}/broadcom/*.dtb ${target}/
		cp -r ${dtb_dir}/overlays ${target}/
		sync -f ${target}/vmlinuz || true

		exit 0
	zzz-copy-new-files

	# Remove old files from /boot/firmware
	run_host_command_logged cat <<- 'zzz-remove-old-files' > "${destination}"/etc/kernel/postrm.d/zzz-remove-old-files
		#!/bin/bash -e

		# Play nice when run under debconf.
		exec </dev/null >&2

		abi=$1
		target=/boot/firmware

		rm ${target}/vmlinuz
		rm ${target}/*.dtb
		rm -r ${target}/overlays

		exit 0
	zzz-remove-old-files

	run_host_command_logged chmod a+rx "${destination}"/etc/kernel/postinst.d/z50-raspi-firmware
	run_host_command_logged chmod a+rx "${destination}"/etc/kernel/postinst.d/zzz-copy-new-files
	run_host_command_logged chmod a+rx "${destination}"/etc/kernel/postrm.d/zzz-remove-old-files

	run_host_command_logged rm "${destination}"/etc/initramfs/post-update.d/99-uboot

	# copy new initramfs file
	run_host_command_logged cat <<- 'zzz-update-initramfs' > "${destination}"/etc/initramfs/post-update.d/zzz-update-initramfs
		#!/bin/bash -e

		# Play nice when run under debconf.
		exec </dev/null >&2

		abi=$1
		initrd_file=$2
		target=/boot/firmware

		cp ${initrd_file} ${target}/initrd.img
		sync -f ${target}/initrd.img || true

		exit 0
	zzz-update-initramfs

	run_host_command_logged chmod a+x "${destination}"/etc/initramfs/post-update.d/zzz-update-initramfs
}

function post_family_tweaks__populate_boot_firmware_directory() {
	# We install kernel before we install bsp package. This means hooks present in bsp are not executed.
	# Running the hooks from bsp to populate /boot/firmware directory.
	modules_dir="$(find "${SDCARD}/lib/modules"/ -maxdepth 1 -type d -name "*${IMAGE_INSTALLED_KERNEL_VERSION}*")"
	kern_ver="$(basename "$modules_dir")"
	run_host_command_logged mkdir -p "${SDCARD}"/boot/firmware
	chroot_sdcard /etc/kernel/postinst.d/z50-raspi-firmware "${kern_ver}"
	chroot_sdcard /etc/kernel/postinst.d/zzz-copy-new-files "${kern_ver}"
}

# Our default paritioning system is leaving esp on. Rpi3 is the only board that have issues with this.
# Removing the ESP flag from the boot partition should allow the image to boot on both the RPi3 and RPi4.
function pre_umount_final_image__remove_esp() {
	display_alert "Removing ESP flag from FAT partition" "rpi4 / rpi3" "info"
	run_host_command_logged parted -s "${LOOP}" set 1 esp off
}

# configure stuff at the appropriate time in flash-kernel
function pre_umount_final_image__write_raspi_config() {
	declare comment_if_debug=""
	declare not_comment_if_debug="#"
	if [[ "${RPI_DEBUG_CONSOLE}" != "yes" ]]; then
		comment_if_debug="#"
		not_comment_if_debug=""
		# for serial console, there is also 'BOOT_UART=1' in 'rpi-eeprom-config' but that is for an earlier stage.
		# look at with it rpi-eeprom-config, change with 'EDITOR=nano rpi-eeprom-config --edit'
	fi

	cat <<- EOD > "${MOUNT}"/boot/firmware/config.txt
		[pi4]
		max_framebuffers=2
		over_voltage=2
		arm_freq=1800

		[all]
		kernel=vmlinuz
		cmdline=cmdline.txt
		initramfs initrd.img followkernel
		disable_overscan=1
		hdmi_drive=2
		arm_64bit=1
		disable_splash=1

		# enable audio (loads snd_bcm2835)
		dtparam=audio=on

		# bootloader logs to serial, second stage
		${not_comment_if_debug}enable_uart=1

		# overclock. requires decent thermals. COMMENT OUT IF DON'T USE A GREAT COOLER OR HEATSINK.
		# over_voltage=6
		# arm_freq=2000

		# uncomment to disable wifi or bt.
		#dtoverlay=disable-wifi
		${comment_if_debug}dtoverlay=disable-bt

		# gpu and 3d stuff.
		gpu_mem=256
		dtoverlay=vc4-fkms-v3d
	EOD
}

function pre_umount_final_image__write_raspi_cmdline() {
	if [[ "${RPI_DEBUG_CONSOLE}" == "yes" ]]; then
		cat <<- EOD > "${MOUNT}"/boot/firmware/cmdline.txt
			root=LABEL=${ROOT_FS_LABEL} rootfstype=${ROOTFS_TYPE} rootwait fixrtc cgroup_enable=memory cgroup_memory=1 console=tty1 console=ttyAMA0 loglevel=7 splash=verbose
		EOD
	else
		cat <<- EOD > "${MOUNT}"/boot/firmware/cmdline.txt
			root=LABEL=${ROOT_FS_LABEL} rootfstype=${ROOTFS_TYPE} rootwait fixrtc cgroup_enable=memory cgroup_memory=1 console=tty1 logo.nologo loglevel=1 splash=verbose
		EOD
	fi
}

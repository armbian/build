#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2023 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#
# 'common.conf' is already sourced when this arch is sourced.

declare -g ARCH='amd64'                     # Debian name $(dpkg-architecture -qDEB_HOST_ARCH)
declare -g ARCHITECTURE='x86_64'            # "kernel" arch
declare -g KERNEL_SRC_ARCH='x86'            # kernel SRC_ARCH; there's two for x86_64
declare -g QEMU_BINARY='qemu-x86_64-static' # Hopefully you have this installed.
declare -g MAIN_CMDLINE=''                  # we set it in common, it was not set before
declare -g KERNEL_COMPILER=' '              # hack: use single space for host gcc. won't work on arm64 hosts
declare -g KERNEL_USE_GCC=' '               # more hacks.
declare -g KERNEL_EXTRA_TARGETS='modules'   # default is "modules dtb" but x86_64 has no DTB
declare -g KERNEL_BUILD_DTBS="no"           # amd64 has no DTBs. that I know of.
declare -g UBOOT_USE_GCC='none'             # required by configuration.sh
#declare -g INITRD_ARCH=amd64               # Used by u-boot for mkimage in initramfs. No u-boot for x86 yet.

# Defaults, if not set by board or family.
declare -g KERNEL_IMAGE_TYPE="${KERNEL_IMAGE_TYPE:-"bzImage"}"
declare -g KERNEL_INSTALL_TYPE="${KERNEL_INSTALL_TYPE:-"install"}"
#declare -g NAME_KERNEL="${NAME_KERNEL:-""}"
#declare -g NAME_INITRD="${NAME_INITRD:-""}"

# Default to mainline
[[ -z $KERNELSOURCE ]] && KERNELSOURCE=$MAINLINE_KERNEL_SOURCE

if [[ "$(uname -m)" == "aarch64" ]]; then
	# Allow building amd64 on aarch64, but using system toolchain only
	declare -g KERNEL_COMPILER="x86_64-linux-gnu-"
	declare -g SKIP_EXTERNAL_TOOLCHAINS=yes
fi

true # make sure to exit with 0 status; this protects against shortcircuits etc above.

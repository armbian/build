# Rockchip RK3568 quad core 4GB-8GB GBE PCIe USB3 SATA NVMe
BOARD_NAME="ODROID M1"
BOARDFAMILY="rk3568-odroid" # Separate kernel, has its own family. Uses rockchip64_common for most stuff.
BOARD_MAINTAINER="rpardini"
BOOT_SOC="rk3568"                             # This determined BOOT_SCENARIO et al.
KERNEL_TARGET="edge"                          # Only mainline based kernel
BOOT_FDT_FILE="rockchip/rk3568-odroid-m1.dtb" # HK's DTB
SRC_EXTLINUX="no"                             # NO EXTLINUX! Family defines a custom bootscript too.
ASOUND_STATE="asound.state.station-m2"        # @TODO: probably should fix this later.
IMAGE_PARTITION_TABLE="gpt"                   # HK's bootloader in SPI requires GPT partition table.
#DDR_BLOB="rk35/rk3568_ddr_1560MHz_v1.10.bin"    # Real blob, is actually used. in rkbin repository. HK uses 1.09, 1.10 seems to work just as well.
#BL31_BLOB="rk35/rk356x_usbplug_v1.10.bin--FAKE" # Not really used for anything, as the name proves.
FULL_DESKTOP="yes"
BOOT_LOGO="desktop"

BOOTSOURCE="https://github.com/Kwiboo/u-boot-rockchip.git"
BOOTBRANCH_BOARD="commit:dcf764a7018d641ab6b6b097563cddb710d263ba" # specific commit, from "branch:rk3568-2023.10-gmac" which is v2023.10-rc2 + kwiboo's gmac patches
BOOTPATCHDIR="v2023.10"
BOOTCONFIG="odroid-m1-rk3568_defconfig"
#BOOTSCRIPT='boot-rockchip64-vendor.cmd:boot.cmd' # Use ramaddr_r for loading fdt and armbianEnv; more flexible with overlays

function post_family_config__uboot_config() {
	display_alert "$BOARD" "u-boot ${BOOTBRANCH_BOARD}" "warn"
	UBOOT_TARGET_MAP="BL31=$RKBIN_DIR/$BL31_BLOB ROCKCHIP_TPL=$RKBIN_DIR/${DDR_BLOB};;u-boot-rockchip.bin u-boot-rockchip-spi.bin"
	unset uboot_custom_postprocess write_uboot_platform write_uboot_platform_mtd # ignore stuff in rockchip64_common; we're using binman here which does all the work already

	function write_uboot_platform() {
		# This is run board-side too, so account for the non-existance of run_host_command_logged
		local logging_prelude=""
		[[ $(type -t run_host_command_logged) == function ]] && logging_prelude="run_host_command_logged"
		${logging_prelude} dd if=${1}/u-boot-rockchip.bin of=${2} bs=32k seek=1 conv=fsync
	}

	function write_uboot_platform_mtd() {
		flashcp -v -p ${1}/u-boot-rockchip-spi.bin /dev/mtd0 # @TODO: flashcp ? from where?
	}
}

function add_host_dependencies__new_uboot_wants_python3_odroidm1() {
	declare -g EXTRA_BUILD_DEPS="${EXTRA_BUILD_DEPS} python3-pyelftools" # @TODO: convert to array later
}

# Include fw_setenv, configured to point to Petitboot's u-env mtd partition, so users can re-enable Petitboot
# with `fw_setenv skip_spiboot false` in Armbian.
PACKAGE_LIST_BOARD="libubootenv-tool" # libubootenv-tool provides fw_printenv and fw_setenv, for talking to U-Boot environment / Petitboot

function post_family_tweaks__config_odroidm1_fwenv() {
	display_alert "Configuring fw_printenv and fw_setenv" "for Odroid M1" "info"
	# Addresses below come from
	# - https://github.com/hardkernel/u-boot/blob/356906e6445378a45ac14ec184fc6e666b22338a/configs/odroid_rk3568_defconfig#L212-L213
	# - https://github.com/torvalds/linux/blob/master/arch/arm64/boot/dts/rockchip/rk3568-odroid-m1.dts#L637-L662
	# The kernel DT has a convenient partition table, so mtd1 is ready to use, just gotta set the size.

	cat <<- 'FW_ENV_CONFIG' > "${SDCARD}"/etc/fw_env.config
		# MTD on the SPI for the Odroid-M1; this requires the MTD partition table in the board kernel DTS
		# MTD device name Device offset Env. size Flash sector size Number of sectors
		/dev/mtd1                       0x0000                      0x20000
	FW_ENV_CONFIG
}

# Rockchip RK3568 quad core 4GB-8GB GBE PCIe USB3 SATA NVMe
BOARD_NAME="ODROID M1"
BOARDFAMILY="rk3568-odroid"                                  # Vendor kernel, has its own family. Uses rockchip64_common for most stuff.
BOOT_SOC="rk3568"                                            # This determined BOOT_SCENARIO et al.
BOOTCONFIG="odroid_rk3568_nomtd_defconfig"                   # This is patched on top of HK's defconfig, disabling SPI-NOR MTD, so we can boot from SD/eMMC directly
KERNEL_TARGET="legacy"                                       # Only vendor kernel supported for now
BOOT_FDT_FILE="rockchip/rk3568-odroid-m1.dtb"                # HK's DTB, quite incomplete, eg: there's no SPI-NOR support, etc.
SRC_EXTLINUX="yes"                                           # Use extlinux, I don't wanna be writing bootscript for this
ALLOW_EXTLINUX="yes"                                         # Allow extlinux.

# Original on legacy/vendor Odroid image: root=/dev/mmcblk1p2 quiet splash earlycon=uart8250,mmio32,0xfe660000 console=tty1 pci=nomsi fsck.mode=force fsck.repair=yes mtdparts=sfc_nor:0x20000@0xe0000(env),0x200000@0x100000(uboot),0x100000@0x300000(splash),0xc00000@0x400000(firmware) console=ttyFIQ0
SRC_CMDLINE="console=tty0 console=ttyS02,1500000 loglevel=7" # Console on uart and HDMI, very high verbosity on uart
ASOUND_STATE="asound.state.station-m2"                       # @TODO: probably should fix this later.
IMAGE_PARTITION_TABLE="gpt"                                  # HK's bootloader in SPI requires GPT partition table.
USE_HOOK_FOR_PARTITION=yes                                   # HK's bootloader requires a special partition for uboot, we do our own custom partitioning in create_partition_table() hook below
EXTRA_ROOTFS_MIB_SIZE=512                                    # Compensate a bit for wasted space.
DDR_BLOB="rk35/rk3568_ddr_1560MHz_v1.10.bin"                 # Real blob, is actually used. in rkbin repository. HK uses 1.09, 1.10 seems to work just as well.
BL31_BLOB="rk35/rk356x_usbplug_v1.10.bin--FAKE"              # Not really used for anything, as the name proves.
FULL_DESKTOP="yes"
BOOT_LOGO="desktop"

# @TODO: rpardini. lazy hack. call HK/RK's make.sh. That uses its own rkbins.
function build_custom_uboot__odroidm1() {
	export EXTENSION_BUILT_UBOOT="no, but is prepared" # Armbian still will build after this
	display_alert "Preparing custom u-boot" "ODROID-M1" "info"
	# @TODO: those use rkbin tools which are x86-only; they're pulled via git submodule.
	KCFLAGS="-fdiagnostics-color=always -Wno-error=maybe-uninitialized -Wno-error=misleading-indentation" PATH="/usr/bin/:${PATH}" run_host_command_logged ./make.sh odroid_rk3568
	KCFLAGS="-fdiagnostics-color=always -Wno-error=maybe-uninitialized -Wno-error=misleading-indentation" PATH="/usr/bin/:${PATH}" run_host_command_logged ./make.sh --spl
}

declare -g UBOOT_GIT_SKIP_SUBMODULES="yes" # skip fetching submodules during uboot fetch
function fetch_custom_uboot__odroidm1() {
	display_alert "Fetching custom u-boot" "ODROID-M1: UBOOT_GIT_SKIP_SUBMODULES: '${UBOOT_GIT_SKIP_SUBMODULES}' BOOTDIR: '${BOOTDIR}'" "debug"
	# Vendor source has bizarre submodule reference to it's own rkbins. Avoid with UBOOT_GIT_SKIP_SUBMODULES and fetch it ourselves.
	fetch_from_repo "https://github.com/hardkernel/rk3568_rkbin.git" "${BOOTDIR}/odroidm1-v2017.09/rkbin" "branch:odroidm1-v2017.09"
}

## All the above should be replaced with (rockchip64_common.inc)
#####	elif [[ $BOOT_SCENARIO == "spl-blobs" ]]; then
#####
#####		display_alert "BOOT Scenario is" "spl-blobs" "debug"
#####		# here is the full invocation
#####		# make clean; git clean -x -f -d; cp /root/configs_odroid_rk3568_nomtd_defconfig configs/odroid_rk3568_nomtd_defconfig; make odroid_rk3568_nomtd_defconfig; cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/rkbin/bin/rk35/rk3568_bl32_v1.05.bin tee.bin; cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/rkbin/bin/rk35/rk3568_bl31_v1.28.elf bl31.elf; make  V=1 BL31=/opt/build_armbian/extensions/cache/sources/rkbin-tools/rk35/rk356x_usbplug_v1.10.bin--FAKE all u-boot.dtb spl/u-boot-spl.bin u-boot.itb  CROSS_COMPILE="ccache aarch64-linux-gnu-"; echo $?
#####		# full full, without rkbin
#####		# make clean; git reset --hard; git clean -x -f -d; git submodule init; git submodule update; mv rkbin fodase; cp /root/configs_odroid_rk3568_nomtd_defconfig configs/odroid_rk3568_nomtd_defconfig; make odroid_rk3568_nomtd_defconfig; cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/fodase/bin/rk35/rk3568_bl32_v1.05.bin tee.bin; cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/fodase/bin/rk35/rk3568_bl31_v1.28.elf bl31.elf; make  V=1 BL31=/opt/build_armbian/extensions/cache/sources/rkbin-tools/rk35/rk356x_usbplug_v1.10.bin--FAKE all u-boot.dtb spl/u-boot-spl.bin u-boot.itb  CROSS_COMPILE="ccache aarch64-linux-gnu-"; echo $?
#####
#####		# To produce uboot.itb we need
#####		# cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/rkbin/bin/rk35/rk3568_bl31_v1.28.elf bl31.elf
#####		# cp /opt/build_armbian/extensions/cache/sources/u-boot/odroidm1-v2017.09/rkbin/bin/rk35/rk3568_bl32_v1.05.bin tee.bin
#####
#####		# This reads like:
#####		# 1) run make with "spl/u-boot-spl.bin u-boot.dtb u-boot.itb" targets and a BL31 parameter
#####		# 2) small detour, into spl-blobs variant of uboot_custom_postprocess() below, which uses the $DDR_BLOB and spl/u-boot-spl.bin to produce idbloader.img
#####		# 3) copy both the idbloader.img (created by 2) and u-boot.itb (created by 1) files, without renaming them, directly to the output.
#####		# 4) long detour to write_uboot_platform(), which writes idbloadder.img offset 64, and u-boot.itb offset 16384.

# This is for compatibility with ODROID's default SPL in SPI-NOR flash, it looks for GPT partition labelled "uboot" to load 2nd stage u-boot from.
# See https://wiki.odroid.com/odroid-m1/software/building_u-boot#installation_to_memory_card_directly
# They do it via CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_PARTITION=y, CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION=1 and CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION_NAME="uboot"
# Armbian u-boot is patched to also try for the sector, but that is not the case with the SPL that is already in SPI.
function create_partition_table__odroidm1_gpt_uboot() {
	display_alert "Creating partition table" "odroidm1; rootstart=${rootstart}" "info"
	rootpart=2 # rootfs is now the second partition
	run_host_command_logged parted -s "${SDCARD}.raw" -- "mkpart uboot ext4 ${rootstart}s 32MiB"
	run_host_command_logged parted -s "${SDCARD}.raw" -- "mkpart rootfs ext4 32MiB 100%"
}

# Hack alert: this only runs during build, not on the device.
function post_write_uboot_platform__write_uboot_to_partition() {
	local uboot_partition
	uboot_partition="$(run_host_command_logged blkid | grep "^${LOOP}p" | grep 'PARTLABEL="uboot"' | cut -d ":" -f 1)"
	display_alert "Writing u-boot to HardKernel-compatible GPT uboot partition" "odroidm1 - ${uboot_partition}" "info"
	run_host_command_logged dd "if=${UBOOT_CHROOT_DIR}/u-boot.itb" "of=${uboot_partition}" conv=notrunc status=none
}

# Rockchip RK3308 quad core 512MB SoC WiFi
# https://radxa.com/products/rocks/s0

BOARD_NAME="Rock S0"
BOARD_MAINTAINER="brentr"
BOARDFAMILY="rockchip64"
BOOTCONFIG="rock-s0-rk3308_defconfig"
BOOT_FDT_FILE="rockchip/rk3308-rock-s0.dtb"
KERNEL_TARGET="current,edge"
KERNEL_TEST_TARGET="current"

DEFAULT_CONSOLE="serial"
SERIALCON="ttyS0"
MODULES_BLACKLIST="rockchipdrm analogix_dp dw_mipi_dsi dw_hdmi gpu_sched lima hantro_vpu panfrost"
HAS_VIDEO_OUTPUT="no"
BOOTBRANCH_BOARD="tag:v2024.10"
BOOTPATCHDIR="v2024.10"

OVERLAY_PREFIX='rk3308'

#comment out line below for an image that will NOT boot from the built-in SDNAND
IDBLOADER_BLOB=$SRC/packages/blobs/rockchip/rk3308_idbloader_ddr589MHz_uart0_m0_v2.06.136sd.bin

#The SDNAND capabilty IDBLOADER_BLOB requires the U-Boot and Linux serial console on UART0
#Linux will hang on reboot if the console remains on UART2

#Note:  IDBLOADER_BLOB is derived from
#  https://dl.radxa.com/rockpis/images/loader/rk3308_loader_ddr589MHz_uart0_m0_v2.06.136sd.bin
#by using the rkdeveloptool to "upgrade" the previous DDR_BLOB loader on the SDNAND
#To recreate it, build the image with IDBLOADER_BLOB unset and boot Rock PI-S in MASKROM mode
#On your host (connected to the RockPi-S's USB-C port):
#  rdeveloptool db rk3308_loader_ddr589MHz_uart0_m0_v2.06.136sd.bin
#  rdeveloptool wl 0 newly_built_image.img
#  rdeveloptool ul rk3308_loader_ddr589MHz_uart0_m0_v2.06.136sd.bin  #this writes 280 sectors

#Then, reset the RockPi-S to boot from SDNAND.  Using that running image:
#  dd if=/dev/mmcblk0 of=rk3308_idbloader_ddr589MHz_uart0_m0_v2.06.136sd.bin skip=64 count=280

function post_family_config___uboot_config() {
	BOOTSCRIPT=boot-rockchip64-ttyS0.cmd:boot.cmd
        unset uboot_custom_postprocess family_tweaks_bsp  #disable def from rockchip64_common
}

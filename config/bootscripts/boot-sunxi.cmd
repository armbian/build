# DO NOT EDIT THIS FILE
#
# Please edit /boot/armbianEnv.txt to set supported parameters
#

setenv load_addr "0x45000000"

# default values
setenv overlay_error "false"
setenv verbosity "1"
setenv console "both"
setenv disp_mem_reserves "off"
setenv disp_mode "1920x1080p60"
setenv rootfstype "ext4"
setenv docker_optimizations "on"
setenv bootlogo "false"
setenv devnum "0"
setenv rootdev "/dev/mmcblk${devnum}p1"
setenv earlycon "off"

# Remember the default u-boot fdtfile
setenv deffdt_file ${fdtfile}

# Remember the default u-boot fdtdir
setenv deffdt_dir "${prefix}dtb"
if test "$fdtdir" = ""; then setenv fdtdir "${deffdt_dir}";fi

setenv vendor "allwinner"

setenv exit_on_critical_errors "on"
setenv fdt_extrasize "0x00010000"
setenv align_to "0x00001000"
setenv align_overlap_oboe_avoidance "on"
setenv align_addr_next 'if test "${align_overlap_oboe_avoidance}" = "on" ; then setexpr addr_next ${addr_next} + 1 ; fi ; setexpr modulo ${addr_next} % ${align_to} ; if itest ${modulo} -gt 0 ; then setexpr addr_next ${addr_next} / ${align_to} ; setexpr addr_next ${addr_next} + 1 ; setexpr addr_next ${addr_next} * ${align_to} ; fi'

# Print boot source
itest.b *0x28 == 0x00 && echo "U-boot loaded from SD"
itest.b *0x28 == 0x01 && echo "U-boot loaded from NAND"
itest.b *0x28 == 0x02 && echo "U-boot loaded from eMMC or secondary SD"
itest.b *0x28 == 0x03 && echo "U-boot loaded from SPI"

# get PARTUUID of first partition on SD/eMMC it was loaded from
# mmc 0 is always mapped to device u-boot (2016.09+) was loaded from
if test "${devtype}" = "mmc"; then
	part uuid mmc ${devnum}:1 partuuid;
	setenv devnum ${mmc_bootdev}
	setenv rootdev "/dev/mmcblk${mmc_bootdev}p1"
fi

if test -e ${devtype} ${devnum} ${prefix}armbianEnv.txt; then
	setenv something "environment (${prefix}armbianEnv.txt) from ${devtype} to ${load_addr}"
	echo "Loading ${something} ..."
	if load ${devtype} ${devnum} ${load_addr} ${prefix}armbianEnv.txt; then
		env import -t ${load_addr} ${filesize}
	else
		echo "** Could not load ${something} - using default environment"
	fi
fi

# Delete the vendor's name from the fdtfile variable and record the result
# after the file with the environment variables has been read
if setexpr subfdt sub ${vendor}/ "" ${fdtfile};then
	setenv fdtfile ${subfdt}
fi

# In this shell, we can only check the existence of the file.
# Make a check of reasonable ways to find the dtb file.
# Set the true value of the paths.
if test -e ${devtype} ${devnum} "${fdtdir}/${fdtfile}"; then
	echo "Load fdt: ${fdtdir}/${fdtfile}"
else
	echo "The file ${fdtfile} was not found in the path ${fdtdir}"
	if test -e ${devtype} ${devnum} "${deffdt_dir}/${vendor}/${fdtfile}"; then
		setenv fdtdir "${deffdt_dir}/${vendor}"
		echo "Load fdt: ${fdtdir}/${fdtfile}"
	else
		if test -e ${devtype} ${devnum} "${deffdt_dir}/${vendor}/${deffdt_file}"; then
			setenv fdtdir "${deffdt_dir}/${vendor}"
			setenv fdtfile "${deffdt_file}"
			echo "Load fdt: ${fdtdir}/${fdtfile}"
		else
			if test -e ${devtype} ${devnum} "${deffdt_dir}/${deffdt_file}"; then
				setenv fdtdir "${deffdt_dir}"
				setenv fdtfile "${deffdt_file}"
				echo "Load fdt: ${fdtdir}/${fdtfile}"
			fi
		fi
	fi
fi

if test "${console}" = "display"; then setenv consoleargs "console=tty1"; fi
if test "${console}" = "serial"; then setenv consoleargs "console=ttyS0,115200"; fi
if test "${console}" = "both"; then setenv consoleargs "console=ttyS0,115200 console=tty1"; fi
if test "${earlycon}" = "on"; then setenv consoleargs "earlycon ${consoleargs}"; fi
if test "${bootlogo}" = "true"; then
	setenv consoleargs "splash plymouth.ignore-serial-consoles ${consoleargs}"
else
	setenv consoleargs "splash=verbose ${consoleargs}"
fi

setenv bootargs "root=${rootdev} rootwait rootfstype=${rootfstype} ${consoleargs} hdmi.audio=EDID:0 disp.screen0_output_mode=${disp_mode} consoleblank=0 loglevel=${verbosity} ubootpart=${partuuid} ubootsource=${devtype} usb-storage.quirks=${usbstoragequirks} ${extraargs} ${extraboardargs}"

if test "${disp_mem_reserves}" = "off"; then
	setenv bootargs "${bootargs} sunxi_ve_mem_reserve=0 sunxi_g2d_mem_reserve=0 sunxi_fb_mem_reserve=16"
fi

if test "${docker_optimizations}" = "on"; then setenv bootargs "${bootargs} cgroup_enable=memory"; fi

if test -e ${devtype} ${devnum} "${prefix}.next"; then
	echo "Found mainline kernel configuration"

	setenv something "DT (${fdtdir}/${fdtfile}) from ${devtype} to ${fdt_addr_r}"
	echo "Loading ${something} ..."
	if load ${devtype} ${devnum} ${fdt_addr_r} ${fdtdir}/${fdtfile} ; then
	else
		echo "!! CRITICAL - Could not load ${something}"
		if test "${exit_on_critical_errors}" = "on" ; then
			exit
		fi
	fi

	setenv fdt_filesize ${filesize}
	fdt addr ${fdt_addr_r}
	fdt resize ${fdt_extrasize}

	for overlay_file in ${overlays}; do
		setenv something "kernel provided DT overlay (${fdtdir}/overlay/${overlay_prefix}-${overlay_file}.dtbo) from ${devtype} to ${load_addr}"
		echo "Loading ${something} ..."
		if load ${devtype} ${devnum} ${load_addr} ${fdtdir}/overlay/${overlay_prefix}-${overlay_file}.dtbo; then
			fdt apply ${load_addr} || setenv overlay_error "true"
		else
			echo "** Could not load ${something}"
		fi
	done

	for overlay_file in ${user_overlays}; do
		setenv something "user provided DT overlay (${prefix}overlay-user/${overlay_file}.dtbo) from ${devtype} to ${load_addr}"
		echo "Loading ${something} ..."
		if load ${devtype} ${devnum} ${load_addr} ${prefix}overlay-user/${overlay_file}.dtbo; then
			fdt apply ${load_addr} || setenv overlay_error "true"
		else
			echo "** Could not load ${something}"
		fi
	done

	if test "${overlay_error}" = "true"; then
		echo "** Error applying DT overlays"
		setenv something "original DT (${fdtdir}/${fdtfile}) from ${devtype} to ${fdt_addr_r}"
		echo "Restoring ${something} ..."
		if load ${devtype} ${devnum} ${fdt_addr_r} ${fdtdir}/${fdtfile} ; then
			fdt addr ${fdt_addr_r}
			fdt resize ${fdt_extrasize}
		else
			echo "!! CRITICAL - Could not restore ${something}"
			if test "${exit_on_critical_errors}" = "on" ; then
				exit
			fi
		fi
	else
		if test -e ${devtype} ${devnum} ${fdtdir}/overlay/${overlay_prefix}-fixup.scr; then
			setenv something "kernel provided DT fixup script (${fdtdir}/overlay/${overlay_prefix}-fixup.scr) from ${devtype} to ${load_addr}"
			echo "Loading ${something} ..."
			if load ${devtype} ${devnum} ${load_addr} ${fdtdir}/overlay/${overlay_prefix}-fixup.scr ; then
				source ${load_addr}
			else
				echo "** Could not load ${something}"
			fi
		fi

		if test -e ${devtype} ${devnum} ${prefix}fixup.scr; then
			setenv something "provided fixup script (${prefix}fixup.scr) from ${devtype} to ${load_addr}"
			echo "Loading ${something} ..."
			if load ${devtype} ${devnum} ${load_addr} ${prefix}fixup.scr ; then
				source ${load_addr}
			else
				echo "** Could not load ${something}"
			fi
		fi
	fi

	echo "Trimming DT ..."
	fdt resize

	fdt header get fdt_totalsize totalsize
	if test "${fdt_totalsize}" = "" ; then
		echo "** Command `fdt header` does not support `get <var> <member>` - calculating DT size"

		# 'fdt resize' will align upwards to 4k address boundary
		setexpr fdt_totalsize ${fdt_filesize} / 0x1000
		setexpr fdt_totalsize ${fdt_totalsize} + 1
		setexpr fdt_totalsize ${fdt_totalsize} * 0x1000
		if test "${fdt_extrasize}" != "" ; then
			# add 'extrasize' before aligning
			setexpr fdt_totalsize ${fdt_totalsize} + ${fdt_extrasize}
		fi
	fi
	setexpr addr_next ${fdt_addr_r} + ${fdt_totalsize}
	run align_addr_next
	setenv kernel_addr_r ${addr_next}

	setenv something "kernel (${prefix}zImage) from ${devtype} to ${kernel_addr_r}"
	echo "Loading ${something} ..."
	if load ${devtype} ${devnum} ${kernel_addr_r} ${prefix}zImage ; then
	else
		echo "!! CRITICAL - Could not load ${something}"
		if test "${exit_on_critical_errors}" = "on" ; then
			exit
		fi
	fi

	setexpr addr_next ${kernel_addr_r} + ${filesize}
	run align_addr_next
	setenv ramdisk_addr_r ${addr_next}

	setenv something "initial ramdisk (${prefix}uInitrd) from ${devtype} to ${ramdisk_addr_r}"
	echo "Loading ${something} ..."
	if load ${devtype} ${devnum} ${ramdisk_addr_r} ${prefix}uInitrd ; then
	else
		echo "!! CRITICAL - Could not load ${something}"
		if test "${exit_on_critical_errors}" = "on" ; then
			exit
		fi
	fi

	setenv something "kernel from ${kernel_addr_r}"
	echo "Booting ${something} ..."
	if bootz ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr_r} ; then
	else
		echo "!! CRITICAL - Could not boot ${something}"
		if test "${exit_on_critical_errors}" = "on" ; then
			exit
		fi
	fi
else
	echo "Found legacy kernel configuration"
	load ${devtype} ${devnum} ${ramdisk_addr_r} ${prefix}uInitrd
	load ${devtype} ${devnum} ${kernel_addr_r} ${prefix}zImage
	load ${devtype} ${devnum} ${fdt_addr_r} ${prefix}script.bin
	bootz ${kernel_addr_r} ${ramdisk_addr_r}
fi

# Recompile with:
# mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr

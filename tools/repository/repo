#!/usr/bin/env bash
#
# Adding package
#
# @arg $1 string component.
# @arg $2 string incoming folder.
# @arg $3 int policy.
# @arg $4 Input folder.
#
adding_packages() {

	# add deb files to repository if they are not already there
	for f in "${4}${2}"/*.deb; do
		local package name version arch
		# read package
		package=$(dpkg-deb -I "${f}")
		name=$(echo "${package}" | grep Package | awk '{print $2}')
		version=$(echo "${package}" | grep Version | awk '{print $2}')
		arch=$(echo "${package}" | grep Architecture | awk '{print $2}')
		# add if not already there
		aptly repo search -architectures="${arch}" -config="${CONFIG}" "${1}" 'Name (% '${name}'), $Version (='${version}'), $Architecture (='${arch}')' &> /dev/null
		if [[ $? -ne 0 ]]; then
			echo -e "Checking and adding \x1B[92m$name\x1B[0m to repository \x1B[92m$release $3\x1B[0m"
			aptly repo add -force-replace=true -config="${CONFIG}" "${1}" "${f}" &> /dev/null
		fi
	done

}


#
# $1: Input folder
# $2: Output folder
# $3: Command
# $4: Build repository
# $5: GPG password
# $6: jammy,sid
#

addtorepo() {

	# read comma delimited distros into array
    IFS=', ' read -r -a DISTROS <<< "$6"
	local errors=0

	for release in "${DISTROS[@]}"; do

		local forceoverwrite=""

		# let's drop from publish if exits
		if [[ -n $(aptly publish list -config="${CONFIG}" -raw | awk '{print $(NF)}' | grep "${release}") ]]; then
			aptly publish drop -config="${CONFIG}" "${release}" > /dev/null 2>&1
		fi

		# create local repository if not exist
		if [[ -z $(aptly repo list -config="${CONFIG}" -raw | awk '{print $(NF)}' | grep "${release}") ]]; then
			aptly repo create -config="${CONFIG}" -distribution="${release}" -component="main,${release}-utils,${release}-desktop" -comment="Armbian main repository" "${release}"  > /dev/null 2>&1
		fi

		if [[ -z $(aptly repo list -config="${CONFIG}" -raw | awk '{print $(NF)}' | grep "${release}-utils") ]]; then
			aptly repo create -config="${CONFIG}" -distribution="${release}" -component="${release}-utils" -comment="Armbian ${release} utilities" "${release}-utils" > /dev/null 2>&1
		fi

		if [[ -z $(aptly repo list -config="${CONFIG}" -raw | awk '{print $(NF)}' | grep "${release}-desktop") ]]; then
			aptly repo create -config="${CONFIG}" -distribution="${release}" -component="${release}-desktop" -comment="Armbian ${release} desktop" "${release}-desktop" > /dev/null 2>&1
		fi

		# adding main
		if find "$1"/ -maxdepth 1 -type f -name "*.deb" 2> /dev/null | grep -q .; then
			adding_packages "$release" "" "main" "$1"
		else
			aptly repo add -config="${CONFIG}" "${release}" "example.deb" > /dev/null 2>&1
		fi

		local COMPONENTS="main"

		# adding main distribution packages
		if find "${1}/${release}" -maxdepth 1 -type f -name "*.deb" 2> /dev/null | grep -q .; then
			adding_packages "${release}-utils" "/${release}" "release packages" "$1"
		else
			# workaround - add dummy package to not trigger error
			aptly repo add -config="${CONFIG}" "${release}" "example.deb" > /dev/null
		fi

		# adding release-specific utils
		if find "${1}/extra/${release}-utils" -maxdepth 1 -type f -name "*.deb" 2> /dev/null | grep -q .; then
			adding_packages "${release}-utils" "/extra/${release}-utils" "release utils" "$1"
		else
			aptly repo add -config="${CONFIG}" "${release}-utils" "example.deb" > /dev/null
		fi
		COMPONENTS="${COMPONENTS} ${release}-utils"

		# adding desktop
		if find "${1}/extra/${release}-desktop" -maxdepth 1 -type f -name "*.deb" 2> /dev/null | grep -q .; then
			adding_packages "${release}-desktop" "/extra/${release}-desktop" "desktop" "$1"
		else
			# workaround - add dummy package to not trigger error
			aptly repo add -config="${CONFIG}" "${release}-desktop" "example.deb" > /dev/null
		fi
		COMPONENTS="${COMPONENTS} ${release}-desktop"

		local mainnum utilnum desknum
		mainnum=$(aptly repo show -with-packages -config="${CONFIG}" "${release}" | grep "Number of packages" | awk '{print $NF}')
		utilnum=$(aptly repo show -with-packages -config="${CONFIG}" "${release}-desktop" | grep "Number of packages" | awk '{print $NF}')
		desknum=$(aptly repo show -with-packages -config="${CONFIG}" "${release}-utils" | grep "Number of packages" | awk '{print $NF}')

		if [ $mainnum -gt 0 ] && [ $utilnum -gt 0 ] && [ $desknum -gt 0 ]; then

			# publish
			echo "Publishing ${release}"
			aptly publish \
				-acquire-by-hash \
				-passphrase="${5}" \
				-origin="Armbian" \
				-label="Armbian" \
				-config="${CONFIG}" \
				-component="${COMPONENTS// /,}" \
				-distribution="${release}" repo "${release}" ${COMPONENTS//main/} > /dev/null

			if [[ $? -ne 0 ]]; then
				display_alert "Publishing failed" "${release}" "err"
				errors=$((errors + 1))
				exit 0
			fi
		else
			errors=$((errors + 1))
			local err_txt=": All components must be present: main, utils and desktop for first build"
		fi

	done

	# cleanup
	aptly db cleanup -config="${CONFIG}" > /dev/null

	# key
	cp armbian.key "${2}"/public/

	# display what we have
	(aptly repo list -config="${CONFIG}") | grep -E packages

	# remove debs if no errors found
	if [[ $errors -eq 0 ]]; then
			echo "Purging incoming debs"
			find "${1}" -name "*.deb" -type f -delete
	else
		display_alert "There were some problems $err_txt" "leaving incoming directory intact" "err"
	fi

}

#
# $1: Input folder
# $2: Output folder
# $3: Command
# $4: Build repository
# $5: GPG password
# $6: jammy,sid
#
repo-manipulate() {

	# read comma delimited distros into array
	IFS=', ' read -r -a DISTROS <<< "$6"

	case $3 in

		serve)

			sudo aptly serve -listen=$(ip -f inet addr | grep -Po 'inet \K[\d.]+' | grep -v 127.0.0.1 | head -1):80 -config="${CONFIG}"
			exit 0

			;;

		show)

			for release in "${DISTROS[@]}"; do
				echo "Displaying repository contents for $release"
				if [[ -z "$(cat $4/config/distributions/${release}/support | grep "csc\|supported" 2> /dev/null)" ]]; then
					continue
				fi
				aptly repo show -with-packages -config="${CONFIG}" "${release}" | tail -n +7
				aptly repo show -with-packages -config="${CONFIG}" "${release}-desktop" | tail -n +7
			done
			exit 0

			;;

		unique)

			# which package should be removed from all repositories
			IFS=$'\n'
			while true; do
				LIST=()
				for release in "${DISTROS[@]}"; do
					LIST+=($(aptly repo show -with-packages -config="${CONFIG}" "${release}" | tail -n +7))
					LIST+=($(aptly repo show -with-packages -config="${CONFIG}" "${release}-desktop" | tail -n +7))
				done
				LIST+=($(aptly repo show -with-packages -config="${CONFIG}" utils | tail -n +7))
				LIST=($(echo "${LIST[@]}" | tr ' ' '\n' | sort -u))
				new_list=()
				# create a human readable menu
				for ((n = 0; n < $((${#LIST[@]})); n++)); do
					new_list+=("${LIST[$n]}")
					new_list+=("")
				done
				LIST=("${new_list[@]}")
				LIST_LENGTH=$((${#LIST[@]} / 2))
				exec 3>&1
				TARGET_VERSION=$(dialog --cancel-label "Cancel" --backtitle "BACKTITLE" --no-collapse --title "Remove packages from repositories" --clear --menu "Delete" $((9 + ${LIST_LENGTH})) 82 65 "${LIST[@]}" 2>&1 1>&3)
				exitstatus=$?
				exec 3>&-
				if [[ $exitstatus -eq 0 ]]; then
					for release in "${DISTROS[@]}"; do
						aptly repo remove -config="${CONFIG}" "${release}" "$TARGET_VERSION"
						aptly repo remove -config="${CONFIG}" "${release}-desktop" "$TARGET_VERSION"
					done
					aptly repo remove -config="${CONFIG}" "utils" "$TARGET_VERSION"
				else
					exit 1
				fi
				aptly db cleanup -config="${CONFIG}" > /dev/null 2>&1
			done
			;;

		update)

			addtorepo "$1" "$2" "$3" "$4" "$5" "$6"
			exit 0

			;;

		*)

			echo -e "Usage: repository show | serve | unique | update\n"
			echo -e "\n show           = display repository content"
			echo -e "\n serve          = publish your repositories on current server over HTTP"
			echo -e "\n unique         = manually select which package should be removed from all repositories"
			echo -e "\n update         = updating repository"
			exit 0
			;;

	esac

}



sed -i "s/\"rootDir\": \".*\"/\"rootDir\": \"$2\"/g" aptly.conf
CONFIG="aptly.conf"


[[ -z "$1$2$3" ]] && exit 1

# input output command

# $1: Input folder
# $2: Output folder
# $3: Command
	# "show" displays packages in each repository
	# "serve" serve repository - useful for local diagnostics
	# "unique" manually select which package should be removed from all repositories
	# "update" search for new files in output/debs* to add them to repository
# $4: Build repository
# $5: GPG password
# $6: jammy,sid

# Example
# ./repo input output update "/home/igorp/Devel/build/" pwd sid,jammy,bullseye,focal


repo-manipulate "$1" "$2" "$3" "$4" "$5" "$6"

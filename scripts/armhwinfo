#!/bin/bash
### BEGIN INIT INFO
# Provides:          armhwinfo
# Required-Start:    
# Required-Stop:     glibc
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Armbian gathering informations about hardware
### END INIT INFO

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

collect_informations() {
	ifconfig | grep -q eth0 || (ifconfig eth0 up ; sleep 2)
	TMPFILE=$(mktemp /tmp/${0##*/}.XXXXXX)
	trap "rm \"${TMPFILE}\" ; exit 0" 0 1 2 3 15
	dmesg >"${TMPFILE}"
	SERVER_IP=$(hostname -I)
	CORES=$(grep -c ^processor /proc/cpuinfo)
	MEMTOTAL=$(( $(awk -F" " '/^MemTotal/ {print $2}' </proc/meminfo) / 1024 ))
	ARCH=$(lscpu | awk '/Architecture/ {print $2}')
	RTC=$(awk '/rtc0/ {print $(NF)}' <"${TMPFILE}")
	HB_PCI=$(grep '16c3:abcd' "${TMPFILE}")
	HARDWARE=$(awk '/Hardware/ {print $3}' </proc/cpuinfo)
	[ "X${HARDWARE}" = "XAllwinner" ] && HARDWARE=$(awk '/Hardware/ {print $4}' </proc/cpuinfo)
	GMAC=$(grep "sun6i_gmac" "${TMPFILE}")$(grep "gmac0-" "${TMPFILE}")
	SUN8IPHY="$(awk -F"PHY ID " '/PHY ID / {print $2}' <"${TMPFILE}")"
	LEDS=$(grep "green:ph02:led1" "${TMPFILE}")
	TERMINUS=$(lsusb | grep -i "1a40:0101")
	GL830=$(lsusb | grep -i "05e3:0718")
	SWITCH=$(grep "BCM53125" "${TMPFILE}")
	INTERUPT=$(grep "eth0" /proc/interrupts)
	WIFI8189ES=$(lsmod | grep 8189es | grep -v "0 $" | grep -v "0$") # ignore when not loaded
	WIFIAP6211=$(lsmod | grep ap6211)
	read VERSION </proc/version
} # collect_informations

set_io_scheduler() {
	for i in $( lsblk -idn -o NAME ); do
		read ROTATE </sys/block/$i/queue/rotational
	
	    # mechanical drives
	    if [ "$ROTATE" = 1 ]; then echo cfq >/sys/block/$i/queue/scheduler; 
	        echo -e "[\e[0;32m ok \x1B[0m] Setting cfg I/O scheduler for $i"
	
	    # solid state drives
	    elif [ "$ROTATE" = 0 ]; then echo noop >/sys/block/$i/queue/scheduler; 
	        echo -e "[\e[0;32m ok \x1B[0m] Setting noop I/O scheduler for $i"
	    fi
	done
} # set_io_scheduler

do_initialisation() {
	# parse /etc/armbian-boards.conf and adjust everything
	:
} # do_initialisation

detect_board() {
	if [ "$ARCH" = "armv7l" ]; then
		if [ $HARDWARE = "ODROID-XU3" ]; then
			ID="Odroid XU4"
		fi
		if [ $HARDWARE = "Marvell" ]; then
			ID="Clearfog"
		fi
		if [ $HARDWARE = "gs705a" ]; then
			if [ $MEMTOTAL == 2004 ]; then
				ID="Roseapple Pi"
			else
				ID="Guitar"
			fi
		fi
	    if [ $HARDWARE = "sun4i" ] || [ $HARDWARE = "Allwinner" ]; then
			ID="Cubieboard"
		fi
	    if [ $HARDWARE = "sun7i" ] || [ $HARDWARE = "Allwinner" ]; then
	        # redistribute irq to dedicated core
			if [ "$INTERUPT" != "" ] && [ "$CORES" -gt 1 ]; then
				echo 2 >/proc/irq/$(awk -F":" '/eth0/ {print $1}' </proc/interrupts | sed 's/\ //g')/smp_affinity
	        fi
	
	        if [ $MEMTOTAL -gt 1500 ]; then
	            ID="Cubietruck"
	        elif [ -n "$GMAC" ]; then
	            if [ "$TERMINUS" != "" ]; then
	                ID="Orange"
	            elif [ "$SWITCH" != "" ]; then
	                ID="Lamobo R1"
	            elif [ "$LEDS" != "" ]; then
	                ID="Lime 2"
				elif [ "$WIFIAP6211" != "" ]; then
	                ID="Banana Pi Pro"            
	            else
	                ID="Banana Pi"
	            fi
	        elif [ "$LEDS" != "" ]; then
	            ID="Lime"
	        elif [ $MEMTOTAL -lt 1500 ]; then
	            ID="Micro"
	        else
	            ID="Cubieboard"
	        fi
	
	    elif [ "$HARDWARE" = "Freescale" ]; then
	        if [ $MEMTOTAL -gt 1500 ]; then
	            ID="Cubox i4"
	        elif [ "$HB_PCI" != "" ]; then
	            ID="HB i2eX"
	        elif [ "$RTC" = "rtc0" ]; then
	            ID="Cubox i2eX"
	        elif [ "$CORES" = 1 ]; then
	            ID="HB i1"
	        else
	            ID="HB i2"
	        fi
			[ -f /proc/asound/imxvt1613audio/id ] && ID="Udoo"
	    fi
	    
	    if [ -f /proc/device-tree/model ]; then
	    	# mainline kernel, parsing cpuinfo is different
	    	HARDWARE=$(awk '/Hardware/ {print $4}' </proc/cpuinfo)
	    	GbE="1c30000.ethernet"; WiFi="wlan0"; USB1="usb1"; USB2="usb2"; USB3="usb3"
	    else
	    	# kernel 3.4.x
	    	GbE="gmac0"; WiFi="wlan0"; USB1="usb2"; USB2="usb3"; USB3="usb4"
	    fi
		if [ $HARDWARE = "sun8i" ]; then
			ID="Orange H3"
			# 10 or 120 sec user feedback that the board is ready after 1st login with 3.4 kernel
			SwapState="$(grep swap /etc/fstab)"
			if [ -f "X${SwapState}" != "X" ]; then
				echo heartbeat >/sys/class/leds/*green*/trigger
				[ -f "/root/.not_logged_in_yet" ] && BlinkTime=120 || BlinkTime=10
				(sleep ${BlinkTime} && echo default-on >/sys/class/leds/*green*/trigger) &
			fi
	
			# redistribute USB irqs to dedicated cores
			echo 2 >/proc/irq/$(awk -F":" "/${USB1}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
			echo 4 >/proc/irq/$(awk -F":" "/${USB2}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
			if [ "$TERMINUS" != "" ]; then
				# Ethernet irqs on cpu3
				echo 8 >/proc/irq/$(awk -F":" "/${GbE}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
				ID="Orange Pi+"
				if [ $MEMTOTAL -gt 1500 ]; then
					if [ ${CORES} -eq 4 ]; then
						ID="Orange Pi+ 2"
					else
						ID="Unsupported Hardware" # Banana Pi M3
					fi
				fi
				case ${SUN8IPHY} in
				00441400*)
					if [ "$WIFI8189ES" != "" ]; then
						ID="Orange Pi 2"
					else
						ID="Orange Pi 2 mini"
					fi
					;;
				esac
			elif [ "$WIFI8189ES" != "" ]; then
				ID="Orange Pi Lite"
				echo 8 >/proc/irq/$(awk -F":" "/${WiFi}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
			elif [ $MEMTOTAL -gt 600 ]; then
				case ${SUN8IPHY} in
				00441400*)
					ID="Orange Pi PC"
					echo 8 >/proc/irq/$(awk -F":" "/${USB3}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
					;;
				*)
					ID="Banana Pi M2+"
					echo 8 >/proc/irq/$(awk -F":" "/${GbE}/ {print \$1}" </proc/interrupts | sed 's/\ //g')/smp_affinity
					;;
				esac
			else
				ID="Orange Pi One"
			fi
	    fi
	elif [ "$ARCH" = "aarch64" ]; then
		if [ $HARDWARE = "ODROID-C2" ]; then	
			ID="Odroid C2"
		fi	
		if [ $HARDWARE = "sun50iw1p1" ]; then
			if [ $MEMTOTAL -gt 600 ]; then
				ID="Pine64+"
			else
				ID="Pine64"
			fi
		fi
	fi
	
	[ -f /proc/device-tree/model ] && read MACHINE </proc/device-tree/model
	
	if [[ $MACHINE == *LIME2 ]]; then ID="Lime 2"; fi
	if [[ $MACHINE == *LIME ]]; then ID="Lime"; fi
	if [[ $MACHINE == *Micro ]]; then ID="Micro"; fi
	if [[ $MACHINE == *Banana* ]]; then ID="Banana Pi"; fi
	if [[ $MACHINE == *Udoo* ]]; then ID="udoo"; fi
	if [[ $MACHINE == *Lamobo* ]]; then ID="Lamobo R1"; fi
	if [[ $MACHINE == *Neo* ]]; then ID="Udoo Neo"; fi
	if [[ $MACHINE == *Cubietruck* ]]; then ID="Cubietruck"; fi
	if [[ $MACHINE == *Cubieboard* ]]; then ID="Cubieboard"; fi
	if [[ $MACHINE == *Pro* ]]; then ID="Banana Pi Pro"; fi
	if [[ $MACHINE == *M2* ]]; then ID="Banana Pi M2"; fi
	if [[ $MACHINE == *AMLOGIC* ]]; then ID="Odroid C1"; fi
	if [[ $MACHINE == *HummingBoard2* ]]; then ID="HB 2"; fi
} # detect_board

log_hardware_info() {
	Log=/var/log/armhwinfo.log
	[ -f "/etc/logrotate.d/${0##*/}" ] || \
		echo -e "${Log} {\n  rotate 12\n  weekly\n  compress\n  missingok\n  notifempty\n}" \
		> "/etc/logrotate.d/${0##*/}" ; chmod 644 "/etc/logrotate.d/${0##*/}"
	if [ -f ${Log} ]; then
		echo -e "\n\n\n$(date) $HARDWARE $ARCH $KERNELID $MACHINE $ID" >>${Log}
	else
		echo "$(date) $HARDWARE $ARCH $KERNELID $MACHINE $ID" >>${Log}
		chmod 755 ${Log}
	fi
	echo "${VERSION}" >>${Log}
	echo -e "\n### dmesg:\n" >>${Log}
	cat "${TMPFILE}" >>${Log}
	echo -e "\n### lsusb:" >>${Log}
	[ -f /boot/.verbose ] && USBVERBOSE="-v" || echo "" >>${Log}
	lsusb ${USBVERBOSE} 2>/dev/null >>${Log}
	echo -e "\n### lscpu:\n" >>${Log}
	lscpu >>${Log}
	echo -e "\n### cpuinfo:\n" >>${Log}
	cat /proc/cpuinfo >>${Log}
	echo -e "\n### meminfo:\n" >>${Log}
	cat /proc/meminfo >>${Log} 
	echo -e "\n### interrupts:\n" >>${Log}
	cat /proc/interrupts >>${Log}
	echo -e "\n### ifconfig:\n" >>${Log}
	ifconfig >>${Log}
	echo -e "\n### df:\n" >>${Log}
	df -h >>${Log}
	get_flash_information >>${Log} &
} # log_hardware_info

get_flash_information() {
	# http://www.bunniestudios.com/blog/?page_id=1022
	find /sys -name oemid | while read Device ; do
		DeviceNode="${Device%/*}"
		DeviceName="${DeviceNode##*/}"
		echo -e "\n### ${DeviceName} info:\n"
		find "${DeviceNode}" -maxdepth 1 -type f | while read ; do
			NodeName="${REPLY##*/}"
			echo -e "$(printf "%20s" ${NodeName}): $(cat "${DeviceNode}/${NodeName}" | tr '\n' " ")"
		done
	done
} # get_flash_information

show_motd_warning() {
cat > /etc/update-motd.d/90-warning <<EOT
#!/bin/bash
echo -e "\e[0;91mAttention:\x1B[0m $1\n"
rm "\$0"
EOT
chmod +x /etc/update-motd.d/90-warning
} # show_motd_warning

check_sd_card_speed() {
	# function that checks on 3rd boot whether firstrun script made a quick
	# benchmark when a SD card with 4GB or less capacity has been detected
	# and displays a warning when random I/O is below some tresholds.
	if [ -f /var/log/armhwinfo.log ]; then
		RebootCount=$(grep -c '^### df:' /var/log/armhwinfo.log)
		if [ ${RebootCount} -eq 2 ]; then
			# check whether iozone data has been collected
			IozoneResults="$(awk -F" " '/^### quick iozone test/ {print $10"\t"$11}' </var/log/armhwinfo.log)"
			if [ "X${IozoneResults}" != "X" ]; then
				set ${IozoneResults}
				Readspeed=$1
				Writespeed=$2
				if [ ${Readspeed} -lt 800 -o ${Writespeed} -lt 400 ]; then
					show_motd_warning "Your SD card seems to be very slow. Please check performance using armbianmonitor -c"
				fi
			fi
		fi
	fi
} # check_sd_card_speed

case $1 in
	*start*)
		# set optimal disk scheduler settings
		set_io_scheduler &
		
		# check sd card speed once
		check_sd_card_speed &

		# get hardware informations
		collect_informations
		
		# hardware detection
		detect_board
		
		# display message, log hardware id to file, write log
		echo -e "[\e[0;32m ok \x1B[0m] Starting ARM hardware info: $ID"
		echo $ID >/var/run/machine.id
		if [ $? -ne 0 ]; then
			# most probably readonly fs. We'll try to warn the user.
			show_motd_warning "It seems the rootfs is readonly at the moment. Please check your SD card for errors"
		fi
		# check whether auto detection override exists and if true use this for machine.id
		[ -f /root/.machine.id ] && cat /root/.machine.id >/var/run/machine.id
		log_hardware_info

		# crash detection, enable verbose logging and disable it at clean shutdown
		echo "$(date "+%s") $HARDWARE $ARCH $KERNELID $MACHINE $ID $VERSION" >/boot/.verbose
		sync
		;;
	query)
		# armbianmonitor mode -- only interested in hardware info
		collect_informations >/dev/null
		detect_board >/dev/null
		export HARDWARE ARCH KERNELID MACHINE ID VERSION
		;;
	*stop*)
		# remove /boot/.verbose only if /boot/.force-verbose doesn't exist.
		# If our users demand verbose messages they get them
		if [ -f /boot/.verbose -a ! -f /boot/.force-verbose ]; then
			rm /boot/.verbose
		fi
		collect_informations
		if [ $HARDWARE = "sun8i" ]; then
			# redefine green led to blink until shutdown
			echo heartbeat >/sys/class/leds/*green*/trigger
		fi
		;;
esac


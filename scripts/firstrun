#!/bin/bash

### BEGIN INIT INFO
# Provides:          firstrun
# Required-Start:    $all
# Required-Stop:
# Should-Start:      armhwinfo
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Armbian first run tasks
# Description:       Something needs to be done when is
#                    starting at first time.
### END INIT INFO

. /etc/armbian-release
. /etc/os-release
. /lib/init/vars.sh
. /lib/lsb/init-functions

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Log=/var/log/armhwinfo.log

do_firstrun_automated_user_configuration()
{
	#-----------------------------------------------------------------------------
	#Notes:
	# - See /boot/armbian_first_run.txt for full list of available variables
	# - Variable names here must here must match ones in config/armbian_first_run.txt

	#-----------------------------------------------------------------------------
	#Config FP
	local fp_config='/boot/armbian_first_run.txt'

	#-----------------------------------------------------------------------------
	#Grab user requested settings
	if [[ -f $fp_config ]]; then

		# Convert line endings to Unix from Dos
		sed -i $'s/\r$//' "$fp_config"

		# check syntax
		bash -n "$fp_config" || return

		# Load vars directly from file
		source "$fp_config"

		#-----------------------------------------------------------------------------
		# - Remove configuration file
		if [[ $FR_general_delete_this_file_after_completion == 1 ]]; then
			dd if=/dev/urandom of="$fp_config" bs=16K count=1
			sync
			rm "$fp_config"
		fi

		#-----------------------------------------------------------------------------
		# Set Network
		if [[ $FR_net_change_defaults == 1 ]]; then
			# - Get 1st index of available wlan and eth adapters
			local fp_ifconfig_tmp='/tmp/.ifconfig'
			ifconfig -a > "$fp_ifconfig_tmp" #export to file, should be quicker in loop than calling ifconfig each time.

			# find eth[0-9]
			for ((i=0; i<=9; i++))
			do
				if (( $(cat "$fp_ifconfig_tmp" | grep -ci -m1 "eth$i") )); then
					eth_index=$i
					break
				fi
			done

			# find wlan[0-9]
			for ((i=0; i<=9; i++))
			do
				if (( $(cat "$fp_ifconfig_tmp" | grep -ci -m1 "wlan$i") )); then
					wlan_index=$i
					break
				fi
			done

			rm "$fp_ifconfig_tmp"

			# - Kill dhclient
			killall -w dhclient

			# - Drop Connections
			ifdown eth$eth_index --force
			ifdown wlan$wlan_index --force

			# - Wifi enable
			if [[ $FR_net_wifi_enabled == 1 ]]; then

				#Enable Wlan, disable Eth
				FR_net_ethernet_enabled=0
				sed -i "/allow-hotplug wlan$wlan_index/c\allow-hotplug wlan$wlan_index" /etc/network/interfaces
				sed -i "/allow-hotplug eth$eth_index/c\#allow-hotplug eth$eth_index" /etc/network/interfaces

				#Set SSid (covers both WEP and WPA)
				sed -i "/wireless-essid /c\   wireless-essid $FR_net_wifi_ssid" /etc/network/interfaces
				sed -i "/wpa-ssid /c\   wpa-ssid $FR_net_wifi_ssid" /etc/network/interfaces

				#Set Key (covers both WEP and WPA)
				sed -i "/wireless-key /c\   wireless-key $FR_net_wifi_key" /etc/network/interfaces
				sed -i "/wpa-psk /c\   wpa-psk $FR_net_wifi_key" /etc/network/interfaces

				#Set wifi country code
				iw reg set "$FR_net_wifi_countrycode"

				#Disable powersaving for known chips that suffer from powersaving features causing connection dropouts.
				#	This is espically true for the 8192cu and 8188eu.
				#FOURDEE: This may be better located as default in ARMbian during build (eg: common), as currently, not active until after a reboot.
				# - Realtek | all use the same option, so create array.
				local realtek_array=(
					"8192cu"
					"8188eu"
				)

				for ((i=0; i<${#realtek_array[@]}; i++))
				do
					echo -e "options ${realtek_array[$i]} rtw_power_mgnt=0" > /etc/modprobe.d/realtek_"${realtek_array[$i]}".conf
				done

				unset realtek_array

			# - Ethernet enable
			elif [[ $FR_net_ethernet_enabled == 1 ]]; then

				#Enable Eth, disable Wlan
				FR_net_wifi_enabled=0
				sed -i "/allow-hotplug eth$eth_index/c\allow-hotplug eth$eth_index" /etc/network/interfaces
				#sed -i "/allow-hotplug wlan$wlan_index/c\#allow-hotplug wlan$wlan_index" /etc/network/interfaces

			fi

			# - Static IP enable
			if [[ $FR_net_use_static == 1 ]]; then
				if [[ $FR_net_wifi_enabled == 1 ]]; then
					sed -i "/iface wlan$wlan_index inet/c\iface wlan$wlan_index inet static" /etc/network/interfaces
				elif [[ $FR_net_ethernet_enabled == 1 ]]; then
					sed -i "/iface eth$eth_index inet/c\iface eth$eth_index inet static" /etc/network/interfaces
				fi

				#This will change both eth and wlan entries, however, as only 1 adapater is enabled by this feature, should be fine.
				sed -i "/^#address/c\address $FR_net_static_ip" /etc/network/interfaces
				sed -i "/^#netmask/c\netmask $FR_net_static_mask" /etc/network/interfaces
				sed -i "/^#gateway/c\gateway $FR_net_static_gateway" /etc/network/interfaces
				sed -i "/^#dns-nameservers/c\dns-nameservers $FR_net_static_dns" /etc/network/interfaces
			fi

			# - Restart Networking
			if [[ "$DISTRIBUTION" == "wheezy" || "$DISTRIBUTION" == "trusty" ]]; then
				service networking restart
			else
				systemctl daemon-reload
				systemctl restart networking
			fi

			# - Manually bring up adapters (just incase)
			if [[ $FR_net_wifi_enabled == 1 ]]; then
				ifup wlan$wlan_index
			elif [[ $FR_net_ethernet_enabled == 1 ]]; then
				ifup eth$eth_index
			fi
		fi
	fi
} #do_firstrun_automated_user_configuration

case "$1" in
	start)

	# Run a q&d benchmark to be able to identify cards way too slow easily
	echo -e "\n### quick iozone test:$(cd /root; iozone -e -I -a -s 1M -r 4k -i 0 -i 1 -i 2 | grep '^            1024' | sed 's/            1024      //')" >> $Log

	# workaround for AP6212a under mainline kernel
	if [ -n "$(lsmod | grep brcmfmac)" ] && [ -z "$(dmesg | grep brcmf | grep Firm)" ]; then
		cp /lib/firmware/brcm/brcmfmac43430-sdio.bin /lib/firmware/brcm/brcmfmac43430-sdio.bin.bak
		cp /lib/firmware/ap6212/fw_bcm43438a1.bin /lib/firmware/brcm/brcmfmac43430-sdio.bin
		rmmod brcmfmac
		modprobe brcmfmac
	fi

	# BT tweaks
	case ${BOARD} in
		cubietruck)
			systemctl enable brcm40183-patch && service brcm40183-patch start
			;;
		bananapim2plus|nanopiair|nanopim1plus|orangepizeroplus2*)
			update-rc.d ap6212-bluetooth defaults
			;;
		cubox-i)
			update-rc.d brcm4330-patch defaults && /etc/init.d/brcm4330-patch start
			;;
	esac

	# update console info
	setupcon --save
	# SSH Keys creation
	rm -f /etc/ssh/ssh_host*
	read entropy_before </proc/sys/kernel/random/entropy_avail
	dpkg-reconfigure openssh-server >/dev/null 2>&1
	service sshd restart
	read entropy_after </proc/sys/kernel/random/entropy_avail
	echo -e "\n### [firstrun] Recreated SSH keys (entropy: ${entropy_before} ${entropy_after})" >>${Log}
	FREESIZE=$(( $(findmnt --target / -n -o AVAIL -b) / 1048576 )) # MiB
	SWAPFILE=/var/swap
	if [[ ! -f $SWAPFILE && $FREESIZE -gt 132 ]]; then
		fallocate -l 128M $SWAPFILE || dd if=/dev/zero of=$SWAPFILE bs=1M count=128 status=noxfer
		chown root:root $SWAPFILE
		chmod 0600 $SWAPFILE
		mkswap $SWAPFILE
		swapon $SWAPFILE
		grep -q swap /etc/fstab || echo "$SWAPFILE none swap sw 0 0" >> /etc/fstab
		grep -q swap /etc/sysctl.conf || echo "vm.swappiness=0" >> /etc/sysctl.conf
		echo -e "\n### [firstrun] Created 128MB emergency swap as $SWAPFILE" >>${Log}
	fi

	# some hardware workarounds
	case $LINUXFAMILY in
		sun7i|sun8i)
			# set some mac address for BT
			[[ -n $(lsmod | grep dhd) ]] && \
				(MACADDR=$(printf '43:29:B1:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]) ; \
				sed -i "s/^MAC_ADDR=.*/MAC_ADDR=${MACADDR}/" /etc/default/brcm40183 ;\
				sed -i "s/^MAC_ADDR=.*/MAC_ADDR=${MACADDR}/" /etc/default/ap6212 \
				echo -e "\n### [firstrun] Use MAC address ${MACADDR} for Bluetooth from now" >>${Log})

			case $BOARD_NAME in
				"NanoPi Air"|"NanoPi M1 Plus")
					# change serial port for BT on FriendlyELEC H3 boards
					sed -i "s/^PORT=.*/PORT=ttyS3/" /etc/default/ap6212
					;;
				"Orange Pi Lite"|"Orange Pi Zero Plus 2"|"NanoPi Air")
					# relink /etc/network/interfaces on Wi-Fi only boards
					cd /etc/network/ && ln -sf interfaces.network-manager interfaces
					;;
				"Orange Pi Zero")
					# set OPi Zero WiFi address permanently based on a random address using Allwinner's MAC prefix
					MACADDR=$(printf 'DC:44:6D:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
			                echo "options xradio_wlan macaddr=${MACADDR}" >/etc/modprobe.d/xradio_wlan.conf
			                echo -e "\n### [firstrun] Use MAC address ${MACADDR} for Wi-Fi from now" >>${Log}
					cd /etc/network/ && ln -sf interfaces.network-manager interfaces
					(modprobe -r xradio_wlan && sleep 1 && modprobe xradio_wlan) &
					;;
			esac

			# trigger red or blue LED as user feedback
			echo heartbeat >/sys/class/leds/*red*/trigger 2>/dev/null || echo heartbeat >/sys/class/leds/*blue*/trigger 2>/dev/null
			;;
		pine64)
			if [[ -z $(grep ethaddr /boot/armbianEnv.txt) && -f /sys/class/net/eth0/address ]]; then
				echo "ethaddr=$(cat /sys/class/net/eth0/address)" >> /boot/armbianEnv.txt
			fi
			;;
		rockchip)
			# set MAC for eth0
			MACADDR=$(printf 'da:42:ea:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
			sed -i "s/^\#[^ tab]\+hwaddress ether/\thwaddress ether $MACADDR/" /etc/network/interfaces
			;;

	esac

	systemctl disable firstrun
	exit 0
	;;

	*)
	echo "Usage: $0 start"
	exit 0
	;;
esac

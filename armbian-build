#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0
#
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/

clear

# Set the tui
if command -v whiptail > /dev/null; then
   DIALOG=whiptail
elif command -v dialog > /dev/null; then
   DIALOG=dialog
else
    echo "Error: Neither whiptail nor dialog is installed."
    exit 1
fi

# More than one command can map to the same handler. In that case, use ARMBIAN_COMMANDS_TO_VARS_DICT for specific vars.
declare -g -A ARMBIAN_COMMANDS_TO_HANDLERS_DICT=(
        ["docker"]="docker" # thus requires cli_docker_pre_run and cli_docker_run
		["docker-purge"]="docker"
		["dockerpurge"]="docker"
		["docker-shell"]="docker"
		["dockershell"]="docker"
		["generate-dockerfile"]="docker"
		["requirements"]="requirements" # implemented in cli_requirements_pre_run and cli_requirements_run
		["configdump"]="config_dump_json"
		["config-dump"]="config_dump_json"
		["config-dump-json"]="config_dump_json"
		["config-dump-no-json"]="config_dump_json"
		["inventory"]="json_info"
		["targets"]="json_info"
		["targets-dashboard"]="json_info"
		["targets-composed"]="json_info"
		["debs-to-repo-json"]="json_info"
		["gha-matrix"]="json_info"
		["gha-workflow"]="json_info"
		["gha-template"]="json_info"
		["debs-to-repo-download"]="json_info" # implemented in cli_json_info_pre_run and cli_json_info_run
		["debs-to-repo-reprepro"]="json_info" # implemented in cli_json_info_pre_run and cli_json_info_run
		["kernel-patches-to-git"]="patch_kernel"  # implemented in cli_patch_kernel_pre_run and cli_patch_kernel_run
		["rewrite-kernel-patches"]="patch_kernel" # implemented in cli_patch_kernel_pre_run and cli_patch_kernel_run
		["build"]="standard_build" # implemented in cli_standard_build_pre_run and cli_standard_build_run
		["distccd"]="distccd"      # implemented in cli_distccd_pre_run and cli_distccd_run
		["flash"]="flash"          # implemented in cli_flash_pre_run and cli_flash_run
)

# EN ARMBIAN_COMMANDS_TO_HANDLERS_DICT Descritions Groups
declare -A COMMAND_DESCRIPTIONS_EN=(
    ["docker"]="Manage Docker containers"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
)

generate_descriptions() {
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    local i=1
    local command
    local description

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"
        printf '%d %s  - %s\n    ["%s"]="%s"\n' "$i" "$command" "$description" "$command" "$handler"
        ((i++))
    done
}

generate_json() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start JSON array
    json_output="["

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        if [[ $i -gt 1 ]]; then
            json_output+=", "
        fi

        # Append JSON object to the array
        json_output+=$(printf '{"command": "%s", "description": "%s", "handler": "%s"}' "$command" "$description" "$handler")

        ((i++))
    done

    # End JSON array
    json_output+="]"

    # Print the formatted JSON
    echo "$json_output" | jq
}

# html output
generate_html() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start HTML content
    html_output="<html><body><h1>Armbian Build Framework Commands</h1><ul>"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append HTML list item to the content
        html_output+="<li><strong>$command</strong>: $description (Handler: $handler)</li>"

        ((i++))
    done

    # End HTML content
    html_output+="</ul></body></html>"

    # Print the formatted HTML
    echo "$html_output"
}


# TUI Menu
generate_tui() {

    local i=0
    local command
    local description

	if command -v whiptail > /dev/null; then
	   local DIALOG=whiptail
	elif command -v dialog > /dev/null; then
	   local DIALOG=dialog
	else
	    echo "Error: Neither whiptail nor dialog is installed."
	    exit 1
	fi

	for command in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"
        options+=("$i" "$command - $description")
		results+=("[$command]=\"$handler\"")
        ((i++))
    done 


	choice=$($DIALOG --title "Config Options" --menu "Choose an option:" 0 0 9 "${options[@]}" 3>&1 1>&2 2>&3)
	echo -e "Choice $choice Result:\n\t ${results[$choice]}" | show_message
	}

# TUI OK message
show_message(){

    # Read the input from the pipe continuously until there is no more input
    input=""
    while read -r line; do
        input+="$line\n"
    done

    # Display the "OK" message box with the input data
    $DIALOG --title "Message Box" --msgbox "$input" 0 0
    clear
    }

# Bash menu
generate_menu() {
    local i=1
    local command
    local description

    echo "Config Options:"
    for command in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"
        echo "$i. $command - $description"
        ((i++))
    done

    read -p "Choose an option (enter the number): " choice

    if [[ $choice -ge 1 && $choice -le ${#ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]} ]]; then
        echo -e "Choice $choice Result:\n\t []=\${[]}"
    else
        echo "Invalid choice. Please enter a valid number."
    fi
}

generate_markdown() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start Markdown content
    markdown_output="# Armbian Build Framework Commands\n"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append Markdown list item to the content
        markdown_output+="\n## $command\n- **Description:** $description\n- **Handler:** $handler\n"

        ((i++))
    done

    # Print the formatted Markdown
    echo -e "$markdown_output"
}

generate_help_message() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -h  Display this help message "
    echo "  -n  Generate Numbered output "
	echo "  -j  Generate json output "
	echo "  -t  Generate TUI output "
    echo "  -b  Generate Bash menu output "
    echo "  -m  Generate Markdown output "
    echo "  -H  Generate HTML output "
}

# Call the function

while getopts "bhHjmnt" opt; do
    case "$opt" in

	b)  generate_menu ; exit 0 ;;
	h)  generate_help_message ; exit 0 ;;
	H)  generate_html ; exit 0 ;;
	j)  generate_json ; exit 0 ;;
	m)  generate_markdown ; exit 0 ;;
	n)  generate_descriptions ; exit 0 ;;
	t)  generate_tui ; exit 0 ;;
	*) echo "Invalid option"; generate_help_message; exit 1 ;;
    esac
done

if [[ $1 == *"--"* ]]; then
    echo "Error: Invalid option detected"
    exit 1
elif [[ -n $1 ]] && ! [[ $1 == --* || $1 == -* ]]; then
    bash ./compile.sh "$@"
elif [[ -z $1 ]]; then
     generate_menu
fi

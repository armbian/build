#!/usr/bin/env bash
# This file is/was autogenerated by lib/tools/gen-library.sh; don't modify manually

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/bsp-cli.sh
# shellcheck source=lib/functions/bsp/bsp-cli.sh
source "${SRC}"/lib/functions/bsp/bsp-cli.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/bsp-desktop.sh
# shellcheck source=lib/functions/bsp/bsp-desktop.sh
source "${SRC}"/lib/functions/bsp/bsp-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/utils-bsp.sh
# shellcheck source=lib/functions/bsp/utils-bsp.sh
source "${SRC}"/lib/functions/bsp/utils-bsp.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-build.sh
# shellcheck source=lib/functions/cli/cli-build.sh
source "${SRC}"/lib/functions/cli/cli-build.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-configdump.sh
# shellcheck source=lib/functions/cli/cli-configdump.sh
source "${SRC}"/lib/functions/cli/cli-configdump.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-docker.sh
# shellcheck source=lib/functions/cli/cli-docker.sh
source "${SRC}"/lib/functions/cli/cli-docker.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-requirements.sh
# shellcheck source=lib/functions/cli/cli-requirements.sh
source "${SRC}"/lib/functions/cli/cli-requirements.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-undecided.sh
# shellcheck source=lib/functions/cli/cli-undecided.sh
source "${SRC}"/lib/functions/cli/cli-undecided.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-vagrant.sh
# shellcheck source=lib/functions/cli/cli-vagrant.sh
source "${SRC}"/lib/functions/cli/cli-vagrant.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/commands.sh
# shellcheck source=lib/functions/cli/commands.sh
source "${SRC}"/lib/functions/cli/commands.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/entrypoint.sh
# shellcheck source=lib/functions/cli/entrypoint.sh
source "${SRC}"/lib/functions/cli/entrypoint.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/utils-cli.sh
# shellcheck source=lib/functions/cli/utils-cli.sh
source "${SRC}"/lib/functions/cli/utils-cli.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/atf.sh
# shellcheck source=lib/functions/compilation/atf.sh
source "${SRC}"/lib/functions/compilation/atf.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/debs.sh
# shellcheck source=lib/functions/compilation/debs.sh
source "${SRC}"/lib/functions/compilation/debs.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-debs.sh
# shellcheck source=lib/functions/compilation/kernel-debs.sh
source "${SRC}"/lib/functions/compilation/kernel-debs.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel.sh
# shellcheck source=lib/functions/compilation/kernel.sh
source "${SRC}"/lib/functions/compilation/kernel.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/fasthash.sh
# shellcheck source=lib/functions/compilation/patch/fasthash.sh
source "${SRC}"/lib/functions/compilation/patch/fasthash.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/kernel-bootsplash.sh
# shellcheck source=lib/functions/compilation/patch/kernel-bootsplash.sh
source "${SRC}"/lib/functions/compilation/patch/kernel-bootsplash.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/kernel-drivers.sh
# shellcheck source=lib/functions/compilation/patch/kernel-drivers.sh
source "${SRC}"/lib/functions/compilation/patch/kernel-drivers.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/patching.sh
# shellcheck source=lib/functions/compilation/patch/patching.sh
source "${SRC}"/lib/functions/compilation/patch/patching.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot.sh
# shellcheck source=lib/functions/compilation/uboot.sh
source "${SRC}"/lib/functions/compilation/uboot.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/utils-compilation.sh
# shellcheck source=lib/functions/compilation/utils-compilation.sh
source "${SRC}"/lib/functions/compilation/utils-compilation.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/aggregation.sh
# shellcheck source=lib/functions/configuration/aggregation.sh
source "${SRC}"/lib/functions/configuration/aggregation.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/config-desktop.sh
# shellcheck source=lib/functions/configuration/config-desktop.sh
source "${SRC}"/lib/functions/configuration/config-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/interactive.sh
# shellcheck source=lib/functions/configuration/interactive.sh
source "${SRC}"/lib/functions/configuration/interactive.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/main-config.sh
# shellcheck source=lib/functions/configuration/main-config.sh
source "${SRC}"/lib/functions/configuration/main-config.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/menu.sh
# shellcheck source=lib/functions/configuration/menu.sh
source "${SRC}"/lib/functions/configuration/menu.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/extras/buildpkg.sh
# shellcheck source=lib/functions/extras/buildpkg.sh
source "${SRC}"/lib/functions/extras/buildpkg.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/extras/fel.sh
# shellcheck source=lib/functions/extras/fel.sh
source "${SRC}"/lib/functions/extras/fel.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/chroot-helpers.sh
# shellcheck source=lib/functions/general/chroot-helpers.sh
source "${SRC}"/lib/functions/general/chroot-helpers.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/cleaning.sh
# shellcheck source=lib/functions/general/cleaning.sh
source "${SRC}"/lib/functions/general/cleaning.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/downloads.sh
# shellcheck source=lib/functions/general/downloads.sh
source "${SRC}"/lib/functions/general/downloads.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/git.sh
# shellcheck source=lib/functions/general/git.sh
source "${SRC}"/lib/functions/general/git.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/repo.sh
# shellcheck source=lib/functions/general/repo.sh
source "${SRC}"/lib/functions/general/repo.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/apt-cacher-ng.sh
# shellcheck source=lib/functions/host/apt-cacher-ng.sh
source "${SRC}"/lib/functions/host/apt-cacher-ng.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/basic-deps.sh
# shellcheck source=lib/functions/host/basic-deps.sh
source "${SRC}"/lib/functions/host/basic-deps.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/docker.sh
# shellcheck source=lib/functions/host/docker.sh
source "${SRC}"/lib/functions/host/docker.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/external-toolchains.sh
# shellcheck source=lib/functions/host/external-toolchains.sh
source "${SRC}"/lib/functions/host/external-toolchains.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/host-utils.sh
# shellcheck source=lib/functions/host/host-utils.sh
source "${SRC}"/lib/functions/host/host-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/prepare-host.sh
# shellcheck source=lib/functions/host/prepare-host.sh
source "${SRC}"/lib/functions/host/prepare-host.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/vagrant.sh
# shellcheck source=lib/functions/host/vagrant.sh
source "${SRC}"/lib/functions/host/vagrant.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/compress-checksum.sh
# shellcheck source=lib/functions/image/compress-checksum.sh
source "${SRC}"/lib/functions/image/compress-checksum.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/fingerprint.sh
# shellcheck source=lib/functions/image/fingerprint.sh
source "${SRC}"/lib/functions/image/fingerprint.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/initrd.sh
# shellcheck source=lib/functions/image/initrd.sh
source "${SRC}"/lib/functions/image/initrd.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/loop.sh
# shellcheck source=lib/functions/image/loop.sh
source "${SRC}"/lib/functions/image/loop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/partitioning.sh
# shellcheck source=lib/functions/image/partitioning.sh
source "${SRC}"/lib/functions/image/partitioning.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/rootfs-to-image.sh
# shellcheck source=lib/functions/image/rootfs-to-image.sh
source "${SRC}"/lib/functions/image/rootfs-to-image.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/write-device.sh
# shellcheck source=lib/functions/image/write-device.sh
source "${SRC}"/lib/functions/image/write-device.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/capture.sh
# shellcheck source=lib/functions/logging/capture.sh
source "${SRC}"/lib/functions/logging/capture.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/logging.sh
# shellcheck source=lib/functions/logging/logging.sh
source "${SRC}"/lib/functions/logging/logging.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/runners.sh
# shellcheck source=lib/functions/logging/runners.sh
source "${SRC}"/lib/functions/logging/runners.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/stacktraces.sh
# shellcheck source=lib/functions/logging/stacktraces.sh
source "${SRC}"/lib/functions/logging/stacktraces.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/traps.sh
# shellcheck source=lib/functions/logging/traps.sh
source "${SRC}"/lib/functions/logging/traps.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/config-prepare.sh
# shellcheck source=lib/functions/main/config-prepare.sh
source "${SRC}"/lib/functions/main/config-prepare.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/default-build.sh
# shellcheck source=lib/functions/main/default-build.sh
source "${SRC}"/lib/functions/main/default-build.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/rootfs-image.sh
# shellcheck source=lib/functions/main/rootfs-image.sh
source "${SRC}"/lib/functions/main/rootfs-image.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-install.sh
# shellcheck source=lib/functions/rootfs/apt-install.sh
source "${SRC}"/lib/functions/rootfs/apt-install.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-sources.sh
# shellcheck source=lib/functions/rootfs/apt-sources.sh
source "${SRC}"/lib/functions/rootfs/apt-sources.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/boot_logo.sh
# shellcheck source=lib/functions/rootfs/boot_logo.sh
source "${SRC}"/lib/functions/rootfs/boot_logo.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/create-cache.sh
# shellcheck source=lib/functions/rootfs/create-cache.sh
source "${SRC}"/lib/functions/rootfs/create-cache.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/customize.sh
# shellcheck source=lib/functions/rootfs/customize.sh
source "${SRC}"/lib/functions/rootfs/customize.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-agnostic.sh
# shellcheck source=lib/functions/rootfs/distro-agnostic.sh
source "${SRC}"/lib/functions/rootfs/distro-agnostic.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-specific.sh
# shellcheck source=lib/functions/rootfs/distro-specific.sh
source "${SRC}"/lib/functions/rootfs/distro-specific.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/post-tweaks.sh
# shellcheck source=lib/functions/rootfs/post-tweaks.sh
source "${SRC}"/lib/functions/rootfs/post-tweaks.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/qemu-static.sh
# shellcheck source=lib/functions/rootfs/qemu-static.sh
source "${SRC}"/lib/functions/rootfs/qemu-static.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/rootfs-desktop.sh
# shellcheck source=lib/functions/rootfs/rootfs-desktop.sh
source "${SRC}"/lib/functions/rootfs/rootfs-desktop.sh


# no errors tolerated. one last time for the win!
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
# This file is/was autogenerated by lib/tools/gen-library.sh; don't modify manually

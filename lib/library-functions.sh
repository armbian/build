#!/usr/bin/env bash
# This file is/was autogenerated by lib/tools/gen-library.sh; don't modify manually

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-base-files.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-base-files.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-base-files.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-bsp-cli.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-bsp-cli.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-bsp-cli.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-bsp-desktop.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-bsp-desktop.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-bsp-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-config.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-config.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-config.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-desktop.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-desktop.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-plymouth-theme.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-plymouth-theme.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-plymouth-theme.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-zsh.sh
# shellcheck source=lib/functions/artifacts/artifact-armbian-zsh.sh
source "${SRC}"/lib/functions/artifacts/artifact-armbian-zsh.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh
# shellcheck source=lib/functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh
source "${SRC}"/lib/functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-firmware.sh
# shellcheck source=lib/functions/artifacts/artifact-firmware.sh
source "${SRC}"/lib/functions/artifacts/artifact-firmware.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-full_firmware.sh
# shellcheck source=lib/functions/artifacts/artifact-full_firmware.sh
source "${SRC}"/lib/functions/artifacts/artifact-full_firmware.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-kernel.sh
# shellcheck source=lib/functions/artifacts/artifact-kernel.sh
source "${SRC}"/lib/functions/artifacts/artifact-kernel.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-rootfs.sh
# shellcheck source=lib/functions/artifacts/artifact-rootfs.sh
source "${SRC}"/lib/functions/artifacts/artifact-rootfs.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-uboot.sh
# shellcheck source=lib/functions/artifacts/artifact-uboot.sh
source "${SRC}"/lib/functions/artifacts/artifact-uboot.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifacts-obtain.sh
# shellcheck source=lib/functions/artifacts/artifacts-obtain.sh
source "${SRC}"/lib/functions/artifacts/artifacts-obtain.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifacts-registry.sh
# shellcheck source=lib/functions/artifacts/artifacts-registry.sh
source "${SRC}"/lib/functions/artifacts/artifacts-registry.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/armbian-bsp-cli-deb.sh
# shellcheck source=lib/functions/bsp/armbian-bsp-cli-deb.sh
source "${SRC}"/lib/functions/bsp/armbian-bsp-cli-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/armbian-bsp-desktop-deb.sh
# shellcheck source=lib/functions/bsp/armbian-bsp-desktop-deb.sh
source "${SRC}"/lib/functions/bsp/armbian-bsp-desktop-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/utils-bsp.sh
# shellcheck source=lib/functions/bsp/utils-bsp.sh
source "${SRC}"/lib/functions/bsp/utils-bsp.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-artifact.sh
# shellcheck source=lib/functions/cli/cli-artifact.sh
source "${SRC}"/lib/functions/cli/cli-artifact.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-build.sh
# shellcheck source=lib/functions/cli/cli-build.sh
source "${SRC}"/lib/functions/cli/cli-build.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-configdump.sh
# shellcheck source=lib/functions/cli/cli-configdump.sh
source "${SRC}"/lib/functions/cli/cli-configdump.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-distccd.sh
# shellcheck source=lib/functions/cli/cli-distccd.sh
source "${SRC}"/lib/functions/cli/cli-distccd.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-docker.sh
# shellcheck source=lib/functions/cli/cli-docker.sh
source "${SRC}"/lib/functions/cli/cli-docker.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-flash.sh
# shellcheck source=lib/functions/cli/cli-flash.sh
source "${SRC}"/lib/functions/cli/cli-flash.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-jsoninfo.sh
# shellcheck source=lib/functions/cli/cli-jsoninfo.sh
source "${SRC}"/lib/functions/cli/cli-jsoninfo.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-oras.sh
# shellcheck source=lib/functions/cli/cli-oras.sh
source "${SRC}"/lib/functions/cli/cli-oras.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-patch.sh
# shellcheck source=lib/functions/cli/cli-patch.sh
source "${SRC}"/lib/functions/cli/cli-patch.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-requirements.sh
# shellcheck source=lib/functions/cli/cli-requirements.sh
source "${SRC}"/lib/functions/cli/cli-requirements.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-undecided.sh
# shellcheck source=lib/functions/cli/cli-undecided.sh
source "${SRC}"/lib/functions/cli/cli-undecided.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/commands.sh
# shellcheck source=lib/functions/cli/commands.sh
source "${SRC}"/lib/functions/cli/commands.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/entrypoint.sh
# shellcheck source=lib/functions/cli/entrypoint.sh
source "${SRC}"/lib/functions/cli/entrypoint.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/utils-cli.sh
# shellcheck source=lib/functions/cli/utils-cli.sh
source "${SRC}"/lib/functions/cli/utils-cli.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/armbian-kernel.sh
# shellcheck source=lib/functions/compilation/armbian-kernel.sh
source "${SRC}"/lib/functions/compilation/armbian-kernel.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/atf.sh
# shellcheck source=lib/functions/compilation/atf.sh
source "${SRC}"/lib/functions/compilation/atf.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/ccache.sh
# shellcheck source=lib/functions/compilation/ccache.sh
source "${SRC}"/lib/functions/compilation/ccache.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/crust.sh
# shellcheck source=lib/functions/compilation/crust.sh
source "${SRC}"/lib/functions/compilation/crust.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/distcc.sh
# shellcheck source=lib/functions/compilation/distcc.sh
source "${SRC}"/lib/functions/compilation/distcc.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-config.sh
# shellcheck source=lib/functions/compilation/kernel-config.sh
source "${SRC}"/lib/functions/compilation/kernel-config.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-debs.sh
# shellcheck source=lib/functions/compilation/kernel-debs.sh
source "${SRC}"/lib/functions/compilation/kernel-debs.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git-bundle.sh
# shellcheck source=lib/functions/compilation/kernel-git-bundle.sh
source "${SRC}"/lib/functions/compilation/kernel-git-bundle.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git-oras.sh
# shellcheck source=lib/functions/compilation/kernel-git-oras.sh
source "${SRC}"/lib/functions/compilation/kernel-git-oras.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git.sh
# shellcheck source=lib/functions/compilation/kernel-git.sh
source "${SRC}"/lib/functions/compilation/kernel-git.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-make.sh
# shellcheck source=lib/functions/compilation/kernel-make.sh
source "${SRC}"/lib/functions/compilation/kernel-make.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-patching.sh
# shellcheck source=lib/functions/compilation/kernel-patching.sh
source "${SRC}"/lib/functions/compilation/kernel-patching.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel.sh
# shellcheck source=lib/functions/compilation/kernel.sh
source "${SRC}"/lib/functions/compilation/kernel.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-config-deb.sh
# shellcheck source=lib/functions/compilation/packages/armbian-config-deb.sh
source "${SRC}"/lib/functions/compilation/packages/armbian-config-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-desktop-deb.sh
# shellcheck source=lib/functions/compilation/packages/armbian-desktop-deb.sh
source "${SRC}"/lib/functions/compilation/packages/armbian-desktop-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-plymouth-theme-deb.sh
# shellcheck source=lib/functions/compilation/packages/armbian-plymouth-theme-deb.sh
source "${SRC}"/lib/functions/compilation/packages/armbian-plymouth-theme-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-zsh-deb.sh
# shellcheck source=lib/functions/compilation/packages/armbian-zsh-deb.sh
source "${SRC}"/lib/functions/compilation/packages/armbian-zsh-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh
# shellcheck source=lib/functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh
source "${SRC}"/lib/functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/firmware-deb.sh
# shellcheck source=lib/functions/compilation/packages/firmware-deb.sh
source "${SRC}"/lib/functions/compilation/packages/firmware-deb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/utils-dpkgdeb.sh
# shellcheck source=lib/functions/compilation/packages/utils-dpkgdeb.sh
source "${SRC}"/lib/functions/compilation/packages/utils-dpkgdeb.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/drivers-harness.sh
# shellcheck source=lib/functions/compilation/patch/drivers-harness.sh
source "${SRC}"/lib/functions/compilation/patch/drivers-harness.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/drivers_network.sh
# shellcheck source=lib/functions/compilation/patch/drivers_network.sh
source "${SRC}"/lib/functions/compilation/patch/drivers_network.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/patching.sh
# shellcheck source=lib/functions/compilation/patch/patching.sh
source "${SRC}"/lib/functions/compilation/patch/patching.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot-git.sh
# shellcheck source=lib/functions/compilation/uboot-git.sh
source "${SRC}"/lib/functions/compilation/uboot-git.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot-patching.sh
# shellcheck source=lib/functions/compilation/uboot-patching.sh
source "${SRC}"/lib/functions/compilation/uboot-patching.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot.sh
# shellcheck source=lib/functions/compilation/uboot.sh
source "${SRC}"/lib/functions/compilation/uboot.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/utils-compilation.sh
# shellcheck source=lib/functions/compilation/utils-compilation.sh
source "${SRC}"/lib/functions/compilation/utils-compilation.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/aggregation.sh
# shellcheck source=lib/functions/configuration/aggregation.sh
source "${SRC}"/lib/functions/configuration/aggregation.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/compilation-config.sh
# shellcheck source=lib/functions/configuration/compilation-config.sh
source "${SRC}"/lib/functions/configuration/compilation-config.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/config-desktop.sh
# shellcheck source=lib/functions/configuration/config-desktop.sh
source "${SRC}"/lib/functions/configuration/config-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/interactive.sh
# shellcheck source=lib/functions/configuration/interactive.sh
source "${SRC}"/lib/functions/configuration/interactive.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/main-config.sh
# shellcheck source=lib/functions/configuration/main-config.sh
source "${SRC}"/lib/functions/configuration/main-config.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/menu.sh
# shellcheck source=lib/functions/configuration/menu.sh
source "${SRC}"/lib/functions/configuration/menu.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/package-lists.sh
# shellcheck source=lib/functions/configuration/package-lists.sh
source "${SRC}"/lib/functions/configuration/package-lists.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/apt-utils.sh
# shellcheck source=lib/functions/general/apt-utils.sh
source "${SRC}"/lib/functions/general/apt-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/bat-cat.sh
# shellcheck source=lib/functions/general/bat-cat.sh
source "${SRC}"/lib/functions/general/bat-cat.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/chroot-helpers.sh
# shellcheck source=lib/functions/general/chroot-helpers.sh
source "${SRC}"/lib/functions/general/chroot-helpers.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/cleaning.sh
# shellcheck source=lib/functions/general/cleaning.sh
source "${SRC}"/lib/functions/general/cleaning.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/countdown.sh
# shellcheck source=lib/functions/general/countdown.sh
source "${SRC}"/lib/functions/general/countdown.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/deprecations.sh
# shellcheck source=lib/functions/general/deprecations.sh
source "${SRC}"/lib/functions/general/deprecations.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/downloads.sh
# shellcheck source=lib/functions/general/downloads.sh
source "${SRC}"/lib/functions/general/downloads.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/extensions.sh
# shellcheck source=lib/functions/general/extensions.sh
source "${SRC}"/lib/functions/general/extensions.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/git-ref2info.sh
# shellcheck source=lib/functions/general/git-ref2info.sh
source "${SRC}"/lib/functions/general/git-ref2info.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/git.sh
# shellcheck source=lib/functions/general/git.sh
source "${SRC}"/lib/functions/general/git.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/github-actions.sh
# shellcheck source=lib/functions/general/github-actions.sh
source "${SRC}"/lib/functions/general/github-actions.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/hash-files.sh
# shellcheck source=lib/functions/general/hash-files.sh
source "${SRC}"/lib/functions/general/hash-files.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/memoize-cached.sh
# shellcheck source=lib/functions/general/memoize-cached.sh
source "${SRC}"/lib/functions/general/memoize-cached.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/oci-oras.sh
# shellcheck source=lib/functions/general/oci-oras.sh
source "${SRC}"/lib/functions/general/oci-oras.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/python-tools.sh
# shellcheck source=lib/functions/general/python-tools.sh
source "${SRC}"/lib/functions/general/python-tools.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/retry.sh
# shellcheck source=lib/functions/general/retry.sh
source "${SRC}"/lib/functions/general/retry.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/shellcheck.sh
# shellcheck source=lib/functions/general/shellcheck.sh
source "${SRC}"/lib/functions/general/shellcheck.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/apt-cacher-ng.sh
# shellcheck source=lib/functions/host/apt-cacher-ng.sh
source "${SRC}"/lib/functions/host/apt-cacher-ng.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/basic-deps.sh
# shellcheck source=lib/functions/host/basic-deps.sh
source "${SRC}"/lib/functions/host/basic-deps.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/docker.sh
# shellcheck source=lib/functions/host/docker.sh
source "${SRC}"/lib/functions/host/docker.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/external-toolchains.sh
# shellcheck source=lib/functions/host/external-toolchains.sh
source "${SRC}"/lib/functions/host/external-toolchains.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/host-release.sh
# shellcheck source=lib/functions/host/host-release.sh
source "${SRC}"/lib/functions/host/host-release.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/host-utils.sh
# shellcheck source=lib/functions/host/host-utils.sh
source "${SRC}"/lib/functions/host/host-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/mktemp-utils.sh
# shellcheck source=lib/functions/host/mktemp-utils.sh
source "${SRC}"/lib/functions/host/mktemp-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/mountpoints.sh
# shellcheck source=lib/functions/host/mountpoints.sh
source "${SRC}"/lib/functions/host/mountpoints.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/prepare-host.sh
# shellcheck source=lib/functions/host/prepare-host.sh
source "${SRC}"/lib/functions/host/prepare-host.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/tmpfs-utils.sh
# shellcheck source=lib/functions/host/tmpfs-utils.sh
source "${SRC}"/lib/functions/host/tmpfs-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/wsl2.sh
# shellcheck source=lib/functions/host/wsl2.sh
source "${SRC}"/lib/functions/host/wsl2.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/compress-checksum.sh
# shellcheck source=lib/functions/image/compress-checksum.sh
source "${SRC}"/lib/functions/image/compress-checksum.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/fingerprint.sh
# shellcheck source=lib/functions/image/fingerprint.sh
source "${SRC}"/lib/functions/image/fingerprint.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/initrd.sh
# shellcheck source=lib/functions/image/initrd.sh
source "${SRC}"/lib/functions/image/initrd.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/loop.sh
# shellcheck source=lib/functions/image/loop.sh
source "${SRC}"/lib/functions/image/loop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/partitioning.sh
# shellcheck source=lib/functions/image/partitioning.sh
source "${SRC}"/lib/functions/image/partitioning.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/rootfs-to-image.sh
# shellcheck source=lib/functions/image/rootfs-to-image.sh
source "${SRC}"/lib/functions/image/rootfs-to-image.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/write-device.sh
# shellcheck source=lib/functions/image/write-device.sh
source "${SRC}"/lib/functions/image/write-device.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/capture.sh
# shellcheck source=lib/functions/logging/capture.sh
source "${SRC}"/lib/functions/logging/capture.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/debug-dump.sh
# shellcheck source=lib/functions/logging/debug-dump.sh
source "${SRC}"/lib/functions/logging/debug-dump.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/display-alert.sh
# shellcheck source=lib/functions/logging/display-alert.sh
source "${SRC}"/lib/functions/logging/display-alert.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/export-logs.sh
# shellcheck source=lib/functions/logging/export-logs.sh
source "${SRC}"/lib/functions/logging/export-logs.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/logging.sh
# shellcheck source=lib/functions/logging/logging.sh
source "${SRC}"/lib/functions/logging/logging.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/runners.sh
# shellcheck source=lib/functions/logging/runners.sh
source "${SRC}"/lib/functions/logging/runners.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/section-logging.sh
# shellcheck source=lib/functions/logging/section-logging.sh
source "${SRC}"/lib/functions/logging/section-logging.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/stacktraces.sh
# shellcheck source=lib/functions/logging/stacktraces.sh
source "${SRC}"/lib/functions/logging/stacktraces.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/trap-logging.sh
# shellcheck source=lib/functions/logging/trap-logging.sh
source "${SRC}"/lib/functions/logging/trap-logging.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/traps.sh
# shellcheck source=lib/functions/logging/traps.sh
source "${SRC}"/lib/functions/logging/traps.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/build-packages.sh
# shellcheck source=lib/functions/main/build-packages.sh
source "${SRC}"/lib/functions/main/build-packages.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/config-interactive.sh
# shellcheck source=lib/functions/main/config-interactive.sh
source "${SRC}"/lib/functions/main/config-interactive.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/config-prepare.sh
# shellcheck source=lib/functions/main/config-prepare.sh
source "${SRC}"/lib/functions/main/config-prepare.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/default-build.sh
# shellcheck source=lib/functions/main/default-build.sh
source "${SRC}"/lib/functions/main/default-build.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/rootfs-image.sh
# shellcheck source=lib/functions/main/rootfs-image.sh
source "${SRC}"/lib/functions/main/rootfs-image.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/start-end.sh
# shellcheck source=lib/functions/main/start-end.sh
source "${SRC}"/lib/functions/main/start-end.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-install.sh
# shellcheck source=lib/functions/rootfs/apt-install.sh
source "${SRC}"/lib/functions/rootfs/apt-install.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-sources.sh
# shellcheck source=lib/functions/rootfs/apt-sources.sh
source "${SRC}"/lib/functions/rootfs/apt-sources.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/boot_logo.sh
# shellcheck source=lib/functions/rootfs/boot_logo.sh
source "${SRC}"/lib/functions/rootfs/boot_logo.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/create-cache.sh
# shellcheck source=lib/functions/rootfs/create-cache.sh
source "${SRC}"/lib/functions/rootfs/create-cache.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/customize.sh
# shellcheck source=lib/functions/rootfs/customize.sh
source "${SRC}"/lib/functions/rootfs/customize.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-agnostic.sh
# shellcheck source=lib/functions/rootfs/distro-agnostic.sh
source "${SRC}"/lib/functions/rootfs/distro-agnostic.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-specific.sh
# shellcheck source=lib/functions/rootfs/distro-specific.sh
source "${SRC}"/lib/functions/rootfs/distro-specific.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/post-tweaks.sh
# shellcheck source=lib/functions/rootfs/post-tweaks.sh
source "${SRC}"/lib/functions/rootfs/post-tweaks.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/qemu-static.sh
# shellcheck source=lib/functions/rootfs/qemu-static.sh
source "${SRC}"/lib/functions/rootfs/qemu-static.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/rootfs-create.sh
# shellcheck source=lib/functions/rootfs/rootfs-create.sh
source "${SRC}"/lib/functions/rootfs/rootfs-create.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/rootfs-desktop.sh
# shellcheck source=lib/functions/rootfs/rootfs-desktop.sh
source "${SRC}"/lib/functions/rootfs/rootfs-desktop.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/systemd-utils.sh
# shellcheck source=lib/functions/rootfs/systemd-utils.sh
source "${SRC}"/lib/functions/rootfs/systemd-utils.sh

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/trap-rootfs.sh
# shellcheck source=lib/functions/rootfs/trap-rootfs.sh
source "${SRC}"/lib/functions/rootfs/trap-rootfs.sh

# no errors tolerated. one last time for the win!
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
# This file is/was autogenerated by lib/tools/gen-library.sh; don't modify manually
